48 удк 519 687 1 алгоритм динамический балансировка вычислительный нагрузка и они реализация с п копысова а к новиков в н рычковы институт механика уро ран ижевск аннотация в работа рассматриваться алгоритм балансировка вычислительный на грузка в задача связанный с адаптивный перестроение сетка локаля ный повышение порядок аппроксимировать функция выполнять на многопроцессорный вычислительный система в тот число неоднородный ги бридный рассматриваться балансировка на уровень операционный система промежуточный программный обеспечение и пользовательский приложа ния ключевой слово параллельный вычисление динамический балансир ка вычислительный нагрузка процессор метод конечный элемент разда ление граф уровень балансировка введение под балансировка нагрузка бн пониматься такой разделение вы числительный нагрузка между процессор многопроцессорный вычис лительный система мвс который позволять занять каждый процессор полезный нагрузка по возможность больший часть время пецифический особенность параллельный алгоритм и обрабатывай мых данные пользовательский приложение определять алгоритмический дисбаланс нагрузка в рассматривать предметный область сеточный за дача проблема разбалансировка связать с адаптивный перестроение сетка локальный повышение порядок аппроксимировать функция и так далее такой вычислительный алгоритм сам способный подвергаться ди намический изменение следствие что становиться ещ более серьёзный нарушение балансировка 20 коммуникационный дисбаланс нагрузка обусловить различный произво дительность коммуникационный связь между процессор мвс мно гоядерный процессор или другой кластер в группа мвс с другой сто рон дисбаланс в обмен мочь быть связать и с параллельный приложа ние и определяться алгоритм решение задача важный пример для балансировка являться также гетерогенный вы числительное система с разделить память здесь требовать ресурс мочь быть определить только в процесс работа приложение и баланси ровка должный проводиться динамически возможно под разный операци онный система в весь этот случай балансировка нагрузка мочь осуществляться как статически так и динамически при статический балансировка приложа ние в система с локальный память и данные распределяться между процессор до начало вычисление полудинамический бн предполаг ет что разделение определяться на этап инициализация параллельный приложение до начало выполнение основный вычисление приложение динамический бн когда разделение и распределение объект напереть мера сеточный область периодически обновляться в течение весь время выполнение пользовательский приложение и объект перемещаться по мвс в соответствие с новый более оптимальный план так быть осущество ляться миграция объект причём новый разделение мочь определяться по различный критерий производительность узел мвс они загрузить ность или какой либо эвристический критерий и так п тогда время выполый нения параллельный приложение с динамический балансировка нагрузка состоять из где суммарный время выполнение параллельный приложение время на коммуникация параллельный часть программа время вычисление новый разделение время затрачивать на перемещё ния данные из старое разделение в новый параметр определять периодичность выполнение балансировка нагрузка 21 важно отметить что алгоритм реализовать динамический балан сировка должный сам обладать высокий эффективность в тот число обеспечивать они параллельный реализация так быть в ряд случай это связать с невозможность размещение сетка на один процессор а также выполнение локальный бн не рассматривать задача для весь сетка в целое затрата связанный с перемещение данные и обмен должный уменьшиться с каждый шаг балансировка в работа выделяться несколько уровень и даваться характеристика ала горитм они реализовать для достижение балансирование нагрузка про цессор для отдельный параллельный приложение балансировка на уровень операционный система ос механизм кластеризация разделение нагрузка и миграция процесс на этап выполнение балансировка на уровень промежуточный программный обеспечение ппо механизм высокоуровневый балансировка нагрузка в контечь сте сессия или запрос распределение команда на стадия трансляция балансировка на уровень пользовательский приложение реализация алгоритм балансировка в прикладной параллельный программа 1 балансировка на уровень операционный система существующий ос полагаться на однозначный статический распреда ление задание пользователь который мочь приводить к значительный разбалансировка процессор кластеризация помочь преодолеть возникать трудность техноть гия кластеризация обладать два основный преимущество она пов шаета масштабируемость и вычислительный мощность большинство кла стерный решение обеспечивать сбалансированность нагрузка и автом тический переключение с один узел на другой в случай перегрузка или отказ один из такой кластерный решение для и являться система 22 1 системный программный обеспечение для ядро такой как состоять из адаптивный алгоритм разделение ресурс ала горитм разделение ресурс разработать в соответствие с использование ресурс узел в режим реальный время всё этот алгоритм реализоваться благодаря механизм миграция про цессова с каждый запускать процесс ассоциироваться идентификатор уникальный домашний узел с который он быть запустить для ми грация процесс разбиваться на два часть пользовательский контекст и си стёмный контекст пользовательский часть состоять из код программа данные стек карта память и регистр процесс системный часть вкль чаять описание ресурс принадлежащий дать процесс и определять машинный зависимый часть который всегда оставаться на процесс ми грировать процесс использовать ресурс новый узел на сколько это воз можно но взаимодействовать с ос через домашний узел миграция базироваться на информация обеспечивать один из алго ритм разделение ресурс стратегия назначение задание основать так же на экономический принцип и конкурентный анализ этот стратегия да так возможность управлять гетерогенный ресурс способ близкие к оптимальный ключевой идея стратегия состоять в тот чтобы преобра зовать общий использование несколько гетерогенный ресурс такой как память и в единый гомогенный стоимость основываться на кооп рация тогда задание назначаться на тот машина где они иметь самый низкий стоимость ппо и обеспечивать исходный фиксировать размещение процесс по узел кластер в то время как выполнять это динамически в зависимость от конфигурация доступный ресурс ппо и работать на пользовательский уровень на который действо ют обычный приложение решение функционировать как мо дуля ядро операционный система и потому являться полностью прозрач ным для приложение нет необходимость модифицировать приложение под или связывать они с какой либо библиотека опера 23 ционный система это с один сторона альтернатива техно логиям и а с другой сторона они развитие здесь необходимо отметить что и мочь работать одновременно на один и тот же кластер пользователь и программа мочь напрямую взаимодействовать с через интерфейс который обеспечивать информация о состояние локальный процессор и процесс очевидный недостаток являться больший накладный раса ход при выполнение системный вызов дополнительный издержка по являться при выполнение операция сетевой доступ например всё сок ты создаваться в это приводить к больший коммуникационный затра там если процесс мигрировать из общий недостаток такой балансировка в гибкость и адаптивность пер выя возникать из за невозможность в режим выполнение принимать ре шение о балансировка нагрузка в приложение второй из за отсутствие обратный связь с реплика объект который работать на сторона сера вера балансировка и под он управление всё вместе представлять про цессать подвергать балансировка ещё один недостаток стандартный промежуточный по ограниченно использовать этот возможность ос они ре ализован по разный в разный ос 2 балансировка на уровень промежуточный программный обес печение основный промежуточный программный обеспечение ппо 2 для раса пределение процесс в параллельный си тема такой как и так далее предусматривать среда выполнение требовать адаптировать прить жения и осведомлённость пользователь о это оно включать в себя ути лита для инициализация привязка процесс к узел игнорировать доступный ресурс например свободный память и процесс ввод вывод это ппо запускаться на уровень пользователь как обычный приложение такой о разом становиться неспособный реагировать на неустойчивый загрузка и 24 адаптивный перераспределять вычислительный нагрузка балансировка нагрузка на промежуточный уровень оказываться предпо чтительный чем балансировка на более низкий уровень сеть или ос кото рые отличаться отсутствие гибкость и адаптируемость промежуточный по мочь обеспечить богатый набор метрика для балансировка в тот чис ле пользовательский зависимый от приложение гибкость в то время как сетевой или ос балансировщик работать лишь с фиксировать описа ния нагрузка промежуточный по мочь быть использовать совместно как с стандартный так и с специализировать сеть ос а также с система балансировка нагрузка тогда как низкоуровневый баланси ровщик тесно связать с аппаратный программный среда для который они предназначить механизм балансировка нагрузка реализовать в ппо миграция процесс 3 4 5 6 7 8 9 10 и др в сист мах обмен сообщение процесс содержать код весь прикладной программа запускаться на разный вычислительный узел в соответ ствие с задать конфигурация при возникать в время выполый нения разбалансировка они необходимо прервать переместить между узел и вновь запустить в прежний контекст в система обмен сообщение балансировка нагрузка формулироваться через эффектив ной перераспределение процесс между вычислительный узел при это миграция процесс это основной механизм балансировка планирование ресурс 11 12 13 14 и др распределённый система изначально состоять из отдельный модуль который взаимодействовать друг с друг привый дят к разбалансировка система поэтому необходимо эффективно свя зывать модуль в время работа распределённый система для выравни вания нагрузка в распределённый система балансировка мочь быть описать с помощь структура данные или объектный ориентировать интерфейс который позволять построить соответствие между по 25 ставщик и потребитель ресурс промежуточный программный обеспечение динамический балансировка па раллельный и распредел нный мвс должный обеспечивать оптимальный распределение параллельный приложение при динамически изменять ся ресурс за сч так миграция такой процесс между вычислительный узел мвс в состав промежуточный по для динамический балансировка нагрузка входить следующий компонент монитор нагрузка планирование процесс выполнение миграция задача и др текущий нагрузка кластер или распредел нной система отслеживать ся специальный монитор ресурс менеджер балансировка нагрузка рассчитывать балансировка нагрузка если система разбалансировать на чинаета работать менеджер миграция определять новый место выполый нения процессор и миграция отдельный сервис создавать копия процесс включая в он информация о использовать установленный коммуник ционный соединение и открытый файл для перемещение процесс на новый узел или процессор дать передаваться мигратор задача процесс с помощь система перезапуск задача восстанавливать исходный состояние процесс на новый узел и параллельный приложение продолжать выполый няться 2 1 миграция процесс ппо обмен сообщение состоять из сервис и библиотека который включаться в код прикладной программа путём расширение так быть модификация исходный код можно реализовать дополнительный функ цию миграция процесс как это сделать в и др основный идея состоять в следующий мигрировать процесс приостанавливаться принимать сервис оп ределять соответствовать этот процесс исполняемый файл состояние мигрировать процесс загрузить в память код и дать ные стек открытый канал файл сетевой соединение и др и так далее 26 передаваться на принимать сторона всё накопить за первый два шаг сообщение адресовать мигря руть процесс также передаваться на принимать сторона исходный экземпляр мигрировать процесс полностью останавль ваться новый запускаться с тот место состояние на который быть приостановить исходный для реализация миграция процесс необходимо наличие соответство ть возможность прикладной программный интерфейс опера ционный система на который быть использоваться расширить ппо должный включать функция приостановка процесс определение адрес ный пространство процесс запуск процесс в контекст и так далее мигра ция процесс мочь быть реализовать в однородный вычислительный сеть так к в процедура миграция задействовать такой параметр как адресный пространство процесс перемещение процесс между узел с разный размер оперативный память реализовать затруднительно решение мигрировать задача или нет зависеть от ряд параметр кото рые должный быть оценить управлять программа перемещение демон в случай параллельный задание выполняться на кластер управлять программа принимать в внимание нагрузка каждый узел средний нагрузка в мвс производительность сеть время необходимый для введение контрольный точка перемещение и перезапуск задача про гнозировать дальнейший нагрузка процессор практически всё ппо реализовать миграция процесс основать на расширение в настоящий время поддерживаться и развиваться нести колько такой система один из который 7 построение подобный система на база представить в проект 15 16 17 18 19 рассмотреть один из такой решение подход состоять в тот что система поддержка назначать виртуальный процесс на физич ский процессор в время выполнение приложение в отличие от обыча ный в число виртуальный процесс задаваться больший чем 27 число доступный процессор в основа лежать ппо и использовать он средство связь стратегия балансировка нагрузка модель пользовательский поток 20 программа состоять из множество объект распределить ных на доступный процессор такой образ основной модуль парало лельный вычисление в программа это объект который создаваться на любой доступный процессор и мочь обращаться к любой процессор этот объект создаваться динамически и они множество мочь действовать одновременно объект посылать сообщение друг друг для запус ка свой метод асинхронный концептуально система обрабатывать пул работа состоять из сообщение между и данные для создание но вых система мочь выбирать элемент из это пул и выполнять они она не быть обрабатывать два сообщение для один одновременно но она свободный отметить они в любой время обеспечивать динамический начальный балансировка нагруз ки такой образ расположение номер процессор не нужно определять при создание удалённый система сам разместить на процес сор с малый нагрузка идентифицировать по он идентификатор так как пользовательский код не знать на какой процессор находиться то объект потенциально мочь мигрировать с один процессор на другой это поведение использоваться для динамический балансировка структура контейнер такой как массив другой вид объект это контейнер он разновидность это группа группа узел и массив соотноситься с группа груп пами узел и массив группа это набор по один на каж дый процессор который адресоваться использование уникальный для весь система имя массив это набор произвольный число мигрировать отобразить на процессор согласно определённый пользователь карта группа при запуск приложение пользовательский объект нужно зарегистереть 28 ровать в система поддержка который при это назначить ет каждый из они уникальный идентификатор при вызов метод на удалённый объект этот идентификатор должный быть указать система регистрация пользовательский объект и поддержание этот идентифика тор мочь быть очень громоздкий поэтому в добавить интер фейсный транслятор он генерировать определение проксить объект кроме тот интерфейсный транслятор позволять расширять базовый функцио нальность ядро введение поток и объект пользый вательский уровень этот потоковый метод мочь блокироваться в ожидание данные выполнение синхронный вызов метод удалённый объект который возвращать дать в вид сообщение существовать ряд параллельный распределённый технология вкль чаять возможность балансирование нагрузка выделить только система 21 это технология программи рования на в качество коммуникационный среда выбрать стандарт с помощь интерфейс вызов стандарт ных функция из инкапсулировать система поверх интерфейс коммуникационный среда реализовать библиотека масштаби рования приложение на однородный и неоднородный сеть к промежуточный программный обеспечение возможность балан сировка нагрузка можно отнести и российский разработка 10 и 22 в язык программирование расширение принять под ход когда пользователь распределять не только дать но и вычисление переменный и массив распределяться по виртуальный сеть и подсеть при это в описание сеть указываться относительный мощность узел и скорость связь между они в процесс выполнение программа си стем поддержка язык стремиться максимально эффективно отобразить виртуальный сеть на группа процессор в результат пользователь по лучаять возможность равномерно нагружать узел этот подход позволять эффективно использовать гетерогенный сеть и решать нерегулярный зад 29 чи отличаться тем что объём вычисление производить на каждый узел выясняться динамически в процесс решение задача содержать средство позволять программист изменять оценка производительный сти реальный процессор использовать при отображение на они вира туальный процессор настраивать быть на тот вычисление который быть выполняться этот виртуальный процессор в система разработать в ипм они м в келдыш ран реализый ван возможность задание производительность процессор или они авто матический определение при запуск программа и они учёт при распря деление данные и вычисление между процессор это позволять программа распределять нагрузка на неоднородный кластер общий недостаток рассмотреть промежуточный по в тот что оно ограниченно использовать возможность ос и реализоваться по разный в раз ных ос 2 2 планирование ресурс сегодня всё частый при организация вычисление применяться разделение работа данные и вычислительный ресурс предусматривать исполь зование распределённый ресурс распределённый вычисление становить ся магистральный направление развитие вычислительный технология на смена отдельный независимый суперкомпьютер приходить группа высокопроизводительный система объединить в кластер этот вс ди намичёска формироваться из распределённый гетерогенный узел который мочь свободно подключаться и отключаться и управлять выделение сво они ресурс в общий пользование однако система вычисление не предназначить для решение па раллельный задача а нацелить по больший часть на выполнение пакетный приложение где каждый отдельный приложение выполняться полностью на один кластер система управление заниматься диспетчеризаци она отдельный задание а не взаимосвязь между параллельный ветвь один задача несколько независимый менеджер распределять вычислить 30 тельный задача на кластер в соответствие с некоторый критерий далее каждый кластер распределять задача присвоить он локальный плани ровщикома этот функция выполнять система пакетный обработка задание и др в среда один из возможный решение проблема планирование за ключаться в создание свой род метадиспетчер между служба и менеджер ресурс локальный вычислительный система рассмотреть один из существующий модель планирование всё зад чи который обеспечивать запрашивать какой либо сервис оповещать о свой характеристика требование далее специальный сервис строить с ответствие между заявка подзадача так чтобы максимально удовлетво рить потребность один и использовать возможность другой после че го он информировать сущность о построить соответствие затем задача устанавливать контакт и выполнять необходимый сервис дать модель реализовать в система при централизовать подход в распределение ресурс сервис отвечать за проблема размещение каждый узел мвс постоянно обращаться к м с запрос например сообщение о окончание выполнение задача получать задача от он и исполнять она в свой очередь мочь послать новый задача который затем мочь быть разместить по другой рабочий эффективность такой стратегия зависеть от число и относительный стоимость получение задача от и они выполнение в полностью децентрализованный схема нет центральный управлять щий соответственно отдельный пул задача назначаться на каждый узел мвс и незанятый процессор требовать задача от другой процессор в результат пул задача становиться распределённый структура данные к торая доступный различный задача асинхронный при это определяться какой либо процедура доступ например мочь требовать зад ния только от небольшой число сосед или выбирать другой процессор по задать случайный закон 31 конечно возможный и смешанный подход в это случай доступ к раса пределенный пул задача мочь быть получить несколько способ мочь быть назначить ответственный как за вычисление так и за управление очередь задача в это случай каждый должный периодически переключаться с вычисление на проверка ожидать за просова составление расписание требовать механизм для обнаружение момент время когда весь алгоритм быть завершить в противный случай про стаивать никогда не остановиться требовать задание от другой ограничиваться только вопрос программный обеспечение баланси ровка нагрузка рассмотреть система 11 кроме выполнение ми грация на свободный машина обеспечивать управление распреда ленный ресурс система это прежде весь по для поддержка распределённый ресурс механизм управление задание предполагать ведение очередь составление расписание назначение приоритет класа сификация доступный ресурс слежение за состояние задание плани рование ресурс в ориентировать на выполнение продолжитель ных задание в подобный система планирование ресурс распределённый парало лельный вычисление широко применяться экономико математический мо дели и алгоритм работать по тип брокер между продавец пул свободный вычислительный узел и покупатель пользовательский приложенить ями кроме это оба субъект сделка задавать диапазон свой пожесть ний и скидка премия такой образ кроме иметься ресурс узел сообщать при какой условие они быть выполнять задание от и какой тип приложение предпочтительный например покупатель выставль ет требование к товар мвс наличие определённый число процессор размер память и так далее продавец мочь отдать предпочтительный право за нимать задание свой узел с тот или иной приложение и так далее 32 система также мочь быть использовать для выполнение па раллельный продолжительный задание по технология и путём динамический предоставление свободный в данный момент машина для работа в режим в отличие от рассмотреть в пра дыдущий параграф технология миграция не требоваться изменение про грамм использоваться существующий стандартный интерфейс вызов при это действовать в роль менеджер ресурс для демон и как только программа потребоваться дополнительный узел быть сформировать запрос для на поиск свободный машина из пул и они размещение в виртуальный машина ппо поддерживать выполнение параллельный приложение иса пользовать в отличие от текущий реализация не допус каюта динамический распределение ресурс кроме это пока в реали зации не существовать диспечеризация возможный ситуация когда ни один из задача не смочь выполняться в последний время в распределённый система включаться элемент позволять учитывать архитектура эвм так в приложение включать сервис повышать качество взаимодействие между распря делить объект в зависимость от возможность коммуникационный среда 14 модель планирование ресурс использоваться в параллельно распределённый система реальный время проект разрабатывать стандарт балансировка нагрузка для один из реализация предстать лена в проект 14 как раз для применение в система реальный врем ни состоять из сервис балансировка нагрузка который манипулировать копия объект репать ками основный задача балансировщик такой же эффектив ной связывание сущность в данный случай клиент и серов ров объект интерфейс балансировщик включать описание разный вид нагрузка производительность процессор характеристика жёсткий 33 диск оперативный память вид коммуникационный сеть но структурный описание ресурс подобный отсутствовать они мочь быть реа лизован в пользовательский балансировщик на уровень приложение в вид объектный ориентировать интерфейс в осо бенной внимание уделяться функциональный возможность сервис для который описываться и реализовываться различный стратегия баланси ровка стратегия можно рассматривать с два независимый позиция по степень связывание клиент с сервер как связывать и по способ ба лансировка с кто связывать клиент мочь быть связать с сервер в течение сессия запрос или по необходимость в прикладной программа можно определять в зависимость от она логика когда и какой связь наибо лей приемлемый сессия выгодно использовать в тот случай когда клиент должный держать сервер в единоличный пользование в течение некоторый время запрос применяться для сервер использовать часто различ ный клиент также в прикладной программа можно определить тот или иной способ балансировка выделять два вид недаптивный и адап тивный в первый балансировщик определять для клиент сервер в соответ ствие с какой либо алгоритм по круг случайный образ и так далее а в второй для выбор использоваться информация о аппаратный программный среда и она характеристика система балансировка нагрузка в распреда ленный система мочь работать как в однородный так и в неоднородный вычислительный система здесь не возникать проблема миграция процес сова так к изначально прикладной программа проектироваться в вид набор распределённый модуль сервис балансировка нагрузка в обеспечивать поддержка объектный ориентировать модель балансировка нагрузка так быть детализ ция балансировка должный быть основать на объект а не на адрес или процесс прозрачность приложение так быть простой интерфейс и минимум модификация существующий программа поддержка пользов тельский метрика нагрузка и стратегия балансировка кроме тот необхо дить чтобы сервис балансировка нагрузка позволять приложенить 34 ям определять семантика метрика для тот чтобы измерять нагрузка и устанавливать стратегия для определение семантика балансировка и так далее на данный момент технология не решать весь проблема ба лансировка нагрузка основной задача который необходимо решить при реализация сервис балансировка платформонезависимость сервис ба лансировка нагрузка обеспечение обратный связь и контроль поддержка стратегия в вид модуль использование возможность адаптивный балан сировка уникальный идентификация объект эффективный интеграция весь компонент сервис балансировка преимущество по для балансировка нагрузка на основа мо жет использоваться совместно с средство балансировка на уровень сие ти ос и обеспечивать широкий круг условие балансировка нагрузка на уровень приложение однако не существовать один модель или стратегия который подходить бы для весь приложение следовательно многие решение для балансир ки нагрузка часто требовать внесение изменение программно 3 балансировка на уровень пользовательский приложение метод балансировка нагрузка реализовать программно в пользов тельск приложение основываться на следующий допущение вычислительный узел или процессор на параллельный компьют рах как правило однородный рассматривать параллельный приложение работать в монопольный режим расча тный сеточный область мочь быть произвольно разделить на необходимый число подобласть отказаться от допущение достаточно сложно при большой число вычис лительный узел с различный производительность и доступный память один из возможный вариант быть рассмотреть ниже второе ограничего ние требовать при выполнение приложение разрешение администратор си 35 стем и обычно вызывать неудобство другой пользователь кроме тот больший вычислительный ресурс редко выделять для выполнение один задание третий условие практически всегда выполняться в весь прить жения в избежание этот ограничение принять подход который балансировать нагрузка процессор и на этап разделение область и в время выполый нения программа на этап разделение область задача или приложение разделяться на подобласть приниматься что существовать вычислительный узел с сетевой структура и выполняться параллельный приложение с число подобла стея 3 1 постановка задача один из наиболее общий алгоритм реализация бн в приложение с стоить в тот чтобы записать достаточно простой функция стоимость име ть смысл временной затрата на выполнение приложение независимый от особенность задача минимизация который и давать бы распределение задача по процессор записать функция стоимость как сумма часть который минимизировать дисбаланс нагрузка процессор и межпроцессорный обмен 23 1 где являться часть функция стоимость который минимальный к гда каждый процессор иметь равный работа минимальный когда время обмен минимизировать и параметр выражать равновесие между этот два часть соответствующий составлять функция стоимость иметь следующий вид 2 где первый слагаемое соответствовать нагрузка а второе связь и сто имость обработка й часть программа на м процессор объём дать ных посылать от процессор к процессор при 0 процессор 36 не взаимодействовать мера стоимость связь процессор и при процессор не связать 1 если я часть обрабатываться м процессор константа зависеть от конкретный вс и характер задача если первый слагаемое в функция стоимость не вызывать особый за труднения для сеточный задача то второе слагаемое необходимо рассмота реть более подробно стоимость связь от процессор к зависеть от архитектура мультипроцессорный система конечно же необходимо учить тывать количество физический канал пересылка данные на каждый узел и возможность пересылка в разный направление для некоторый парало лельный система возможно записать этот показатель явно тогда надо учить тывать и то что коэффициент зависеть от программный обеспечение передача данные стоимость передача объём данные также в мно гом определяться стиль программирование например стоимость быть намного ниже если передавать как один сообщение обратить внимый ние и на то что что любой перекрытие между вычисление и связь в функция стоимость игнорироваться а это очень часто использоваться напереть мера в для сеточный задача актуальный являться и выбор сам мера оценка коммуникационный затрата формально можно представить простой физический интерпретация вы ражения 2 пусть каждый состояние отображать система приложа ния характеризоваться определённый значение функция стоимость ана лог функция энергия для нахождение глобальный минимум функция стоимость энергия моделироваться процесс медленный охлаждение от с стояние с высокий температура до замораживание система что озный чаять достижение конфигурация с минимальный средний энергия этот метод быть разработать метрополис 24 и доработать киркпатри кто 25 в вид аналогия термодинамический процесс нагревание и мёд ленный охлаждение материал для получение кристаллический структ ры начинать с случайно выбрать точка в пространство поиск делаться 37 шаг в случайный направление если этот шаг приводить в точка с более низкий уровень значение функция оптимизация то он приниматься если же он приводить в точка с больший значение функция оптимизация то он приниматься с вероятность функция сначала близкий к единица но затем постепенно уменьшаться до нуль по аналогия с охлаждение твёрдый тело такой образ в начало процесс моделирование принить ться любой ход но когда температура падать вероятность соверша ния негативный шаг уменьшаться негативный шаг иногда необходимый в тот случай когда нужно избежать локальный оптимум но принятие слишком многий негативный шаг мочь увести в сторона от глобально го оптимум использование моделировать отжиг для декомпозиция структура мно гогранник вороной мв рассмотреть на пример алгоритм модель руть нормальный рост зерно и использовать параллелизм по дать ным 23 в качество функция стоимость быть использовать функциональный за висимость время один от конфигурация разбиение структура многогранник параметр алгоритм и устройство вычислительный си стем согласно схема алгоритм моделирующий рост зерно если на м 1 2 процессор вычислительный система разместить узел диа грамм то за один м процессор произвести попытка изменение ориентация обозначить средний время затрачивать на один шаг один попытка м процессор как тогда вычислительный часть временной затрата на один составить для многопроцессорный си стем состоять из процессор различный производительность значение быть различный для поддержание единый конфигурация система процессор в вре мя работа необходимо обмениваться значение ориентация в граничный узел пусть число узел структура принадлежащий й подобла сти и находиться на граница с й подобласть 1 2 тогда за 38 один с го процессор на й процессор быть совершить в среднее передача значение изменить ориентация обозначить средний время затрачивать на один передача с го на й процессор как тогда часть временной затрата связать с обмен за один на м процессор составить 1 общий время затрачивать м процессор на вы полнение один равно сумма время затрачивать на вычисление и обмен значение параметр зависеть от структура системный связь многопроцессорный система и схема наложение на они программный ка налов изменение пользователь определённый значение матрица поза волять адаптировать критерий разбиение на пользовательский структура программный связь например увеличивать значение компонент матрица для который 2 можно уменьшить вероятность дальний диагональ ных передача или совсем они исключить обеспечивать тем самый структура программный канал тип кольцо учитывать необходимость синхронизация алгоритм после каждый функция стоимость весь алгоритм можно представить в вид 1 1 3 такой образ процессор ранее закончить выполнение шаг мк при синхронизация ожидать завершение выполнение тот же шаг самый за грузить процессор для определение параметр и быть провести замер затрата вре менить на вычисление и обмен а также вычислить значение и для структура распараллеленный метод рекурсивный координатный би секция для рассматривать алгоритм рост зерно быть получить сле дуть значение 0 00002 ек 12 0 000012 ек 0 178 ек для распараллеливание алгоритм моделировать отжиг быть исполь зован стратегия многократный независимый исполнение алгоритм мо делируть отжиг начинаться с определение температура близкий к температура кюри система для это каждый процессор формировать слу чайный распределение узел весь сетка по процессор затем на каждый процессор выполняться несколько попытка изменение распределение в 39 наш случай выполняться попытка то есть один при это раса сматриваться всё попытка и для каждый определяться абсолютный зна чение изменение функция стоимость далее находиться средний зна чение абсолютный изменение функция стоимость по весь провести попытка температура определяться исходить из предположение что в точка кюри вероятность принятие неблагоприятный изменение раса пределение близкий к 0 5 следовательно 0 5 получить такой образ температура приниматься в качество начальный если иса пользоваться случайный распределение далее использовать простой геометереть ческий распределение охлаждение 1 каждый процессор выполый нять одинаковый число шаг по температура при это на каждый такой шаг производиться достаточный для определение число попытка изменение распределение значение выбираться различный для каж дый процессор по получить значение строиться приблизить ный график зависимость от в случай использование задать исходный конфигурация распределение начальный температура находиться из получить графика исходить из значение функция стоимость для она основный фаза отжиг состоять в тот что каждый процессор выполнять собственный цепочка охлаждение система распределение на каждый ша ге температура выполняться определённый число шаг алгоритм и определяться абсолютный изменение стоимость произойти за этот пе риод исходить из графика зависимость от определяться новый значение температура 1 для 1 конечный температура охлаждение выбираться из тот соображение что вероятность принятие попытка переворот с минимальный положительный должный быть большой 0 5 то есть 0 5 минимальный значение определяться на весь этап работа алгоритм в качество конечный ре зультат выбираться конфигурация с минимальный значение функция стоимость благодаря почти полный отсутствие обмен между процес сор эффективность представить параллельный алгоритм выше 90 эффективность алгоритм увеличиваться с рост число процессо 40 ров при моделирование рост зерно на рассматривать структура данные моделировать отжиг не давать заметный преимущество 0 170 ек по сравнение с более простой координатный разделение который быть принять в качество первоначальный исходить из геометрия область куб для область сложный геометрия преимущество отжиг становиться оче видный другой возможный методика поиск оптимальный разделение область который основать скорее на биологический а не физический процесс с ставлять генетический алгоритм 26 конечно эволюция биологический система не единственный аналогия для получение новый метод раздел ния область нейронный сеть 27 например основать на моделирование поведение нейрон в мозг они мочь использовать также для задача разделение вычислительный нагрузка в мвс как показывать практический применение моделировать отжиг явля ться наиболее уязвимый из эвристический метод он более весь зависеть от выбрать параметр моделирование так быть большой весь остальной нуж даваться в дополнительный настройка тем не менее в отличие от другой ме тод использование моделировать отжиг для решение задача раздел ния сеточный структура позволять явно учитывать структурный устройство вс в тот число структура системный связь между процессор а также привязывать критерий декомпозиция к конкретный вид параллельный алгоритм недостаток метод являться то что затрата на выполнение алгоритм разделение часто соизмеримый с затрата сам приложение конечно возможный дополнительный постановка различный ограничение для 2 на память на однородность мвс на порядок выполнение и так далее однако зад ча в такой формулировка оставаться весьма сложный и с дополнительный упрощать предположение более подробно он применение и парало лельный реализация быть рассмотреть в последний раздел 3 2 метод балансировка для сеточный задача 41 для большинство задача вычислительный механика естественный объ ектами для балансировка нагрузка являться компонент вычислительный сетка конечный элемент или объём узел грань и ребро геометрич ский и топологический свойство сетка гарантировать что хороший раздел ние для они существовать расчётный сетка можно поставить в соответствие несколько вид гра фов наиболее употребительный являться граф узел и элемент для более точный балансировка нагрузка необходимо использовать комбиниро ванная граф как например граф связь элемент и узел разделение в сеточный задача можно определить в термин несколь ких критерий или метрика 28 29 балансирование нагрузка подобласть должный иметь почти равный число элемент или узел минимальный длина граница минимальный число общий грань или узел между подоба ласть минимальный связность подобласть минимальный число сосед они подобласть минимальный ширина лента матрица жёсткость при надлежащий каждый процессор и оптимальный обусловленность матрица подобласть локальный матрица должный быть хорошо обусловить в ряд случай топология и размер подобласть должный соответствовать возможность сеточный генератор в сеточный задача вычислительный нагрузка на процессор складыв ться из сумма нагрузка связанный с каждый объект сетка в мкэ это конечный элемент в метод конечный объём контрольный объём число ребро сетка представимый неструктурированный конечно элементный сетка как вз весить граф под вершина граф быть понимать центр элемена тов так быть строиться двойственный граф по отношение к конечно элементный сетка каждый конечный элемент вершина граф соответствовать свой вы числительный нагрузка ребро граф соединять два элемент соответ ствовать связь и определять коммуникационный нагрузка тогда процесс ба лансировка нагрузка можно представить как нахождение разделение гра 42 фа сетка с множество вершина 1 2 каждый из который связать ребро вершина и ребро граф мочь быть задать с вес что необходимо при рассмотрение раз деление сеточный модель в который нагрузка на элемент мочь быть не равномерный например для версия мкэ вес для вершина конечный элемент и соответственно вес для ребро соответствовать пример приложение при вести в последний параграф задача нахождение разделение граф с вес и на подобласть 1 2 заключаться в следующий 1 при 6 4 с учёт тот что 6 1 2 5 и число получать общий ребро или сумма вес весь ребро принадл жащий граница между подобласть должный быть минимально при 6 6 последний определять коммуникационный нагрузка на весь этап реш ния задача при использование узловой граф сетка такой мера являться сильно завысить разделение и распределение вычислительный нагрузка в адаптивный мкэ на основа поэлементный декомпозиция с использование дуальный граф сеточный модель записать в вид следующий алгоритм 43 алгоритм 1 разделение и перераспределение нагрузка в адаптивный мкэ 1 0 2 выполнять статический балансировка на основа разделение 3 4 1 определяться вычислительный нагрузка сеточный модель 5 2 для строиться дуальный граф 1 6 3 находиться величина разбалансированность 7 8 4 1 строиться новый разделение 1 1 1 1 9 4 2 перераспределяться вычислительный нагрузка в соответствие с новый разделение 1 1 1 1 10 здесь вычислительный затрата полагаться вес дуальный граф на ом шаг адаптация сеточный модель 1 в случай вычисление на гетерогенный кластер 30 в весы граф учитываться производительность процессор коммуник ционный затрата латентность и пропускной способность требовать объ есть оперативный память современный развитие гетерогенный вс сто ли гибридный система с графический ускоритель и теперь актуаля ным являться распределение вычислительный нагрузка между ядро цена тральный и графический процессор важный роль в это отводиться мно гоуровневый алгоритм разделение граф с выделение граф сеточ ной модель подобласть и матрица система уравнение например в метод дополнение шура 31 отметить что задача разделение 4 6 оставаться сложный поэтому при быть решение использоваться эвристический метод разделение граф 3 3 алгоритм разделение граф большинство алгоритм разделение граф мочь быть отнести к два основный класс геометрический и топологический рассмотреть некоторый из они основный характеристика метод первый класс то что они игнорировать информация связность граф сетка они основать на сортировка координата вершина граф и разделение они по декартов 44 полярный или инерционный ось граф 32 в большинство случай иса пользоваться рекурсивный разделение граф первоначально граф разбив ться на два часть по один ось минимизировать связь между часть далее рекурсивный делиться пополам каждый подграф вдоль другой ось у такой подход есть два преимущество в первый разделение каждый подобласть простой чем рассмотрение весь область в второй иметься естественный параллелизм к этот группа также можно отнести построение упорядочивание на основа восьмеричный дерево 33 кривая гильберт мортон и так далее 34 этот кривая связать с любопытный понятие теория функция а именно всюду плотный кривая алгоритм на они основа иметь время выполнение и качество разбиение сравнимый с простой геомета рический метод перечисленный алгоритм быстрый но более сложа ны в представление подобно геометрический алгоритм дать ме тода не использовать связность вершина сетка качество сгенерировать разделение обычно плохой чем в схема разделение основать на гра фах такой метод привлекательный по несколько причина возмож ность получение почти оптимальный разделение для регулярный сетка 1 здесь размерность пространство затрата на разделение намного маленький чем для алгоритм основать на граф главное преимущество создавать глобальный нумерация мочь упро стить некоторый аспект распараллеливание программа привлекательность алгоритм основать только на геометрический информация заключаться в они скорость и простота реализация кроме тот алгоритм являться инкрементальный недостаток это подход очевидный дополнительный информация о граф содержать смежный вершина или связность ребро использоваться в алгоритм другой группа при иссло дования различный свойство граф один из хороший метод разделение но требовать значительный вычислительный затрата основать на нахождь нии специфический собственный вектор разредить матрица иметь 45 структура матрица граф и использование он как разделитель 35 38 согласно метод вершина сортироваться в порядок определённый раз мер компонент собственный вектор или комбинация собственный век тор матрица лаплас граф данный подход зависеть от выбый ра собственный вектор фидлер м 35 показать что второй собственный вектор представлять хороший мера связность граф один из недостаток метод являться плохой параллелизуемость часто использовать алгоритм кернигана лина быть предложный в 39 для разделение граф для размещение сбис и стать основа большой группа метод разделение граф при задать начальный разделение для каждый вершина вычисляться увеличение число разрезать ребро при перемещение вершина из один подобласть в другой для больший граф качество получить разделение в многое быть зависеть от на чальный разделение метод основать на задать разделение 1 2 множество граф и улучшение он перестановка подмножество в 1 и 2 критерий выбор подмножество определяться функция выгода который определимый след ть образ для 1 2 1 где число сосед узел который принадлежать и для 2 1 1 тогда выгода получать при обмен узел вершина 1 на узел 2 равный 2 7 где определяться как 1 если 0 в противный случай на каждый внутренний итерация алгоритм перемещаться вершина гра фа иметь самый высокий увеличение множество разделитель вершина фиксироваться и модифицированный прибыль процедура повторяться до тот пора пока самый высокий увеличение не стать отрицательный так быть пока весь вершина не зафиксироваться каждый повторение алгоритм иметь сложность раз работано несколько усовершенствование первоначальный алгоритм 46 один такой алгоритм федуччи маттеуса 40 который уменьшать сложность до использовать соответствующий структура данные алгоритм немного отличаться от первоначальный алгоритм тем что на каждый шаг перемещать один узел из один часть в другой в то время как алгоритм выбирать пара узел по один в каждый разда лении и обмениваться они локальный алгоритм оптимизация с ограниченный возможность выход из локальный минимум и разрешение шаг с отрицательный приращение иметь временной затрата для каждый проход граф луч ше чем у моделировать отжиг при малый число разрезать ребро в настоящий время много внимание уделяться модификация существо ть графовый алгоритм разделение который выполняться в основное в три направление многоуровневый разделение гиперграфовой раздел ние комбинация алгоритм разный класс и параллельный выполнение алгоритм идея многоуровневый подход состоять в тот чтобы сформировать ин формация о связность исходный граф 0 множество более грубый гра фов 1 2 такой что 0 1 алгоритм основать на многоуровневый подход обычно иметь три этап первый огрубление граф в н м первоначальный граф сокращяться в набор последователь но более грубый граф этап непосредственно разделение где делиться грубый граф на часть стадия разогрубление и уточнение при который разделение грубый граф последовательно интерполироваться на более мел кий граф и модифицироваться разделение граф каждый уровень процесс продолжаться до получение разделение исходный граф многоуровень выя подход быть разработать в 41 для ускорение алгоритм рекурсивный спектральный деление и затем активно использоваться в комбинация с ала горитм тип 42 хотя многоуровневый подход приводить к значительный сокращение время вычисление для больший сетка возможно ещё один ограничение на память 47 известно что при использование узловой граф в предсталении раса чётный сетка коммуникационный затрата оцениваться приближённо в это случай нарушаться симметричность зависимость данные тогда це лесообразный использовать гиперграфовой представление для хороший ми нимизация коммуникация по сравнение с рассмотреть ранее графовый представление гиперграф являться обобщение неориентированный граф совокупность множество вершина 1 2 и множество гиперребро связь этот вершина гиперребро выражать ое отношение между вера шина в отличие от граф мочь быть более два другой слово ребро мочь быть инцидентный более чем два вершина ана логично мочь быть определить вес для каждый вершина гиперграф и гиперребро для расчётный сетка можно выделить несколько способ определение гиперграф 1 вершина гиперграф являться узел расчётный сетка гиперребро узел сетка связанный с дать вершина и сам верша на 2 вершина гиперграф ячейка сетка гиперребро ячейка сетка она окружающий в частность для параллельный перемножение разрядить матрица и вектор гиперграфовой разделение точно определять объём коммуник ционный затрата так при разделение матрица по строка в гиперграфовой модель за вершина приниматься столбцы матрица а гиперребро соответ ствуют строка матрица при разделение гиперграф должный выполняться тот же условие что и для обычный разделение граф 4 5 при это разделение гиперграф на подобласть 1 2 быть сбалансированный если 0 1 1 2 8 здесь 0 задать величина разбалан сировка гиперребро считаться считаться разрезать если оно связывать свя 48 зываета более чем один часть разделение 1 где число часть свя занный с на практика можно определить разный функция стоимость разделение гиперграф 1 9 где множество разрезать гиперебер первый функция разделение в 9 минимизировать сумма вес разрезать гиперребро второй число гиперребро принадлежащий несколько часть разделение задача нахождение гиперграфовый разделение заключаться в след ть найти разделение такой чтобы число разрезать гиперребро 9 быть минимальный при задать критерий разделение по вершина 8 гиперграфовой разделение показывать хороший результат по число раз резать гиперребро но часто являться значительно более затратный последовательный алгоритм гиперграфовый разделение реализовать в такой библиотека как 43 45 47 для параллельно выполнять при ложения иметь смысл чтобы разделение выполняться также параллель но алгоритм параллельный гиперграфовый разделение можно найти в 44 48 3 4 динамический балансировка и перераспределение на грузка любой из алгоритм разбиение граф рассмотреть выше мочь быть использовать для динамический балансировка однако цель стан дартный алгоритм разделение граф являться только получение мно жество разделитель для статический балансировка определяться только два принципиальный характеристика качество и время выполнение существенный отличие статический и динамический балансировка за ключаться в тот что в случай динамический балансировка после очереда ный разделение необходимо перераспределить нагрузка процессор что сам по себя нести существенный затрата в большинство случай перераспределение происходить после оценка раз 49 балансировка процесср и получение новый разделение однако в нёкий торое работа 46 предпренимаяться попытка прогноз разбалансировать ность приложение что позволять учитывать изменение в приложение при выполнение текущий этап балансировка так в задача с адаптивный перестроение сетка прогнозирование мочь быть основать на апостери орной оценка погрешность в тот и друг случай необходимость в приращение нагрузка добавль ет третий ключевой характеристика динамический балансировка нагруз ки этот проблема также многогранный и в многое определяться прить жение и он структура данные так при решение трёхмерный задача с адаптивный порядок аппроксимация версия мкэ объём данные свя занный с каждый элемент оказываться весьма большой в то время как для задача с адаптация треугольный сетка версия мкэ выгодный при новый разделение сетка построить заново структура данные элемент чем пересылать этот дать для приложение в который потребность ба лансировка возникать постоянно необходимо выбирать между затрата на модификация структура данные и они полный передача другой про цессора так быть минимизировать функция вид где число разрезать ребро определять по 6 общий стоимость перераса пределение данные между процессор мера стоимость связь в большинство задача требовать динамический балансировка нагруз ки алгоритм балансировка реализоваться непосредственно в приложение программно и необходимо связать структура данные приложение и ба лансировать нагрузка алгоритм успешный реализация динамический балансировка из приложение воз можный если программа балансировка нагрузка и приложение иметь про стоить пользовательский интерфейс алгоритм обеспечивать бн сам выполняться параллельно представляться маловероятный чтобы один алгоритм мочь соответствовать весь требование и применяться для боль нуть число приложение поэтому хороший программный обеспечение ди намичёска балансировка должный содержать набор программа с разный 50 алгоритм разделение для получение разделение высокий качество другой с минимальный пересылка и так далее технология реализовать такой обеспечение также мочь быть различный в некоторый случай эффективный мочь оказаться подход основать на использование мо дели клиент сие ве когда один выделить п оцессо уп авлять аботой остальной п оцессо ов в это случай реализоваться централизованный ди намический балансировка как правило же на практика реализоваться де централизованный балансировка и процессор работать каждый над свой задача метод в это случай распараллеливаться с помощь такой свойство как простота скорость и инкрементальность очень при влекательный для динамический балансировка алгоритм динамический балансировка должный удовлетворять кроме два рассмотреть ранее ещё дополнительный требование взаимодействовать с прикладной программа входной дать от при ложения содержать текущий распределение сетка параметр функция стоимость определять затрата на вычисление связь время вы полнения и так далее на выход получить разделение сетка и он связь с предыдущий разделение перемещать дать прикладной програм мы согласно новый разделение выполняться параллельно и не требовать много связь при это мож но допустить что качество разделение быть ниже чем у алгоритм выполнять статический балансировка нагрузка обеспечивать получение разделение который близко к предыдущий и минимизировать перемещение данные из старое в новый разделение данные необходимый запрос память для алгоритм балансировка минималя ны в противный случай возможный конфликт с приложение или ограничение объём приложение обеспечение определённый конфигурация межпроцессорный связь при получение новый разделение важно насколько измениться взай 51 мосвязь подобласть сетка по сравнение с старый разделение для алгоритм балансировка основать на геометрический информ ции о граф такой изменение достаточно легко отследить для другой алгоритм появляться дополнительный затрата на определение тот кой конфигурация в связь с это логика динамический балансировка нагрузка мочь реали зовываться в основное с помощь два подход каждый разделение вычисляться при рассмотрение новый глобальный задача разделение для весь граф или область использование в тот ких случай алгоритм статический балансировка привести к почти оптимальный разделение но стоимость перераспределение данные мочь быть очень высокий конечно возможный адаптация алгореть мов исходить из приложение возможность распараллеливание и так далее текущий разделение модифицироваться перемещение часть данные к соседний процессор инкрементальный подход основать на локаля ных и распределённый решение если нагрузка на процессор дост точно стабильный то такой локальный процедура позволять получать новый разделение не сильно отличаться от первоначальный раз деление в тот случай если наблюдаться неустойчивость нагрузка локальный процедура перемещение данные потребовать большой число приближение и дополнительный обмен для получение оптимальный разделение на практика конечно более выгодно объединение оба подход при использование условие переход от один подход к другой в зависеть мостить от приложение необходимо понимать что реализация стратегия динамический бн обходиться далеко небесплатно и беспокоиться о стоить сти каждый приём выравнивание нагрузка для подтверждение тот что преимущество производительность и масштабируемость обеспечивать динамический балансировка нагрузка не перекрыться дополнительный затрата и здесь возникать вопрос иметь ли смысл допускать некото 52 рую несбалансированность нагрузка если это уменьшать коммуникацион ные затрата конечно ответить на этот вопрос достаточно сложно можно только показать для конкретный мвс и определённый задача или прить жения к сожаление развитие программный обеспечение для динамический балансировка значительно уступать обеспечение для статический баланси ровка можно назвать порядок 20 пакет для статический балансировка и лишь четыре библиотека метод динамический балансировка каждый из они иметь свой структура данные а в послед они два иметься интерфейс для и в весь этот библиотека содержаться примерно один и тот же набор ме тод но параллельный выполнение существенно отличаться относительно выходной данные можно отметить наличие в функция отображение получить разделение на процессор тогда как в вычисляться только новый разделение и пользователь сам должный выполнять отображ ние равнение метод балансировка на уровень приложение на пример биб лиотечь и быть рассмотреть в следующий параграф 4 сравнение метод балансировка нагрузка эффективность выполнение программа всегда являться очень важный фактор определять в значительный степень успех и распространение тот или иной промежуточный программный обеспечение динамический балансировка предполагать выполнение два шаг вы числение новый разделение или уточнение существующий разделение сетка и перераспределение подобласть сетка особенность динамический балансировка вычислительный нагрузка состоять в тот что она выполнить ться над распределённый по процессор данные рассмотреть сравнение ряд алгоритм динамический балансировка из библиотека 51 48 и 49 50 53 алгоритм реализовать в библиотека использовать в ос новен многоуровневый графовой разделение для сравнение из библио тека быть выбрать алгоритм основать на геометрический ин формация рекурсивный координатный и инерциальный бисекция кривая заполнять пространство алгоритм рекурсивный спектральный бисек ции быть выбрать из библиотека всё алгоритм за исключение последний выполняться параллельно при вызов из пользовательский приложение в качество тестовый рассматриваться задача адаптивный перестроение сетка 52 на основа апостериорный погрешность для цилиндр деформить руть под действие давление на он внутренний поверхность сравнение алгоритм динамический балансировка нагрузка при раса смотрение дать задача проводиться по три параметр дисбаланс вычислительный нагрузка число разрезать ребро и число пересыл ть конечный элемент первый два параметр характеризовать качество разделение сетка дисбаланс отвечать за равномерность вычислительный нагрузка в время вычисление а число общий ребро определять объём межпроцессорный обмен от третий параметр зависеть время выполый нения перераспределение сетка из результат сравнение отметить что 100 600 1100 1600 2100 2600 3100 3600 0 100000 200000 300000 400000 0 2000 4000 6000 8000 10000 12000 14000 0 2000 4000 6000 8000 10000 12000 рис 1 число разрезать ребро рис 2 разбалансировка геометрический алгоритм ост создавать разделение сетка с больший в 1 5 2 раз число разрезать ребро чем алгоритм основать на графовый представление рис 1 другой алгоритм основать также на геометрический информация о 54 0 5000 10000 15000 20000 25000 30000 35000 0 50000 100000 150000 200000 250000 300000 0 1 2 3 4 5 6 7 рис 3 число пересылать кэ по шаг перестроение сетка рис 4 время выполнение один шаг сетка такой как координатный и инерциальный бисекция показать результат близкий к тем что получать графовыя алгоритм несколько алгоритм показать близкий результат перечислимый они в по рядок увеличение число разрезать ребро рекурсивный спечь тральный бисекция многоуровневый графовый бисек ция с переотображение многоуровневый графовый бисекция с локальный диффузия по второй критерий наименьшой дисбалан су нагрузка рис 2 алгоритм использовать кривая заполнять пространство показать хороший результат разбалансировка составить один конечный элемент анализ характеристика разделение сетка и за трата на отображение позволять в дальнейший выполнять динамический балансировка нагрузка с учёт особенность задача и вычислительный система по результат сравнение в качество основный алгоритм для динамический балансировка быть выбрать алгоритм локальный диффузия при балансировка с использование алгоритм локальный диффузия некоторый подобласть сетка разрываться отметить также что тополый гия связь подобласть принадлежащий разный процессор для метод измениться незначительно от начальный разделение в отличие от другой метод для вычислительный система определённый архитект ры физический связь и реализовать на они алгоритм декомпозиция задать связность подобласть иметь принципиальный значение среди рассмотреть алгоритм балансировка можно выделить меть 55 ды и др при применение который получить лось приблизительно одинаковый общий время выполнение приложение но принадлежащий к разный группа рис 4 метод иметь разный харак теристик разделение и затрата на отображение анализ они позволять бо лей рационально проводить динамический балансировка с учёт особенный ность задача и вычислительный система рис 2 характеризовать качество разделение на каждый шаг перестроение больший разбалансировать ность получиться при использование метод а малый дисбаланс один конечный элемент при идеальный загрузка процес сор 1 а качество балансировка определимый например использовать один из мера 1 2 10 здесь 1 0 а 2 0 затрата на отображение перестроить сетка и он новый разделение оцениваться по число пересылать кэ рис 3 группа метод прежде весь основать на геометрический информация о сетка на каждый шаг перестроение сетка получать новый разделение без учёт старое рис 4 поэтому всё сеточный дать приходиться пересылать согласно текущий му разделение сетка если с сетка связать больший объём данные то перераспредение мочь увеличить накладный расход адаптивный перо строение время адаптивный алгоритм включать в себя формирование и решение основной и вспомогательный система уравнение по оценка по грешность время перестроение сетка а также балансировка нагрузка вы числение новый разделение и отображение сетка основной вклад в вре менный затрата вносить решение система эффективность параллельный адаптивный решение задача в целое составить 63 малый сума марный затрата оказаться при применение простейшее геометрическо го алгоритм и разделение основать на приращение вычислительный нагрузка затрата на отображение новый разделение на процессор показать на рис 4 отметить что для алгоритм 56 они практически отсутствовать такой образ для задача с адаптивный перестроение сетка выполый нение динамический балансировка являться важный этап и определять успех решение весь задача метод динамический балансировка основать ный на локальный диффузия нагрузка являться оптимальный при условие выбор хороший начальный разделение например получить использование для динамический балансировка нагрузка алгоритм осный ванный только на геометрический информация также дост точно эффективно для рассмотреть геометрия задача безусловно применимость тот или иной подход к балансировка на грузка зависеть прежде весь от класс решать задача конкретный ала горитм метод декомпозиция матричный векторный операция а также от реализация сам параллельный пользовательский приложение на эф фективность который оказывать влияние опыт разработчик такой образ при рассмотрение и сравнение существующий стратегия балансировка необходимо тщательно проанализировать всё преимущество и недостаток выбрать вариант балансировка нагрузка учесть что бо лей простой подход давать хороший результат выбрать тот модель и ме тод балансировка нагрузка который большой весь подходить к конкретный приложение стараться реализовывать новый алгоритм в вид отдельный программный модуль или продукт с удобный интерфейс для тот по с который предполагаться использовать пользовательский приложение работа выполнить при поддержка рффи проект 13 01 00101 а 11 01 00275 а список литература 1 с 1989 101 112 2 рычковы в н краснопёров и в копысова п промежуточный про граммной обеспечение для высокопроизводительный вычисление 57 вычислительный метод и программирование 2001 2 2 109 124 3 1995 8 2 171 216 4 2 1999 196 202 5 1995 6 2000 1971 203 213 7 2001 2131 174 8 1994 797 273 277 9 1996 526 531 10 ластовецкий а л калиновый а я ледовский и н арапов далее м по сыпкина н а язык и система программирование для высокопроизво дительный параллельный вычисление на неоднородный сеть про граммирование 2000 4 с 55 80 58 11 9 2000 298 299 12 1997 11 2 115 128 13 1997 40 1 39 45 14 слама далее гарбис далее рассесть п корпоративный система на основа м издательский дом вильямс 2000 368 с 15 1998 9 11 1104 1112 16 2001 2074 108 117 17 11 97 1997 153 163 18 7 99 1999 19 2002 18 8 1127 1142 59 20 1996 175 213 21 аветисян а и арапов и в гайсарян с с падарян в а парало лельной программирование с распределение по данные в система вычислительный метод и программирование 2001 так 2 88 108 22 коновалов н а крюков в а михайлов с н погребец а а язык разработка мобильный параллельный программа про граммирование 1995 1 49 54 23 альеса м ю копысова с п варнавский а и моделирование струка тур материал многранник вороной применение математиче ский моделирование для решение задача в наука и техника ижевск изд в ипм уро ран 1996 32 43 24 1953 21 1087 1092 25 1983 220 671 680 26 1989 27 осовский с нейронный сеть для обработка информация м фи нанс и статистика 2002 344 с 28 копысова с п новиков а к параллельный алгоритм адаптивный перестроение и разделение неструктурированный сетка матема мо делирование 2002 так 14 9 с 91 96 29 копысова с п динамический балансировка нагрузка для параллель ный распределённый мдо метод и средство обработка инфора мации под ред л н королева мгу 2003 с 222 227 60 30 2007 45 53 31 копысова с п кузьмин и м недожогин н с новиков а к па раллельный алгоритм формирование и решение система дополнение шура на графический ускоритель учёный записка казанский уна тот серия физико матема наука 2012 так 154 кн 3 с 202 215 32 94 13 1994 33 препарат ф шеймос м вычислительный геометрия введение м мир 1989 478 с 34 александров п с введение в общий теория множество и функция м гостехиздат 1948 35 1975 25 619 633 36 четверушкин б н высокопроизводительный многопроцессорный вы числительное система вестник ран 2002 так 72 9 с 786 794 37 четверушкин б н кинетический схема и квазигазодинамический си стем уравнение м макс пресс 2004 332 с 38 корнилина м а якобовский м в динамический балансировка загрузнуть ки процессор при моделирование задача горение мать алы всероссийский научный конференция высокопроизводительный вычисление и они приложение черноголовка 2000 москва мгу 2000 с 34 38 61 39 1970 29 2 291 307 40 19 1982 175 181 41 93 0074 1993 42 1998 48 96 129 43 3 0 06533 1999 44 2 0 19 2004 45 2005 47 1 67 95 46 андриан а н березин а в воронцов а с ефимкин к н мара ковы м б моделирование электоромагнитный поле радиационный происхождение на многопроцессорный вычислительный система препринт ипм ран 74 москва 2006 20 47 2000 11 3 285 300 48 62 99 1377 1999 49 2 0 94 2692 1994 50 1 2 9 1998 51 2 0 1998 52 копысова с п новиков а к метод декомпозиция для параллельный адаптивный конечно элементный алгоритм вестник удмуртский уна тот математик механика компить наука 2010 3 с 141 154 63