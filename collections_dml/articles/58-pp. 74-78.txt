 «ЛОБАЧЕВСКИЕ ЧТЕНИЯ - 2019»  то есть для этого x функция cantor не определена. Соответственно в данной теории теорема Кантора не работает, отметим, что аналогичная ситуация наблюдается для вычислимых действительных чисел. И появляется существенное отличие от классической теории множеств в том, что все множества оказываются не более, чем счетными.  Выводы:  Нами предложен вариант построения теории множеств с использованием частичных функций принадлежности, который позволяет определить действительные числа аналогично классической теории множеств. Существенным отличием данной теории от классической оказывается счетность всех множеств и, соответственно, всех действительных чисел. В нашей теории существует только те действительные числа, которым можно дать определение, это множество будет содержать в себе как подмножество множество всех вычислимых чисел Comput abl e ⊂ De f i nabl e , при этом оба эти множества будут счетными. Развитие данной теории и соотнесение выводов с реальностью будет предметом дальнейших исследований.  Литература  1. Robert Andre, Axioms and Set Theory. (2014). 444 c, ISBN 978-0-9938485-0-6.  2. A. M. Turing, On computable numbers, with an application to the Entscheidungsproblem, Proceedings of the London Mathematical Society. Second Series, vol. 42 (1936), pp. 230–265.  ON COUNTABILITY OF REAL NUMBERS  A.I. Denisov, A.D. Shevchenko  In the classical set theory real numbers are uncountable. There is a countable subset of real numbers which corresponds to computable numbers. In practice there is only computable numbers and numbers which correspond to some definition, therefore we consider the question of formulating a non-classical set theory, in which there is no undefinable real numbers. Such real numbers will be countable. Keywords: set theory, countability, real numbers  УДК 004.75  ПРОГРАММНЫЙ КОМПЛЕКС ДЛЯ РАСПРЕДЕЛЕННОГО ВЫПОЛНЕНИЯ ИНЖЕНЕРНЫХ И МАТЕМАТИЧЕСКИХ ЗАДАЧ  А.С. Долгополов1  1 dolgopolov.work@gmail.com; Казанский (Приволжский) федеральный университет  В данной статье обсуждаются особенности реализации распределенной мультипроцессорной системы для ускорения выполнения математических, аналитических и инженерных задач. Отдельно выделены проблемы отказоустойчивости и безопасности. Описываемая система может быть использована как в научных, так и в коммерческих целях. Система полностью реализована и готова к технической эксплуатации.    А.С. Долгополов 75  Ключевые слова: распределенные системы, инженерные задачи, отказоустойчивость, безопасность  Каждый инженер рано или поздно встречается с проблемой производительности разработанного программного обеспечения. Иногда проблема решается путем подбора более эффективных алгоритмов, но каждая программа имеет определенные пределы оптимизации. К счастью, проблему производительности можно решить при помощи горизонтального масштабирования, наращивая количество объединенных одной сетью вычислительных устройств. На данный момент существует множество поставщиков облачных услуг, которые могут предоставить кластер любой мощности и сложности. Аренда вычислительных устройств в действительности обходится намного дешевле покупки дорогостоящего оборудования, но, так или иначе, это стоит денег, пусть и небольших. Гораздо дешевле организовать вычислительную сеть в домашних условиях или в компьютерной аудитории, однако не каждому инженеру хватит терпения, навыков и времени, чтобы построить производительную, стабильную и безопасную распределенную систему, в связи с чем предлагается рассмотреть разработанную автором статьи систему, которая позволяет построить легко масштабируемую вычислительную сеть, функции которой могут быть определены непосредственно самим инженером.  Разработанная система основана на архитектуре «ведущий-ведомый», где ведущий (далее мастер-сервер) и ведомый (далее слэйв-сервер) представляют собой полноценные вычислительные устройства со своей памятью, системой вводавывода и процессором. Сеть организована таким образом, что мастер-сервер подключен ко множеству слэйв-серверов, которые, в свою очередь, занимаются вычислениями.  Принцип выполнения задач в разработанной распределенной системе относительно прост:  1. Задача поступает мастер-серверу, а после чего разбивается на подзадачи, которые равномерно распределяются среди слэйв-серверов  2. Слэйв-сервера выполняют поставленную подзадачу и передают по сети промежуточный результат обратно мастер-серверу  3. Мастер-сервер дожидается всех промежуточных результатов и формирует конечный результат  Описываемая вычислительная сеть имеет множество применений. Например, система может быть использована как средство ускорения инженерных вычислений, как платформа для организации майнинг пула [1] в сети Биткоин или же быть задействована в создании платформы для добровольных вычислений.  Характерной чертой разработанной системы является возможность прозрачной масштабируемости. Система была заложена с мыслью о том, что участники сети могут подключаться и отключаться от системы в любой момент времени таким образом, чтобы это не повлияло на общий ход процесса выполнения вычислительных задач.  На данный момент система была протестирована на задачах из области теории чисел и абстрактной алгебры. Однако пользователям системы предоставляется возможность разработать свою реализацию задачи, которая будет выполнена системой    76 «ЛОБАЧЕВСКИЕ ЧТЕНИЯ - 2019»  распределенно на множестве компьютеров слэйв-серверов. Для этого необходимо определить логику задачи при помощи программного кода на языке программирования Java и распространить jar архив в вычислительной сети.  Стоит признаться, что разработка распределенной системы – это технически сложная задача. Так как система состоит из множества компьютеров, которые обмениваются данными по сети, следует учесть множество факторов, чтобы построить хорошо функционирующую распределенную систему. Участники сети могут выйти из строя в любой момент времени, сеть может иметь плохую пропускную способность или вовсе быть ненадежной.  На первый взгляд, проблема стабильности не является столь актуальной. К сожалению, эта точка зрения обманчива, так как выход из строя любого участника сети без должной обработки может привести к ошибочному поведению системы. Допустим, перед Вами стоит задача сложить пару векторов из n-мерного пространства, имея в распоряжении m слэйв-серверов. Очевидным решением будет разделить пару наm пар векторов длиной n/m, передать полученные векторы всем слэйвсерверам, сложить малые пары векторов параллельно и сформировать конечный результат. Но что произойдет с системой, если во время выполнения сложения векторов один из слэйв-серверов отключится от вычислительной сети? Стоит ли передать пользователю системы ошибку исполнения или же возвратить неполный результат сложения? Ни один из озвученных вариантов не является желанным. В связи с этим стоит обратить особое внимание на проблему стабильности и отказоустойчивости в вычислительной сети.  Как уже отмечалось ранее, мастер-сервер имеет в своем распоряжении множество слэйв-серверов. Любой из слэйв-серверов, как впрочем и мастер-сервер, может перестать функционировать по многим непредвиденным причинам. Однако выход из строя любого участника сети не должен приводить к полной потере работоспособности, в связи с чем в системе был предусмотрен механизм перераспределения задач. Если слэйв-сервер перестал функционировать, то все задачи, которые не были выполнены слэйв-сервером на момент выхода из строя, будут перераспределены среди тех слэйв-серверов, что продолжают работать в штатном режиме. Такое решение позволяет скрывать внутренние поломки от пользователей системы, пусть и ценой временной общей деградации вычислительной сети.  Стоит подчеркнуть, что выход из строя одного-единственного мастер-сервера полностью лишает систему любой работоспособности. Проблема единой точки отказа может быть решена при помощи репликации мастер-серверов. Системой заложена подобная функциональность, как и разрешена проблема балансировки нагрузки и перераспределения задач в случае выхода из строя основного мастерсервера. Балансировка нагрузки и перераспределение задач на уровне мастерсервера разрешается при помощи введения дополнительного слоя промежуточного программного обеспечения. Клиент системы не отправляет запрос на выполнение задачи мастер-серверу напрямую, но пересылает запрос промежуточному программному обеспечению, которое сохраняет запрос в очереди задач. Мастер-сервер прочитает входящую задачу из очереди и приступит к выполнению. Стоит отметить, что мастер-сервер и промежуточное обеспечение работают отдельно друг от друга. Таким образом мастер-серверу необязательно функционировать на момент    А.С. Долгополов 77  отправки задачи, так как она будет выполнена сразу, как только мастер-сервер прочитает входящую задачу из очереди задач. Если мастер-сервер не сможет выполнить задачу по какой-либо причине, сообщение с задачей попадет обратно в очередь задач, после чего будет прочитана и обработана другим мастер-сервером. Все сообщения из очереди задач читаются по принципу «round robin», что позволяет равномерно распределить вычислительную нагрузку на всех участников сети.  Вторая важная проблема, с которой приходится сталкиваться во время разработки распределенной системы – это проблема безопасности. Стоит отметить как минимум две особенности системы, на которые следует обратить особое внимание: работа в открытой сети и возможность расширять компоненты системы.  Для начала предлагается рассмотреть проблемы безопасности, которые возникают во время работы в открытой сети. Как уже упоминалось ранее, мастер-сервер имеет определенную привилегию, которая позволяет нагрузить слэйв-сервера вычислительными задачами. Выполнение задачи требует выделения значительных вычислительных ресурсов. Если мастер-сервер неравномерно распределяет нагрузку или «перенагружает» систему нескончаемым потоком задач, то некоторые участники вычислительной сети могут выйти из строя, что может привести к полной потере работоспособности системы. В связи с чем каждое сообщение в сети дополняется цифровой подписью при помощи RSA [2] в связке с SHA-256 [3]. Такой подход позволяет защитить систему от подмены запроса и также предоставляет возможность однозначно идентифицировать инициатора запроса и ответа.  Немаловажная проблема, которую следует обсудить в деталях – это проблема расширяемости. Система изначально разрабатывалась как потенциально дополняемая, подразумевая, что администратор системы имеет возможность как воспользоваться существующими компонентами, так и дополнить систему своим программным кодом. Подобная гибкость вносит в том числе и угрозу распространения вредоносного кода. На первый взгляд, подобная проблема не имеет решения, так как отследить поведение пользовательского кода – это достаточно сложная или почти невыполнимая задача. К счастью, проблема разрешается при помощи изолирования окружения: изолирование файловой системы, сети и пространства пользователей. Аналогичной обособленности можно легко достичь при помощи виртуализации. К сожалению, запуск компонентов вычислительной системы в отдельной виртуальной машине является достаточно ресурсоемкой стратегией, однако подобное изолирование так же можно достичь при помощи контейнеризации [4], что является менее требовательным к ресурсам компьютера решением. Мастер и слэйв-сервер запускаются в отдельных «контейнерах», что значительно ограничивает допустимый вред от пользовательского кода. Запуская систему в контейнерах, вредоносный код не может получить доступ к ресурсам хост-машины, передать данные по сети или прочитать конфиденциальную информацию из файловой системы.  Суммируя все описанные техники, в конечном итоге получилась распределенная вычислительная система, которая может быть использована для проведения инженерных или математических расчетов. Важным преимуществом системы является высокая отказоустойчивость, что позволяет проводить массовые вычисления, задействовав множество удаленных друг от друга компьютеров, соединенных    78 «ЛОБАЧЕВСКИЕ ЧТЕНИЯ - 2019»  между собой при помощи сети Интернет. Другой отличительной чертой сети является возможность расширения существующего функционала, что позволяет инженерам и программистам разрабатывать свои программы для распределенного выполнения в вычислительной сети. Несмотря на все особенности сетевого взаимодействия и специфики описываемого программного обеспечения, система является безопасной для эксплуатации и требует малый объем вычислительных ресурсов.  На данный момент в системе реализованы все основные функции, которые были запланированы на этапе проектирования. Исходный программный код находится в открытом доступе, в то время как сама система поставляется в виде образов, которые периодически загружаются в публичное хранилище образов Docker Hub. Любой заинтересованный человек может запустить контейнеры с системой и начать работу без установки дополнительного программного обеспечения.  Литература  1. Narayanan A., Bonneau J., Felten E. Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction – Princeton: Princeton University Press, 2016. – 336 c.  2. Yan S. Cryptanalytic Attacks on RSA – Berlin: Springer, 2008. – 255 c.  3. Hoffstein J., Pipher J., Silverman J. An Introduction to Mathematical Cryptography – Berlin: Springer, 2014. – 538 c.  4. Nickoloff J., Kuenzli S. Docker in Action – New-York: Manning Publications, 2019. – 350 c.  THE DISTRIBUTED SYSTEM FOR HIGH-SPEED MATHEMATICAL COMPUTATIONS  A.S. Dolgopolov  This paper briefly describes the distributed system intended for high-speed mathematical computations. The main goal of the project is to make it simple to utilize computer resources. The node project may be used in non-profit fields like scientific volunteer computations, or Bitcoin mining. The system is easy to use and simple to extend, so engineers or mathematicians with decent programming skills can develop their own distributed tasks with no pain. The project is entirely open-source and contribution friendly. Keywords: distributed systems, high-speed computations, security, open-source, development  УДК 004.9  РЕАЛИЗАЦИЯ ПЕРСЕПТРОНА С ТРЕМЯ СКРЫТЫМИ СЛОЯМИ ДЛЯ КЛАССИФИКАЦИИ ЧИСЛОВЫХ ДАННЫХ СОЦИАЛЬНОЙ СЕТИ  С.К. Еникеева1, Г.З. Вахитов2  1 s.enikeeva1@mail.ru; Казанский (Приволжский) федеральный университет, Высшая школа ИТИС 2 gzvahitov@kpfu.ru; Казанский (Приволжский) федеральный университет, Институт вычислительной математики и информационных технологий  В статье обсуждается применение нейросетевых технологий в задаче классификации числовых данных профиля пользователей социальной сети. Изучение числовых метрик пользователя показало, что построение классификатора является трудно формализуемой задачей, так как тенденции в данных прослеживаются весьма слабо. Тем не   