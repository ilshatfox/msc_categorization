joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system farooq hoseiny department of computer engineering and it university of kurdistan iran sadoon azizi department of computer engineering and it university of kurdistan iran mohammad shojafar ics 5 gic university of surrey united kingdom rahim tafazolli ics 5 gic university of surrey united kingdom volunteer computing is an internet based distributed computing system in which volunteers share their extra available resources to manage large scale tasks however computing devices in a volunteer computing system vcs are highly dynamic and heterogeneous in terms of their processing power monetary cost and data transferring latency to ensure both the high quality of service qos and low cost for different requests all of the available computing resources must be used efficiently task scheduling is an np hard problem that is considered one of the main critical challenges in a heterogeneous vcs due to this in this paper we design two task scheduling algorithms for vcss named min ccv and min v the main goal of the proposed algorithms is jointly minimizing the computation communication and delay violation cost for the internet of things iot requests our extensive simulation results show that proposed algorithms are able to allocate tasks to volunteer fog cloud resources more efficiently than the state of the art specifically our algorithms improve the deadline satisfaction task rates by around 99 5 and decrease the total cost between 15 to 53 in comparison with the genetic based algorithm ccs concepts networks cloud computing mathematics of computing mathematical software performance additional key words and phrases volunteer computing fog computing cloud computing task scheduling quality of service qos cost efficient acm reference format farooq hoseiny sadoon azizi mohammad shojafar and rahim tafazolli 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system acm trans internet technol 1 1 article 1 april 2021 21 pages https doi org 10 1145 3418501 1 introduction a volunteer computing system vcs is an opportunistic model that uses the extra available resources of volunteer devices to provide cheaper and greener infrastructures and services 2 11 19 these devices are characterized by their dynamic distributed and heterogeneous nature where through the use of them many complex problems can be managed volunteer devices can be deployed in a fog or a cloud environment where we call them fog nodes fns or cloud node cns respectively although fns usually provide significant benefits in terms of response this is the corresponding author all authors contributed equally to this research authors addresses farooq hoseiny department of computer engineering and it university of kurdistan sanandaj iran farooq hoseiny eng uok ac ir sadoon azizi department of computer engineering and it university of kurdistan sanandaj iran s azizi uok ac ir mohammad shojafar ics 5 gic university of surrey 1 th rv ld circle guildford united kingdom m shojafar surrey ac uk rahim tafazolli ics 5 gic university of surrey 1 th rv ld circle guildford united kingdom r tafazolli surrey ac uk permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page copyrights for components of this work owned by others than acm must be honored abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission and or a fee request permissions from permissions acm org 2021 association for computing machinery 1533 5399 2021 4 art 1 15 00 https doi org 10 1145 3418501 acm trans internet technol vol 1 no 1 article 1 publication date april 2021 ar x iv 2 10 4 13 97 4 v 1 cs d c 2 8 a pr 2 02 1 https doi org 10 1145 3418501 https doi org 10 1145 3418501 1 2 azizi and shojafar et al time and cost they suffer from limited computing resources as cns offers more powerful resources using the cns along with the fns provides a promising computing environment for efficient management of complex applications the manifestation of the connection of devices like sensors actuators mobile smartphones and home work appliances has led to many internet of things iot applications many of these applications such as connected and autonomous cars augmented reality industrial robotics video surveillance and real time manufacturing give rise to the need for low response time 7 24 other applications such as big data analysis and machine learning are latency tolerance most of iot applications are composed of a series of independent tasks also called bag of tasks bots with different input parameters 25 the process of allocating available volunteer resources to a set of tasks is called task scheduling which is a critical challenge in the volunteer fog cloud environment 1 1 motivation the problem of scheduling tasks in volunteer fog cloud computing systems significantly affects the quality of service qos and the monetary cost 32 in the real world there are many latency sensitive and latency tolerant iot applications with different requirements this increases the complexity of scheduling and managing of them therefore we require to present an efficient solution for task scheduling in this environment 31 in the literature several solutions has been proposed for solving task scheduling problem in fog cloud domains 1 3 5 6 12 14 17 18 23 26 27 29 30 34 which have some limitations as follows a vast majority of them do not take into account the priority of tasks and assume the same priority for iot tasks 5 10 12 25 34 most of the proposed approaches ignore the violation cost of the system in their problem formulation except for a few of them 28 31 in this work we consider the priority of tasks based on their deadlines violation cost and network latency for scheduling them in fog cloud computing to link the gaps to the contribution of the paper some questions arise i is it possible to present an efficient algorithm impose some scheduling policies to mitigate the cost and qos of volunteer requests in fog cloud environments ii can we assure that the proposed methods could bring high qos for real time tasks in fog cloud environments compared to the literature and iii how can the collaboration of fog cloud affect the qos and monetary cost of volunteer requests 1 2 goal and contribution in this study we propose two efficient heuristic scheduling algorithms for a batch of tasks called min ccv minimize computation communication and violation costs and min v minimize violation cost that provide high qos for iot requests and low resources cost in a vcs the main goal of min ccv is minimizing the computation communication and violation cost of the system however min v aims to minimize the violation cost of the systems as far as possible both of the proposed algorithms aim to provide high qos in terms of the percentage of deadline satisfying tasks and low cost in terms of computation and communication aspects in summary the main contributions of the present research are as follows we formulate the task scheduling problem considering volunteer requests in fog cloud computing as a mixed integer linear programming milp with the purposes of mutual supporting qos for iot tasks and low computation and communication cost for the fog cloud system to solve the above problem we propose two efficient heuristic algorithms the first one focuses on the minimiza tion of computation communication and violation costs while the second one is appropriate for the minimization of the deadline violation cost to evaluate the efficiency of the proposed algorithms in terms of qos makespan and total cost we conduct extensive experiments and compare it against the state of the art and confirm the effectiveness of our scheduling algorithms for iot tasks in volunteer computing systems acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 3 1 3 organization the rest of the paper can be outlined as follows in section 2 we delineate the related works in section 3 we sketch the framework of the fog cloud environment and formulate the task scheduling problem as a milp we present two heuristic algorithms which are presented in section 4 section 5 describes the presented scenarios testing methods used to comparisons and describe the simulation results section 6 gives some discussions and limitations regarding the proposed policies finally in section 7 we summarize the achievements and concludes the paper 2 related work in this section we explain the existing task scheduling algorithms applied in the volunteer fog and cloud systems most of the static task scheduling approaches are divided into two categories heuristic based and metaheuristic based algorithms in the rest of the section we briefly review some various algorithms the algorithms studied here have all been tested in heterogeneous volunteer systems the heterogeneous volunteer system consists of nodes with different computations and communication attributes that can be consist of both layer fog and cloud layers 2 1 heuristic based fog algorithms heuristic methods are trying to return a suitable solution in the shortest possible time to reduce delay in the fog cloud environment pham et al 26 propose a cost and makespan aware workflow scheduling algorithm in the fog cloud computing system the algorithm has three phases task prioritizing phase which specifies the priority level of each task node selection phase in which the most suitable node for executing each task is selected and task reassignment phase to improve the qos of the system liu et al 20 introduce an improved classification mining algorithm based on association rules and combine it with the task scheduling process in fog computing the main objective of this study is reducing the execution time and the average waiting time of the scheduled tasks choudhari et al 9 propose a priority aware task scheduling algorithm to provide low response time for client requests upon receiving an incoming client request the nearest fog server manager determines its priority level and checks whether its fog nodes can handle it or not if so the request is processed and the output is passed to the client otherwise if its required resources can be satisfied by the other fog servers it is sent to the one or more of them in the case of insufficient resources in the fog domain the request is moved to the cloud to minimize service delay in a heterogeneous fog environment liu et al 21 propose a dispersive stable task scheduling algorithm the algorithm consists of two major phases in the first phase i e the computing resources competition initially the processing efficiency of computing nodes is calculated and then a pairwise stable matching between task nodes and computing nodes is obtained in the second phase i e tasks assignment the synchronized task scheduling algorithm is called to the optimal decision making process auluck et al 3 introduce two heuristic algorithms for real time task scheduling generated by autonomous cars in their study the authors consider an embedded fog cloud framework and three types of tasks consist of hard firm and soft ones their proposed algorithms assign the application tasks to the most appropriate processors ensuring that the overall communication delay is minimized in 34 zhang et al investigate the task scheduling problem in the voluntary mode fog networks they construct a general analytical model for the problem and propose a delay optimal task scheduling algorithm to reduce the overall task processing delay stavrinides and karatza 27 present a heuristic approach to scheduling multiple real time workflows in fog and cloud systems in this work the fog nodes are responsible for executing the communication intensive tasks with low computation requirements while computation intensive tasks with low communication demands are submitted to the cloud nodes moreover during the scheduling process tasks are prioritized according to the deadline of their job then each task is assigned to the vm that provides the earliest estimated finish time benblidia et al in 5 propose a fuzzy logic approach for acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 4 azizi and shojafar et al scheduling tasks in fog cloud computing the authors rank fog nodes according to both user preferences and the features of fog nodes table 1 comparison of related works bot bag of tasks cps cyber physical system reference system model application resource response deadline runtime suggested for type cost time aware heuristic pham et al 26 fog cloud workflow low generic liu et al 20 fog bot moderate generic choudhari et al 9 fog cloud bot low generic liu et al 21 fog cloud bot low heterogeneous fog networks auluck et al 3 fog cloud bot low autonomous cars zhang et al 34 fog bot low voluntary mode fog networks stavrinides et al 27 fog cloud workflow low real time iot workflows benblidia et al 5 fog cloud bot moderate generic min ccv this study fog cloud bot very low generic min v this study fog cloud bot low generic metaheuristic bitam et al 6 fog bot high mobile users mishra et al 23 fog bot high industrial applications gill et al 13 fog cloud workflow high smart homes nguyen et al 25 fog cloud bot high generic aburukba et al 1 fog cloud workflow low generic wang et al 29 fog cloud bot high smart factories ghobaei arani et al 12 fog bot high cps applications javanmardi et al 17 fog cloud bot high mobile iot 2 2 metaheuristic based fog algorithms metaheuristic algorithms perform a random search to find a reasonable solution to an optimization scheduling problem 16 bitam et al 6 deal with the job scheduling problem in a fog environment this study aims to find a good trade off between two performance metrics i e the time of execution and the memory allocated to achieve this goal the authors propose a bees life algorithm as a swarm based optimization approach in 23 mishra et al formulate the scheduling of service requests as a bi objective optimization problem to minimize the makespan and energy consumption then they solve the problem using three metaheuristic algorithms particle swarm optimization pso binary pso bpso and bat algorithm bat gill et al 13 propose a new resource management technique which emphasizes on task scheduling for fog enabled cloud computing they leverage pso to reduce response time latency network bandwidth and the consumption of energy simultaneously this work implements these four qos parameters in the pso fitness function and uses predefined weights to prioritize them nguyen et al 25 propose a genetic based algorithm for the scheduling of tasks in fog cloud computing to reduce the makespan and cost of computation storage and communication of resources similarly aburukba et al in 1 model the task scheduling as an integer linear programming problem and propose a customized genetic algorithm to minimize the overall service request latency to reduce the delay and energy consumption wang and li 29 combine the advantages of the particle swarm optimization and ant colony optimization and propose a hybrid heuristic approach to scheduling tasks in smart factory environments ghobaei arani et al in 12 investigate the scheduling of tasks in the fog environment with a focus on cyber physical system cps applications they take into account the execution and transfer time of tasks as objective functions and present a moth flame optimization algorithm to provide high qos for cps applications javanmardi et al 17 propose a new joint meta heuristic method called fpfts combining pso and fuzzy methods acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 5 to tackle the fog task scheduling problem to do this the authors implement a three layered architecture which includes iot devices fog nodes instantiated on the edge layer and upper layer which is a cloud data center and their transparent cloud service providers moreover they give their tested scenarios enforced on mobility devices and fog device characteristics and their communications methods table 1 presents an overview of the related works and highlights the difference between this study and present works although previous works have considered some aspects of the task scheduling problem there is still room for further improvement in terms of the problem formulation and the efficiency of algorithms hence in this study we take into account the computation and communication cost profile of fog and cloud nodes and the response time of tasks concerning their deadlines for bag of tasks bot optimization problem in fog cloud environments and finally we generate two efficient heuristic algorithms to solve bot 3 proposed architecture and problem formulation in this section we first explain the proposed architecture and the components participate in the tasks scheduling process in a vcs then we formulate the task scheduling problem as a milp 3 1 proposed architecture fig 1 presents our proposed architecture for a vcs it consists of three layers namely iot devices fog and cloud nodes the first layer includes heterogeneous iot devices like wearable devices smart home sensors and healthcare devices these devices can request some demands formed as jobs that are sent to the higher layers to run on fog cloud nodes the second layer consists of computers mini servers routers access points and other nodes called fns each node has the capability of computing networking and storage in the cloud layer there exist some powerful volunteer servers with high computation and communication cost with a long distance from user iot devices if the request requires massive processing power it should be sent to the cns as they offer higher computing capacities than fns the main part of the proposed architecture is an entity called fog broker which is deployed in the fog layer fog broker consists of three major components that are request receiver resource monitoring and task scheduler request receiver receives all requests from the distributed iot devices through gateways this component first validates the integrity and correctness of the request then it estimates all of the relevant parameters of a submitted request such as the number of tasks and characteristics of each task after that it sends requests to the task scheduler resource monitoring is a unit that is responsible for periodically collecting and monitoring the available resources of volunteer fns and cns it shares the status of the nodes to the task scheduler to help the scheduling of the requests efficiently task scheduler is the heart of fog broker in which the proposed task scheduling algorithms are run based on the profiles of submitted tasks and available resource capacity of fns and cns task scheduler solves an instance of the task scheduling problem in each time period and maps tasks to the nodes fig 2 demonstrates an overview of the task scheduling process in the proposed architecture as we can see from the figure iot users send their requests to fog broker see the shaded rectangle in the middle of fig 2 fog broker decomposes a vector of independent tasks and creates a bot list see the vector of tasks inside the fog broker component in fig 2 depending on the embedded scheduling algorithm it may sort them or not fog broker is responsible for dispatching the bot list to the available cns and fns in the network thus fog broker allocates the tasks to the suitable fns and cns if the tasks assigned to the cns see top left cloud shape component in fig 2 the cloud system will dispatch the tasks to the available server which is associated with the cn depends on the requirements of the tasks like delay intensive and computation intensive applications the tasks can be assigned to the fns see top right cloud shape component in fig 2 fns are nearer to the users can be the first choice of fog broker assignments it helps to increase the throughput of the network by allocating the delay sensitive acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 6 azizi and shojafar et al fig 1 the considered architecture for the proposed volunteer computing system fn fog node cn cloud node applications on the fns all in all the results of the processing of the task whether located in cns or fns are obtained and sent to the fog broker and it can dispatch them to the corresponding users 3 2 problem formulation in this part we present the mathematical formulation for the task scheduling problem table 2 shows the main notation used in this paper assuming that a set of n independent tasks submitted to the task scheduler module as follows ttt t 1 t 2 t 3 tn each task ti has its attributes such as a number of instructions memory requirement input output file size deadline and qos also let a set of m computing nodes including f fns and c cns in the considered vcs where nnn n f nc is expressed as nnn n 1 n 2 n 3 nm each node n j has properties such as the rate of cpu processing cost of cpu usage cost of memory usage cost of bandwidth usage size of memory and delay of communication acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 7 fig 2 the proposed task scheduling approach cn cloud node fn fog node tx x th task although cns typically offer higher computation power than fns the monetary cost and communication latency are higher in the former let xn m be an allocation matrix to represent the status of tasks if task ti is allocated to n j xi j equals 1 otherwise equals 0 we have xi j 1 if ti is allocated to n j 0 otherwise ti ttt n j nnn 1 when a task is allocated to a node it takes some time for that task to execute on the respective node therefore we define ei j as the execution time of ti when it is allocated on n j which can be obtained using the following equation ei j t si ncpuj ti ttt n j nnn 2 in which t si and n cpu j are the number of instruction of ti and the cpu processing rate of n j respectively we next model the cost of a vcs including the computation communication and deadline violation cost 3 2 1 computation cost as one computing node processes a task a monetary cost must be paid the computation cost of a given task consists of two parts processing and memory cost that can be calculated as follows acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 8 azizi and shojafar et al table 2 symbol notations ms millisecond mi million instruction mb mega byte mips million instruction per second g grid dollar s second symbol definition type unit calculates in eq se t ttt set of independent tasks where ttt n nnn set of nodes where nnn m n f set of fog nodes where n f f nc set of cloud nodes where nc c in d i index of tasks i ttt integer units j index of nodes j nnn integer units ei j execution time of ti on n j continuous ms 2 3 7 in pu tp ar am et er s wi j waiting time of ti in the queue of n j continuous ms 7 t si number of instructions of ti integer mi 2 t memi required memory of ti continuous mb 3 13 t bwi required bandwidth of ti continuous mb 5 t deadlinei required deadline time of ti continuous ms 8 t qosi required quality of service of ti continuous 9 t responsei response time of ti continuous ms 7 8 t penaltyi penalty rate of ti continuous per 9 ncpuj cpu processing rate of n j integer mips 2 nmemj memory capacity of n j continuous mb 13 ndelayj delay between the task scheduler module and n j continuous ms 7 c on st an t cpj cpu usage cost of n j continuous g s 3 cmj memory usage cost of n j continuous g mb 3 cbj bandwidth usage cost of n j continuous g mb 5 v ar ia bl es xn m allocation matrix binary units xi j decision variable showing if ti is allocated to n j binary units 1 3 5 7 13 14 ccompi computing cost for ti continuous g 3 4 ccommi communication cost for ti continuous g 5 6 cvioli violation cost for ti continuous g 9 10 vi violation time of ti continuous 8 9 c comp total computing cost continuous g 4 11 c comm total communication cost continuous g 6 11 c viol total violation cost continuous g 10 11 ctot total cost continuous g 11 12 ccompi m j 1 cpj ei j c m j t mem i xi j i 1 n 3 where t memi depicts the required memory of task ti also c p j and c m j are constant numbers which respectively represent the cpu usage cost and memory usage cost of node n j based on this equation the total computing cost for a set of n tasks is defined as below c comp n i 1 ccompi 4 3 2 2 communication cost for a given task in addition to the computation cost the communication cost is also introduced 25 26 this cost depends on the sum of input and output data file sizes of that task and the cost of acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 9 bandwidth usage per data unit of nodes so let t bwi be the amount of bandwidth requirement of task ti and c b j be the cost of bandwidth usage per data unit of node n j the communication cost for task ti is obtained as follow ccommi m j 1 cbj t bw i xi j i 1 n 5 hence the total communication cost for all of n tasks is given by the following equation c comm n i 1 ccommi 6 3 2 3 deadline violation cost to model the qos we need to present an appropriate formula for deadline violation cost to this end we first define the system response time for a given task ti here we define it as the time interval between the moment that the task scheduler module receives the input file and the moment it gets the output file hence we should consider the delay between the task scheduler module and node n j depicted by n delay j the execution time of task ti on node n j see eq 2 and the waiting time of ti in the queue of n j denoted by wi j take into account these parameters the response time for task ti is obtained using the following equation t responsei m j 1 2 ndelayj ei j wi j xi j i 1 n 7 to measure the deadline violation cost for a given task ti we first define vi as the percentage of the violation here we propose the following formula to obtain its value vi max 0 t responsei t deadline i t deadlinei 100 i 1 n 8 where the range of vi is 0 it is zero if the task response time is lower than deadline time i e t deadlinei t responsei however it can be can any positive value depending on the distance between response and deadline time to determine the violation cost for a given task ti we need its qos requirement t qos i and the penalty that the fog broker must pay by one percent of the delay violation t penaltyi it is worth to mention that a similar metric is defined in 33 cvioli vi 100 t qosi t penaltyi i 1 n 9 considering the above equation we can calculate the deadline violation cost for the system as follows c viol n i 1 cvioli 10 now we can obtain the total cost of a vcs using the following equation ctot c comp c comm c viol 11 acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 10 azizi and shojafar et al 3 2 4 overall problem formulation our main objective is solving the task scheduling problem in a heterogeneous volunteer computing system in such a way that the total cost is minimized therefore the final optimization formula is defined as the following milp model min ctot 12 subject to memory constraint xi j t memi n mem j i 1 n j 1 m 13 task constraint m j 1 xi j 1 i 1 n 14 under binary control decision variable xi j 0 1 i 1 n j 1 m to solve this milp problem we require to ensure that we have a task scheduling problem such that n independent tasks want to be processed through m nodes since the requirement of tasks and properties of nodes are different there exist mn solutions for mapping the tasks to the nodes in a large scale problem n and m usually are on the scale of thousands 4 8 proposing an efficient algorithm is a challenging task in the following section we propose two heuristic algorithms to find a suitable solution in a real time even for very large scale ns and ms 4 proposed algorithms in this part we first introduce our heuristic algorithms for scheduling tasks in a vcs see subsections 4 1 and 4 2 then we give an illustrative example to show how our proposed algorithms work see subsection 4 3 finally we provide the time and space complexity analysis of the algorithms see subsection 4 4 4 1 min ccv algorithm min ccv is a computation communication and violation aware task scheduling algorithm min ccv algorithm allocates a task to a node which provides the lowest total cost see eq 12 for that task it is worth mentioning that the algorithm searches among all fog and cloud nodes that provide enough memory for the task see eq 13 algorithm 1 presents the pseudo code of the min ccv algorithm it initially sets the available time of all nodes to 0 line 2 then in the main loop lines 3 to 19 it searches among all nodes and tries to find a node which can provides the least total cost including computation communication and violation costs for a selected task lines 5 to 16 to this end it first investigates the memory constraint line 6 to check whether a node has enough memory or not if so it calculates the total cost for that node lines 7 to 10 after that the node with the least cost is selected for a given task lines 11 to 14 in the end we assign the task to the indexed node and update the available time of the indexed node lines 17 and 18 4 2 min v algorithm here we propose an efficient heuristic algorithm called min v for the batch mode in which a batch of tasks arrives at the task scheduler module the corresponding task scheduling algorithm is executed the main goal of min v is minimizing the delay violations as far as possible i e the algorithm gives higher priority to qos compared to cost to achieve this we first sort tasks in ascending order by their predefined deadline then for each task we create a set of fns and cns which meet the memory constraint and satisfy the task deadline after that we select the node with the minimum computation and communication cost if there exist no nodes to fulfil the deadline requirement of a given task we choose the one which offers the minimum violation cost the pseudo code of min v is provided in algorithm 2 the detail of the algorithm is as follows first of all the available time of all nodes is set to 0 line 2 in line 3 the algorithm sorts the tasks based on their deadlines in acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 11 algorithm 1 min ccv computation communication and violation aware algorithm 1 procedure min ccv ttt nnn 2 availabletime nnn 0 3 for all ti ttt do 4 cmin 5 for all n j nnn do 6 if t memi n mem j then 7 calculate ccompi using eq 3 8 calculate ccommi using eq 5 9 calculate cvioli using eq 8 10 ctot ccompj c comm j c viol j 11 if ctot cmin then 12 cmin ctot 13 index j 14 end if 15 end if 16 end for 17 allocate ti to nindex 18 availabletime nindex availabletime nindex ei index 19 end for 20 end procedure ascending order next it iterates through tasks to allocate them to the most suitable nodes lines 4 to 22 for each task min v creates two empty lists satisfiedlist and unsatisfiedlist lines 5 and 6 in lines 7 to 16 for all nodes n j nnn which meet the memory demand of a given task ti the response time of task ti on node n j is obtained if the node can satisfy the deadline of the task it is added to satisfiedlist otherwise it is added to unsatisfiedlist after this process regarding the size of satisfiedlist two different strategies will be available if there exists at least one node in satisfiedlist i e the deadline requirement of task ti is met the algorithm calls mincompcomm function see algorithm 3 otherwise it calls minviol function see algorithm 4 algorithm 3 shows the pseudo code of the mincompcomm function first of all it sets cmin in line 2 then the node with the minimum computation and communication cost is selected lines 3 to 11 and the task is assigned to the node and its available time is updated lines 12 and 13 the pseudo code of the minviol function is given in algorithm 4 here again we set cmin in line 2 next the node with the least violation cost is found lines 3 to 9 and allocation and updating is done lines 10 and 11 4 3 illustrative example in this part we assume an illustrative example with 10 tasks and 3 nodes consist of 2 fog nodes and 1 cloud node the tasks are numbered from 1 to 10 and nodes from 1 to 3 the attribute of tasks and nodes are shown in table 3 and table 4 respectively fig 3 a and fig 3 b respectively demonstrate the allocation map obtained by min ccv and min v in min ccv five of ten tasks cannot meet their deadlines where the total violation cost is about 505 g however in min v only three tasks exceed their deadline while the total violation cost is 8 4 g 4 4 complexity analysis in this subsection we provide the time and space complexity analysis of the our heuristic methods acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 12 azizi and shojafar et al algorithm 2 min v violation aware algorithm 1 procedure min v ttt nnn 2 activetime nnn 0 3 ascsort ttt t deadlinei i 1 n 4 for all ti ttt do 5 satis f iedlist 6 unsatis f iedlist 7 for all n j nnn do 8 if t memi n mem j then 9 calculate t responsei using eq 7 10 if t responsei t deadline i then 11 satis f iedtlist satis f iedtlist j 12 else 13 unsatis f iedtlist unsatis f iedtlist j 14 end if 15 end if 16 end for 17 if satis f iedlist 1 then 18 call mincompcomm ti satisfiedlist 19 else 20 call minviol ti unsatisfiedtlist 21 end if 22 end for 23 end procedure algorithm 3 mincompcomm function 1 procedure mincompcomm ti satisfiedlist 2 cmin 3 for all n j satis f iedlist do 4 calculate ccompi using eq 3 5 calculate ccommi using eq 5 6 ctot ccompi c comm i 7 if ctot cmin then 8 cmin ctot 9 index j 10 end if 11 end for 12 allocate ti to nindex 13 availabletime nindex availabletime nindex ei index 14 end procedure 1 min ccv the time complexity analysis of the min ccv algorithm is quite simple where it depends on the number of tasks and nodes to set the available time of nodes to 0 line 2 the algorithm calculates it in the order of o m the rest of the algorithm consists of two nested loops where they run n and m times respectively therefore acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 13 algorithm 4 minviol function 1 procedure minviol ti unsatisfiedtlist 2 cmin 3 for all n j unsatis f iedlist do 4 calculate cvioli using eq 8 5 if cvioli c min then 6 cmin cvioli 7 index j 8 end if 9 end for 10 allocate ti to nindex 11 availabletime nindex availabletime nindex ei index 12 end procedure 0 1 2 3 4 5 6 7 8 9 10 1 2 3 time s n od e t 1 t 2 t 3 t 4 t 5 t 6 t 7 t 8 t 9 t 10 a min ccv 0 1 2 3 4 5 6 7 8 1 2 3 time s n od e t 10 t 3 t 7 t 2 t 8 t 1 t 5 t 6 t 4 t 9 b min v fig 3 toy case study allocation map table 3 toy case study of attribute of tasks parameters tasks 1 2 3 4 5 6 7 8 9 10 number of instruction mi 2000 3000 100 8000 1500 6000 300 4000 9000 200 memory required mb 100 200 50 180 70 120 150 180 100 150 input file size mb 0 5 1 0 3 1 5 0 4 1 2 0 8 1 0 5 1 4 output file size mb 0 1 0 8 0 5 0 5 0 8 1 0 5 0 6 0 4 0 2 deadline ms 1500 1000 200 5000 2200 3500 400 1200 8000 100 qos 96 93 95 92 99 94 98 91 90 95 penalty per 0 2 0 1 0 4 0 5 0 2 0 1 0 3 0 3 0 4 0 1 the overall time complexity of this algorithm is o n m moreover the space complexity of min ccv is linear in the number of tasks and nodes i e o n m acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 14 azizi and shojafar et al table 4 toy case study of attribute of nodes parameters nodes 1 2 3 cpu processing rate mips 1500 750 6000 cpu usage cost g s 0 3 0 4 1 5 memory usage cost g mb 0 03 0 02 0 05 bandwidth usage cost g mb 0 01 0 02 0 08 memory mb 220 170 1024 delay ms 1 2 150 2 min v similar to min ccv the complexity of line 2 is o m according to the line 3 min v sorts the set of n tasks which requires o nlogn to construct satisfiedlist and unsatisfiedlist the algorithm runs two nested for loops which calculates in the order of o n m time the rest of the algorithm depends on the size of satisfiedlist if this list is not empty it may include all of the nodes thus searching among them needs o m time in the worst case otherwise the algorithm searches among the nodes inside the unsatisfiedlist that runs in the order of o m hence the overall time complexity of the min v algorithm is o nlogn n m the space complexity of this algorithm is also linear in the number of tasks and nodes i e o n m the above analysis shows that our proposed algorithms can run very fast which make them a promising solution for real time volunteer task scheduling problem in fog cloud computing systems 5 performance evaluation in this section we describe simulation setup performance metrics and the results our proposed algorithms are compared with three cutting edge strategies and the results verify that our proposed algorithms are superior to other algorithms 5 1 simulation setup here we describe the simulation settings see section 5 1 1 simulation metrics see section 5 1 2 comparison algorithms see section 5 1 3 and the results see section 5 1 4 5 1 1 settings in our experimental study to fully apprehend the benefits of the proposed algorithms we have performed three experiments in which we investigate the impact of the various parameters that determine the results the purpose of the experiments along with their settings are outlined in table 5 they are also briefly explained here in this paper we consider three various experiments as below experiment one in this experiment in each level we increase 50 tasks to the number of tasks from 50 to 300 tasks and the number of fog and cloud nodes fixed to 30 and 15 respectively see fig 4 experiment two in this experiment the problem consists of 200 tasks and 15 cloud nodes with a varying number of fog nodes from 10 to 50 see fig 5 experiment three in this experiment we want to observe the impact of the varying number of cloud nodes with the number of tasks and fog nodes fixed to 200 and 30 respectively see fig 6 the fog cloud system is responsible for executing all iot requests each request first is decomposed into a set of independent tasks then their resources requirement are calculated and estimated table 6 shows the characteristics of tasks used in our experiments we run each experiment ten times and report the average maximum and minimum of them acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 15 table 5 simulation experiment settings experiment purpose of experiment parameters task fog node cloud node 1 impact of varying number of tasks 50 300 30 15 2 impact of varying number of fog nodes 200 10 50 15 3 impact of varying number of cloud nodes 200 30 5 25 table 6 attribute of task settings parameter value unit type 1 type 2 type 3 size 100 372 1028 4280 5123 9784 mi required memory 50 200 mb input file size 0 3 1 5 mb output file size 0 1 1 mb deadline 100 500 500 2500 2500 10000 ms qos 90 99 99 penalty 0 1 0 5 g table 7 attribute of node settings parameter value unit fog cloud cpu processing rate 500 2000 3000 10000 mips cpu usage cost 0 2 0 5 1 2 1 g second memory usage cost 0 01 0 03 0 02 0 05 g mb bandwidth usage cost 0 01 0 02 0 05 0 1 g mb memory 150 250 256 4096 mb delay 1 5 50 250 ms the fog cloud infrastructure consists of fog nodes with limited process capacity than the cloud nodes but they are closer to the user and have a minimum delay consequently cloud nodes can process the tasks in the shortest possible time however they have a high delay in receiving tasks hence the proposed algorithms should be handling the balancing between fog and cloud nodes to decrease the total cost table 7 presents the attributes of nodes with the process capacity details and the minimum delay in allocating tasks on nodes all of the attribute values of the nodes can be chosen randomly we perform experiments 2 and 3 with 10 iterations to investigate the impact of the number of nodes all experimental simulations were carried out on matlab environment on a pc with intel r xeon r cpu e 7 4850 v 4 2 10 ghz 2 processors 8 00 gb ram and windows 10 pro operating system the source code of our paper is available in 15 5 1 2 simulation metrics in this paper our purpose is to ensure the quality of service qos with minimum total cost to evaluate the performance of the proposed algorithms we measured computation communication and violation cost as the fog computing environment is suited explicitly to time sensitive applications violation cost is the most important factor which needs to be ensured therefore we must try to find the best allocating map to decrease delays and makespan on the other hand the computation and communication costs should not be high 5 1 3 comparison algorithms our proposed algorithms are compared against the three algorithms that consist of two base methods and a metaheuristic based approach acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 16 azizi and shojafar et al round robin rr in this method the execution time for each task is estimated on the nodes one by one and a node is chosen if the execution time lower than the deadline s task and ensure the memory limitation this operation will continue until any node has one task at least then the second round is begun random according to its name the task is allocated on the nodes randomly with ensuring the memory limitation tcas this is a metaheuristic algorithm introduced in 25 we consider 1000 generations in each iteration 5 1 4 results in this part we provide the results for the three experiments mentioned above with two proposed algorithms and three comparing algorithms in this paper we calculated three costs for minimizing total cost on the other hand we used decreasing makespan and increasing the pdst percentage of the deadline satisfied tasks for reducing the violation cost consequently we present six plots for each experiment 1 impact of a varying number of tasks figs 4 a to 4 f illustrate the performance and cost of the proposed algorithms compared to the benchmarks from the figures we see that with increasing the number of tasks the pdst decreases while the other metrics increases however our proposed algorithms present higher performance and lower cost compared with the others specifically min v significantly outperforms the baseline methods and tcas in terms of pdst see fig 4 a and violation cost see fig 4 c this is because of the deadline violation awareness of this algorithm it also remarkably reduces makespan compared to rr and random while it is a competitor for tcas see fig 4 b the min ccv algorithm provides the second best results in terms of pdst and the cost of the violation regarding the communication cost fig 4 e since compared to the violation cost the communication cost has less impact on the total cost and this metric is somewhat higher for our algorithms however both of our algorithms perform well in terms of computation cost fig 4 d finally fig 4 f depicts that our min v and then min ccv provide extremely low total cost compared to the rest 2 impact of varying number of fog nodes the results of this experiment are shown in figs 5 a to 5 f generally speaking as the number of fog nodes increases the pdst of all algorithms is increasing while the system cost decreases however due to prioritizing tasks based on their deadline requirements and taking into account the violation computation and communication cost the proposed min v gives the best performance compared to the rest more surprisingly as the number of fog nodes increases from 10 to 50 where the number of cloud nodes is fixed to 15 min v achieves 67 to 92 of the pdst fig 5 a and reduces the violation cost from 574 to 85 g fig 5 c this implies that min v is capable of achieving great qos for iot requests in these respects min ccv provides the second best results as we can observe from fig 5 b in terms of makespan our proposed algorithms and tcas almost have the same performance while they are far better than rr and random from the point of computation and communication cost figs 5 d and 5 e as the number of fog nodes increases all algorithms allocate more tasks to the fog environment which results in reducing the computation and communication cost however since the computation cost has a higher impact on the total cost our proposed algorithms focus more on reducing it fig 5 f demonstrates the overall system cost the percentage of improvement for our min v and min ccv is up to 99 5 and about 90 to 98 in compare with tcas respectively 3 impact of a varying number of cloud nodes as the final experiment we focus on changing the number of cloud nodes from 5 to 25 the simulation results for this experiment reveal that min v and then min ccv perform better than the rest in terms of pdst violation cost computation cost and total cost see figs 6 a to 6 f here there are some important points to mention first as the number of cloud nodes reaches from 5 to 15 the pdst of the both proposed algorithms substantially improves and their violation cost significantly reduces see figs 6 a and 6 c however after that we observe a little impact on the performance of the system the main reason behind this is that the 15 cloud nodes are enough to process the delay tolerant tasks but the latency sensitive tasks cannot meet their deadline using cloud nodes again as fig 6 b shows our algorithms and tcas give better results than rr and random concerning makespan for the computation cost aspect our min v and then min ccv provide the lowest cost fig 6 b while for the communication cost rr and then random provides the most economical cost fig 6 e fig 6 f depicts that min v min ccv and tcas give the first second and third best total cost respectively acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 17 0 20 40 60 80 100 120 50 100 150 200 250 300 p d s t number of tasks rr random tcas min ccv min v a pdst 0 10 20 30 40 50 60 70 80 90 100 110 120 50 100 150 200 250 300 m a k e sp a n s number of tasks rr random tcas min ccv min v b makespan 0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 50 100 150 200 250 300 v io la ti o n c o st g t h o u sa n d s number of tasks rr random tcas min ccv min v c violation cost 0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 50 100 150 200 250 300 c o m p u ta ti o n c o st g number of tasks rr random tcas min ccv min v d computation cost 0 2 4 6 8 10 12 14 16 18 20 22 24 50 100 150 200 250 300 c o m m u n ic a ti o n c o st g number of tasks rr random tcas min ccv min v e communication cost 0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 50 100 150 200 250 300 t o ta l c o st g t h o u sa n d s number of tasks rr random tcas min ccv min v f total cost fig 4 simulation results for experiment 1 impact of varying number of tasks 6 discussions despite the effectiveness of our proposed algorithms several aspects are remaining that we address them in the following first similar to 25 30 the presented work does not consider the dependency between tasks on the acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 18 azizi and shojafar et al 0 20 40 60 80 100 120 25 35 45 55 65 p d s t number of nodes rr random tcas min ccv min v a pdst 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 25 35 45 55 65 m a k e sp a n s number of nodes rr random tcas min ccv min v b makespan 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 25 35 45 55 65 v io la ti o n c o st g t h o u sa n d s number of nodes rr random tcas min ccv min v c violation cost 0 100 200 300 400 500 600 700 800 900 1000 1100 25 35 45 55 65 c o m p u ta ti o n c o st g number of nodes rr random tcas min ccv min v d computation cost 0 2 4 6 8 10 12 14 16 18 20 25 35 45 55 65 c o m m u n ic a ti o n c o st g number of nodes rr random tcas min ccv min v e communication cost 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 25 35 45 55 65 t o ta l c o st g t h o u sa n d s number of nodes rr random tcas min ccv min v f total cost fig 5 simulation results for experiment 2 impact of varying number of fog nodes application job level given that in the real world the tasks of some applications are interdependent the proposed algorithms can be extended in a way that they work for such applications too second in a software defined networking sdn enabled volunteer system computing devices are usually deployed by different operators and owners in a geographically distributed environment 22 hence this introduces a challenge to the fog broker acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 19 0 10 20 30 40 50 60 70 80 90 100 35 40 45 50 55 p d s t number of nodes rr random tcas min ccv min v a pdst 0 10 20 30 40 50 60 70 80 90 100 110 35 40 45 50 55 m a k e sp a n s number of nodes rr random tcas min ccv min v b makespan 0 10 20 30 40 50 60 70 80 90 100 110 35 40 45 50 55 v io la ti o n c o st g t h o u sa n d s number of nodes rr random tcas min ccv min v c violation cost 0 100 200 300 400 500 600 700 800 900 1000 35 40 45 50 55 c o m p u ta ti o n c o st g number of nodes rr random tcas min ccv min v d computation cost 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 35 40 45 50 55 c o m m u n ic a ti o n c o st g number of nodes rr random tcas min ccv min v e communication cost 0 10 20 30 40 50 60 70 80 90 100 110 35 40 45 50 55 t o ta l c o st g t h o u sa n d s number of nodes rr random tcas min ccv min v f total cost fig 6 simulation results for experiment 3 impact of varying number of cloud nodes in terms of data routing among fog devices however in this work we have ignored this aspect therefore an effective routing protocol should be integrated into our algorithms to cope with this issue finally due to the low time and space complexity and the high performance of the proposed methods we can use them in the online task scheduling problem in the domain of fog cloud computing acm trans internet technol vol 1 no 1 article 1 publication date april 2021 1 20 azizi and shojafar et al 7 conclusion and future directions in this paper we focused on the task scheduling problem in volunteer fog cloud environments we formulated the problem as mixed integer programming to minimize computation communication and violation costs to address the problem two efficient heuristic algorithms are introduced the proposed algorithms were evaluated in terms of their performance via various experiments the results show that our algorithms significantly outperform others in terms of percentage of deadline satisfied tasks pdst and violation cost they also provide low makespan and computation cost specifically the proposed algorithms are capable of delivering pdst by up to 95 and reducing the violation cost by up to 99 5 as the number and scale of volunteer computing systems are growing rapidly the energy consumed by their computing resources is significantly increasing which imposes a substantial impact on the system cost therefore as future work we plan to expand the scheduling problem by considering energy consumption optimization is another key metric moreover to further assess the efficiency of the proposed algorithms we would like to evaluate their performance under different real data sets and compare them with other state of the art last but not least this work can be extended in future internet technologies including edge systems designing an automatic resource allocation mechanism is one of the prominent goals of the network brokers especially brokers who are dealing with the real time and sensitive applications like video streaming used for remote surgery hence we plan to add artificial intelligence methods to our heuristic approaches which shape a zero tough model mimics the environment changes references 1 raafat o aburukba mazin alikarrar taha landolsi and khaled el fakih 2020 scheduling internet of things requests to minimize latency in hybrid fog cloud computing future generation computer systems 111 2020 539 551 2 david p anderson eric korpela and rom walton 2005 high performance task distribution for volunteer computing in first international conference on e science and grid computing e science 05 ieee 1 8 3 nitin auluck akramul azim and kaneez fizza 2019 improving the schedulability of real time tasks using fog computing ieee transactions on services computing early access 2019 4 md faizul bari raouf boutaba rafael esteves lisandro zambenedetti granville maxim podlesny md golam rabbani qi zhang and mohamed faten zhani 2012 data center network virtualization a survey ieee communications surveys tutorials 15 2 2012 909 928 5 mohammed anis benblidia bouziane brik leila merghem boulahia and moez esseghir 2019 ranking fog nodes for tasks scheduling in fog cloud environments a fuzzy logic approach in 15 th international wireless communications mobile computing conference iwcmc ieee 1451 1457 6 salim bitam sherali zeadally and abdelhamid mellouk 2018 fog computing job scheduling optimization based on bees swarm enterprise information systems 12 4 2018 373 397 7 charles c byers 2017 architectural imperatives for fog computing use cases requirements and architectural techniques for fog enabled iot networks ieee communications magazine 55 8 2017 14 20 8 kuan yin chen yang xu kang xi and h jonathan chao 2013 intelligent virtual machine placement for cost efficiency in geo distributed cloud systems in 2013 ieee international conference on communications icc ieee 3498 3503 9 tejaswini choudhari melody moh and teng sheng moh 2018 prioritized task scheduling in fog computing in proceedings of the acmse 2018 conference 1 8 10 ruilong deng rongxing lu chengzhe lai tom h luan and hao liang 2016 optimal workload allocation in fog cloud computing toward balanced delay and power consumption ieee internet of things journal 3 6 2016 1171 1181 11 toktam ghafarian and bahman javadi 2015 cloud aware data intensive workflow scheduling on volunteer computing systems future generation computer systems 51 2015 87 97 12 mostafa ghobaei arani alireza souri fatemeh safara and monire norouzi 2020 an efficient task scheduling approach using moth flame optimization algorithm for cyber physical system applications in fog computing transactions on emerging telecommunications technologies 31 2 2020 e 3770 13 sukhpal singh gill peter garraghan and rajkumar buyya 2019 router fog enabled cloud based intelligent resource management approach for smart home iot devices journal of systems and software 154 2019 125 138 acm trans internet technol vol 1 no 1 article 1 publication date april 2021 joint qos aware and cost efficient task scheduling for fog cloud resources in a volunteer computing system 1 21 14 hiwa omer hassan sadoon azizi and mohammad shojafar 2020 priority network and energy aware placement of iot based application services in fog cloud environments iet communications 14 13 2020 2117 2129 15 farooq hoseiny sadoon azizi mohammad shojafar and rahim tafazolli 2020 min ccv min v source code https github com mshojafar sourcecodes blob master farooq 2020 minvminccv acmtoit zip 2020 16 pejman hosseinioun maryam kheirabadi seyed reza kamel tabbakh and reza ghaemi a task scheduling approaches in fog computing a survey transactions on emerging telecommunications technologies e 3792 17 saeed javanmardi mohammad shojafar valerio prisco and antonio pescape 2020 fpfts a joint fuzzy pso mobility aware approach to fog task scheduling algorithm for iot devices software practice and experience to be appear 2020 1 16 18 slad ana jo ilo and gy rgy d n 2018 decentralized algorithm for randomized task allocation in fog computing systems ieee acm transactions on networking 27 1 2018 85 97 19 young choon lee albert y zomaya and howard jay siegel 2010 robust task scheduling for volunteer computing systems the journal of supercomputing 53 1 2010 163 181 20 lindong liu deyu qi naqin zhou and yilin wu 2018 a task scheduling algorithm based on classification mining in fog computing environment wireless communications and mobile computing 2018 2018 21 zening liu xiumei yang yang yang kunlun wang and guoqiang mao 2018 dats dispersive stable task scheduling in heterogeneous fog networks ieee internet of things journal 6 2 2018 3423 3436 22 tom h luan longxiang gao zhi li yang xiang guiyi wei and limin sun 2015 fog computing focusing on mobile users at the edge arxiv preprint arxiv 1502 01815 2015 23 sambit kumar mishra deepak puthal joel jpc rodrigues bibhudatta sahoo and eryk dutkiewicz 2018 sustainable service allocation using a metaheuristic technique in a fog server for industrial applications ieee transactions on industrial informatics 14 10 2018 4497 4506 24 rub n s montero elisa rojas alfonso a carrillo and ignacio mart n llorente 2017 extending the cloud to the network edge ieee computer 50 4 2017 91 95 25 binh minh nguyen huynh thi thanh binh bao do son et al 2019 evolutionary algorithms to optimize task scheduling problem for the iot based bag of tasks application in cloud fog computing environment applied sciences 9 9 2019 1730 26 xuan qui pham nguyen doan man nguyen dao tan tri ngo quang thai and eui nam huh 2017 a cost and performance effective approach for task scheduling based on collaboration between cloud and fog computing international journal of distributed sensor networks 13 11 2017 1550147717742073 27 georgios l stavrinides and helen d karatza 2019 a hybrid approach to scheduling real time iot workflows in fog and cloud environments multimedia tools and applications 78 17 2019 24639 24655 28 bo wang ying song jie cao xiao cui and ling zhang 2019 improving task scheduling with parallelism awareness in heterogeneous computational environments future generation computer systems 94 2019 419 429 29 juan wang and di li 2019 task scheduling based on a hybrid heuristic algorithm for smart production line with fog computing sensors 19 5 2019 1023 30 jiuyun xu zhuangyuan hao ruru zhang and xiaoting sun 2019 a method based on the combination of laxity and ant colony system for cloud fog task scheduling ieee access 7 2019 116218 116226 31 ming yang hao ma shuang wei you zeng yefeng chen and yuemei hu 2020 a multi objective task scheduling method for fog computing in cyber physical social services ieee access 8 2020 65085 65095 32 ashkan yousefpour caleb fung tam nguyen krishna kadiyala fatemeh jalali amirreza niakanlahiji jian kong and jason p jue 2019 all one needs to know about fog computing and related edge computing paradigms a complete survey journal of systems architecture 98 2019 289 330 33 ashkan yousefpour ashish patil genya ishigaki inwoong kim xi wang hakki c cankaya qiong zhang weisheng xie and jason p jue 2019 fogplan a lightweight qos aware dynamic fog service provisioning framework ieee internet of things journal 6 3 2019 5080 5096 34 guowei zhang fei shen nanxi chen pengcheng zhu xuewu dai and yang yang 2018 dots delay optimal task scheduling among voluntary nodes in fog networks ieee internet of things journal 6 2 2018 3533 3544 acm trans internet technol vol 1 no 1 article 1 publication date april 2021 https github com mshojafar sourcecodes blob master farooq 2020 minvminccv acmtoit zip https github com mshojafar sourcecodes blob master farooq 2020 minvminccv acmtoit zip abstract 1 introduction 1 1 motivation 1 2 goal and contribution 1 3 organization 2 related work 2 1 heuristic based fog algorithms 2 2 metaheuristic based fog algorithms 3 proposed architecture and problem formulation 3 1 proposed architecture 3 2 problem formulation 4 proposed algorithms 4 1 min ccv algorithm 4 2 min v algorithm 4 3 illustrative example 4 4 complexity analysis 5 performance evaluation 5 1 simulation setup 6 discussions 7 conclusion and future directions references