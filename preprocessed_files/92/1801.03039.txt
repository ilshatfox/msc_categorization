ar x iv 1 80 1 03 03 9 v 2 cs l g 2 6 ju l 20 18 ebic 2018 7 27 0 29 page 1 1 data and text mining ebic an evolutionary based parallel biclustering algorithm for pattern discovery patryk orzechowski 1 2 moshe sipper 3 xiuzhen huang 4 and jason h moore 1 1 institute for biomedical informatics university of pennsylvania philadelphia pa 19104 usa and 2 department of automatics and biomedical engineering agh university of science and technology al mickiewicza 30 30 059 krakow poland and 3 department of computer science ben gurion university beer sheva 8410501 israel and 4 department of computer science arkansas state university jonesboro ar 72467 usa to whom correspondence should be addressed associate editor xxxxxxx received on xxxxx revised on xxxxx accepted on xxxxx abstract motivation biclustering algorithms are commonly used for gene expression data analysis however accurate identification of meaningful structures is very challenging and state of the art methods are incapable of discovering with high accuracy different patterns of high biological relevance results in this paper a novel biclustering algorithm based on evolutionary computation a subfield of artificial intelligence ai is introduced the method called ebic aims to detect order preserving patterns in complex data ebic is capable of discovering multiple complex patterns with unprecedented accuracy in real gene expression datasets it is also one of the very few biclustering methods designed for parallel environments with multiple graphics processing units gpus we demonstrate that ebic greatly outperforms state of the art biclustering methods in terms of recovery and relevance on both synthetic and genetic datasets ebic also yields results over 12 times faster than the most accurate reference algorithms availability ebic source code is availableon github athttps github com epistasislab ebic contact correspondence and requests for materials should be addressed to p o email patryk orzechowski gmail com and j h m email jhmoore upenn edu supplementary information supplementary data with results of analyses and additional information on the method is available at bioinformatics online 1 introduction discovering meaningful patterns in complex and noisy data especially biological one is a challenge traditional clustering approaches such as k means or hierarchical clustering are expected to group similar objects together and to separate dissimilar objects into distinctive groups these methods assume that all object features contribute to the classification result which renders clustering a valuable technique for global similarity detection clustering does not however succeed when only some subset of features is important to a specific cluster the inability to capture local patterns is one of the main reasons for the advent of biclustering techniques where biclusters subsets of rows and columns are sought both rows and columns subsets may contain elements that are not necessarily adjacent to each other thus differentiating biclustering from other problems of pattern matching e g image recognition making also the task unsuitable for deep learning ching et al 2018 biclustering has its roots in data partitioning into subgroups of approximately constant values morgan and sonquist 1963 and simultaneously clustering rows and columns of a matrix hartigan 1972 this was later called biclustering mirkin 1996 for the last two decades biclustering has been applied to multiple domains including biomedicine genomics especially gene expression analysis text mining marketing dimensionality reduction and others busygin et al 2008 dolnicar et al 2012 designing biclustering algorithms involves many challenges first although over fifty biclustering algorithms have been proposed much more when derivatives are considered no method has proven capable of detecting with sufficient accuracy six major types of patterns that are commonly present in gene expression data most biclustering algorithms find only one or a few of these patterns madeira and oliveira 2004 eren et al 2013 pontes et al 2015 a http arxiv org abs 1801 03039 v 2 https github com epistasislab ebic ebic 2018 7 27 0 29 page 2 2 2 orzechowski et al wang et al 2016 padilha and campello 2017 column constant row constant shift i e additive coherent scale i e multiplicative coherent shift and scale i e simultaneous coherent and order preserving detection of order preserving patterns is especially important because it may be considered a generalization of the five other patterns ben dor et al 2003 eren et al 2013 wang et al 2016 second many biclustering algorithms are unable to detect negative correlations or capture approximate patterns moreover biclustering algorithms fail to properly separate partially overlapping biclusters the performance of these algorithms on overlapping problems usually drops dramatically with increasing levels of overlap wang et al 2016 a third drawback of current biclustering methods is their limited success assessing which biclusters are the most relevant multiple measures for assessing quality of biclusters have been used so far orzechowski 2013 pontes et al 2015 b some algorithms yield only a single bicluster at a time rendering their application cumbersome pontes et al 2015 a other methods output a high number of biclusters e g bimax prelic et al 2006 and pbba orzechowski and boryczko 2016 b this usually produces many overlaps and degrades the overall performance of the algorithm eren et al 2013 providing the proper balance between local and global context within the data is also difficult the methods that model global relations are typically able to deliver only a limited number of results e g plaid lazzeroni and owen 2002 fabia hochreiter et al 2010 and isa bergmann et al 2003 or tend to exhibit decreased accuracy with each result e g cc cheng and church 2000 on the other hand algorithms that focus on local similarities are susceptible to losing global reference e g bimax pbba or unibic wang et al 2016 for example unibic which sorts pairs of values and column indices of each row in order to identify the longest common subsequences is able to detect the longest order preserving pattern between each pair of rows irrespective of the order of columns but it fails to capture narrow biclusters containing only a few rows and multiple columns as the biclustering problem is np hard designing an efficient and accurate parallel biclustering algorithm remains a challenge most of the reference biclustering algorithms are purely sequential the reason for this is that the methods either require intensive computations which limit their application to datasets of smaller size or are fast but at the cost of lower accuracy 2 methods in this paper a novel biclustering algorithm called ebic is introduced which overcomes the above shortcomings the algorithm is based on evolutionary computation a subfield of artificial intelligence ai it is likely the first biclustering algorithm capable of detecting all aforementioned types of meaningful patterns with very high accuracy ebic is also one of very few parallel biclustering methods we show that the proposed algorithm outperforms the most established methods in the field with respect to accuracy and relevance on both synthetic and real genomic datasets an open source multi gpu parallel implementation of the algorithm is also provided the algorithm is designed for environments with at least a single gpu and requires the installation of cuda the algorithm was developed in c 11 with openmp with cuda used for parallelization 2 1 motivation the design of the algorithm is motivated by the following observation given the input matrix a aij where i stands for rows and j for columns consider counting the number of rows with the property that the value in column p is smaller than the value in column q i e k akp akq if the values in the dataset are generated randomly with univariate distribution half of the rows on average are expected to have this property and half are not addition of another column r to the series such that values in this columns are larger than the values in column q i e k akp akq akr should result in another reduction of the number of rows by half thus for data without any signal each addition of a column to the series reduces the number of concordant rows by half on the other hand if the distribution of the data is not uniform and there exists a monotonic relationships between rows in some subset of conditions any addition of the pattern specific column won t eliminate the rows belonging to this pattern thus the algorithm attempts to intelligently manipulate multiple series of columns and assigns higher scores to those series in which column additions do not result in total reduction of the rows the quality of each bicluster is determined by a function called fitness which takes into consideration the number of columns and exponentially the number of rows that follow the monotonically increasing trend represented by each series of columns the design of the fitness function promotes incorporation of new columns to biclusters provided there is a sufficient number of rows matching the trend 1 f b 2 min i 0 j log max i 1 0 if i 1 0 if i 1 1 where is the expected minimal number of rows that should be included within a bicluster b i j with its rows and columns denoted as i and j respectively ebic uses a different representation compared with other evolutionary based biclustering methods divina and aguilar ruiz 2006 mitra and banka 2006 ayadi et al 2012 instead of modeling a bicluster as a tuple with a set of rows and a set of columns biclusters in ebic are represented by a series of column indices the quality of a given series is calculated based on the number of rows that match the monotonous rules present within the series of columns the modification of column series is performed using an ai based technique known as genetic programming gp koza 1992 poli et al 2008 series of columns are expanded only when the rule they impose is matched by sufficient number of rows ebic belongs to the family of hybrid biclustering approaches orzechowski and boryczko 2016 a and features several techniques commonly used in evolutionary algorithms the development of biclusters is driven by simple genetic operations 1 four different types of mutations insertion of a new column to the series fig 1 a deletion of one of the columns from the series fig 1 b swap of two columns within the series fig 1 c and substitution of a column within the series fig 1 d and 2 crossover fig 1 e the individuals that are set to undergo genetic operations are determined using tournament selection to obtain a diverse set of solutions a variant of a technique called crowding is used which limits the probability of selecting those individuals that share columns with those already added to the new generation sareni and krahenbuhl 1998 more specifically the fitness of individuals that take part in a tournament is decreased by the homogeneous penalty of 1 2 where corresponds to the average penalty of using each of the columns separately the explanation for this value of the parameter is provided in supplementary data the described penalty enhances additions to the population individuals with underrepresented columns what highly increases the diversity in population individuals whose overall fitness is the highest are stored in the top rank list which is updated only if a newly found individual does not substantially overlap with an individual in the list during the construction of a new population a variant of a tabu list is used which forbids calculation of the previous biclusters glover 1989 1990 elitism is used to clone ebic 2018 7 27 0 29 page 3 3 3 fig 1 genetic operations in ebic a insertion mutation b deletion mutation c swap mutation d substitution mutation and e crossover a group of the best individuals found so far so that the population is still able to search around local minima to limit the communication overhead a compressed biclusters format cbf is proposed for storing biclusters see fig 2 the format was motivated by compressed row storage crs a popular representation of sparse matrices 0 3 5 1 4 2 4 2 2 3 5 1 4 fig 2 compressed bicluster format cbf uses two arrays the first array determines the starting positions of each of the biclusters while the second one holds indexes of columns of biclusters in this example the population consists of three biclusters individuals 1 4 2 4 2 and 2 3 5 1 4 which start at indices 0 3 and 5 respectively 2 2 ebic algorithm the basic concept of ebic a parallel biclustering algorithm based on artificial intelligence ai is presented in figure 3 the dataset is split into equal chunks of data and distributed across multiple gpus a population of different series of columns is generated on the cpu stored in cbf format and broadcast to multiple gpus each gpu counts the number of rows which match the given series the results are summarized on each gpu and sent back to the cpu in order to calculate fitness which is used later to assess bicluster quality fig 3 overview of ebic after dispatching chunks of the input data to multiple gpus biclusters represented by multiple series of columns and stored in cbf format are broadcast to gpus each gpu calculates the number of how many rows of the chunk match the series imposed by the columns this is used to determine fitness of each bicluster and generate a new set of biclusters step 1 initialization set up gpus divide the dataset proportionally by rows depending on the number of gpus and distribute the data across multiple gpus generate initial population calculate fitness on gpus initialize top rank list by sequentially adding unique non overlapping series of columns with the highest fitness according to 1 step 2 elitism reproduce 1 4 of the best biclusters from the top rank list add them to the new population update penalties for using each column each column addition to the population increases the penalty for using this column step 3 prepare population of biclusters until the population reaches its required size try to generate unique solutions i e that haven t been previously analyzed select each new individual using tournament selection thus select a solution randomly from the previous population and adjust its quality by applying the penalty for similarity with the previously accepted solutions the penalty vartheta is calculated by averaging penalties incurred by selecting each column separately over the number of columns within the series the final penalty is calculated using the value of 1 2 after selecting individuals perform genetic operations crossover and mutation if the solution is novel i e does not belong to the tabu list add it to the population and the tabu list and update penalties for using the solution s columns store the population in compressed biclusters format cbf if the solution was previously analyzed increase the number of tabu list hits if this number is greater than the size of population finish calculations and go to step 6 in order to report the previously found best patterns step 4 calculate quality of biclusters in parallel dispatch the new population i e sets of column series to each of the gpus determine how many rows match each of the series of columns collect the results from multiple gpus and determine the fitness of each bicluster according to 1 step 5 update top rank list sort the population according to fitness try to add new individuals to the top rank list by checking if they do not substantially overlap with records with higher fitness if a bicluster is added remove from the top rank list all records that have lower fitness and substantially overlap with the bicluster after all individuals in the population are checked remove from the top rank list the records that have the lowest fitness until the required size of the top rank list is reached if the maximal number of iterations is not accomplished go back to step 2 step 6 prepare biclusters determine in parallel on each gpu the indices of rows that match each of the series of columns in the top rank list step 7 expansion of biclusters expand the biclusters that have approximate and negative trends output the required number of biclusters or all biclusters from the top rank list 2 3 pattern discovery on synthetic datasets the performance of ebic was evaluated on the benchmark of synthetic datasets from wang et al 2016 and compared to top biclustering methods unibic wang et al 2016 opsm ben dor et al 2003 qubic li et al 2009 isa bergmann et al 2003 fabia hochreiter et al 2010 cpb bozdag et al 2009 and bicspam henriques and madeira 2014 as well as a newly published gpu accelerated biclustering algorithm called condition dependent correlation subgroup ccs bhattacharya and cui 2017 the latter hasn t been benchmarked yet on the established collection of datasets neither synthetic nor genomic the test suite that was used to benchmark the algorithms contains three very popular biclustering problems pattern discovery biclusters overlap and narrow biclusters detection recovery and relevance scores ebic 2018 7 27 0 29 page 4 4 4 orzechowski et al table 1 description of gds datasets dataset genes samples description gds 181 12626 84 large scale analysis of the human transcriptome gds 589 8799 122 multiple normal tissue gene expression across strains gds 1406 12488 87 brain regions of various inbred strains gds 1451 8799 94 toxicants effect on liver pooled and individual sample comparison gds 1490 12488 150 neural tissue profiling gds 2520 12625 44 head and neck squamous cell carcinoma gds 3715 12626 110 insulin effect on skeletal muscle gds 3716 22283 42 breast cancer histologically normal breast epithelium were determined using the jaccard index jaccard 1901 from the bibench package eren et al 2013 specifically 2 and 3 recovery e expected maxf found e f e f 2 relevance f found maxe expected e f e f 3 the first set of problems verifies the ability of the algorithm to identify six different data patterns including trend preserving column constant row constant shift scale and shift scale the tests assess how accurately a biclustering algorithm detects three biclusters of size 15 x 15 implanted within a matrix of size 150 x 100 four biclusters of size 20 x 20 implanted within a matrix of size 200 x 150 and five biclusters of size 25 x 25 implanted within a matrix of size 300 x 200 each problem consists of 5 different datasets for each of 6 patterns which constitute 90 unit tests in total the tests on overlapping patterns measure the ability of the algorithms to detect 5 biclusters of size 20 x 20 implanted within the matrix of size 200 x 150 that overlapped with each other by 0 x 0 3 x 3 6 x 6 and 9 x 9 elements 20 tests in total wang et al 2016 narrow biclusters are biclusters with 100 rows and 10 30 columns implanted within a large matrix of size 1000 x 100 9 tests in total the tests determine whether biclustering methods are capable of discovering patterns that feature multiple rows but only a small number of columns wang et al 2016 to show independence of the results our method was run 10 times on all problems each time a different seed served to initialize a pseudo random number generator which was used to initialize the population in the first iteration 2 4 enrichment analysis on genomic datasets the effectiveness of pattern discovery with ebic was further evaluated on real world gene expression datasets for this purpose bibench software and a benchmark of genetic datasets from eren et al eren et al 2013 were used details of the gene datasets used for the study are presented in table 1 the same procedures of data acquisition preprocessing and analysis were followed thus datasets were downloaded using geoquery davis and meltzer 2007 and preprocessed using pca imputation stacklies et al 2007 after completing biclustering a gene enrichment analysis of each bicluster was performed using the r package gostats falcon and gentleman 2007 biclusters were considered significantly enriched if any of the p values associated with a given go term were lower than 0 05 after benjamini hochberg correction benjamini and hochberg 1995 assessment of the results was based on the proportion of enriched biclusters to all biclusters reported each algorithm was allowed to return no more than 100 biclusters per dataset the number of biclusters found and the proportion of significantly enriched results were compared to the study by wang et al 2016 and are presented in table 2 ebic was tested with two overlap ratios 0 5 and 0 75 3 results the performance of ebic was tested on both synthetic as well as real gene expression datasets synthetic benchmark from wang et al wang et al 2016 is available athttps sourceforge net projects unibic files data result zip for biological validation a well established benchmark from eren et al was used eren et al 2013 with eight genetic datasets the collection of datasets and the results of ebic on both synthetic and genetic datasets could be found in supplementary data 3 1 pattern discovery on synthetic datasets for synthetic datasets ebic was set to stop either after 20 000 iterations or when the number of tabu list hits exceeded the size of the population all parameters were set to their defaults columns of biclusters were allowed to overlap no more than 0 5 and the block size for the cuda kernel was set to 64 this took a reasonable amount of computation time 1 25 minutes on intel core i 7 6950 x cpu with geforce gtx 1070 gpu comparison of the accuracy of ebic with selected biclustering methods in terms of recovery and relevance is presented in fig 4 ccs did not manage to return any result for trend preserving and row and column constant patterns thus the method was excluded from the comparison the ccs algorithm managed to present partial solutions for shift scale and shift scale patterns only the average recovery and relevance scores of ebic are better than those reported by any of the previous methods this difference is especially visible in order preserving and shift scale problems which are considered to be the most biologically meaningful wang et al 2016 ebic managed to detect all patterns perfectly for trend preserving patterns while other methods reached 70 on average the average relevance and recovery rate for shift scale patterns were also much higher as for scale and shift scale patterns ebic attained high recovery relevance scores across all tests 95 2 85 5 for scale and 94 2 84 5 for shift scale patterns although scores for the worst case scenarios were comparable to other methods 75 1 37 8 and 72 0 46 7 respectively ebic may be the first biclustering algorithm capable of detecting all aforementioned patterns with over 90 average recovery and relevance pontes et al 2015 a the recovery relevance scores from multiple runs of the algorithm initialized with different random numbers did not differ statistically ebic was also tested on the datasets provided by bhattacharya et al bhattacharya and cui 2017 and detected biclusters with recovery and relevance scores over 95 whereas ccs reported those scores to vary from approximately 20 to nearly 90 overlapping biclusters the second set of tests compares the deterioration of the accuracy of biclustering algorithms in detecting trend preserving biclusters that overlap with each other this set of problems contains tests of 3 biclusters of size 20 x 20 that overlap with each other by 0 x 0 3 x 3 6 x 6 and 9 x 9 within a matrix of size 200 x 150 each problem is represented by 5 dataset variants resulting in up to 20 tests in total wang et al 2016 the https sourceforge net projects unibic files data result zip ebic 2018 7 27 0 29 page 5 5 5 ebic unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 i trend preserving legend relevance recovery ebic unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 ii col const legend relevance recovery ebic unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 iii row const legend relevance recovery ebic ccs unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 iv shift scale legend relevance recovery ebic ccs unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 v shift legend relevance recovery ebic ccs unibic opsm qubic isa fabia cpb bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 vi scale legend relevance recovery fig 4 comparison of the performance of biclustering algorithms on different types of patterns scores of the algorithms other than ebic and ccs are quoted from wang et al 2016 effect of the overlap on the recovery and relevance of different algorithms is presented in fig 5 all biclustering methods tend to deteriorate if implanted biclusters start to significantly overlap with each other wang et al 2016 the performance of ebic also decreased when the higher level of overlap was considered but the decrease was small the algorithm was still able to maintain recovery and relevance scores close to 90 on the average the second best method was unibic which deteriorated from around 90 for non overlapping biclusters down to 60 recovery and 85 relevance for the most overlapping structures narrow biclusters the last phase of our benchmark considers the detection of narrow biclusters comprising 100 rows and 10 20 30 columns which were implanted within the matrix of size 1000 x 100 each scenario contains 3 variants resulting in up to 9 tests in total the results are presented in fig 6 in contrast to all other algorithms ebic managed much better in this task and discovered almost perfectly all implanted structures for the narrowest biclusters our algorithm was approximately twice as good as the second method dedicated to finding narrow biclusters bicspam unibic was reported to have low accuracy in detecting narrow biclusters within the dataset ccs did not manage to return any bicluster for every dataset in this test noise sensitivity noise sensitivity analysis of ebic may be found in supplementary data tuning of ebic parameters allows the method to be reasonably resistant to up to n 0 0 25 of normally distributed noise summary our general conclusion is that ebic is not only capable of detecting different types of patterns but also different sizes of patterns i e wide or narrow patterns with very high accuracy ebic 2018 7 27 0 29 page 6 6 6 orzechowski et al ebic ccs unibic qubic isa opsm fabia bicspam cpb algorithm 0 0 0 2 0 4 0 6 0 8 1 0 0 x 0 overlap legend recovery relevance ebic ccs unibic qubic isa opsm fabia bicspam cpb algorithm 0 0 0 2 0 4 0 6 0 8 1 0 3 x 3 overlap legend recovery relevance ebic ccs unibic qubic isa opsm fabia bicspam cpb algorithm 0 0 0 2 0 4 0 6 0 8 1 0 6 x 6 overlap legend recovery relevance ebic ccs unibic qubic isa opsm fabia bicspam cpb algorithm 0 0 0 2 0 4 0 6 0 8 1 0 9 x 9 overlap legend recovery relevance fig 5 comparison of the performance of biclustering algorithms in scenarios with different levels of biclusters overlap scores of the algorithms other than ebic and ccs are quoted from wang et al 2016 ebic unibic qubic isa fabia cpb opsm bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 100 x 10 legend relevance recovery ebic unibic qubic isa fabia cpb opsm bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 100 x 20 legend relevance recovery ebic unibic qubic isa fabia cpb opsm bicspam algorithm 0 0 0 2 0 4 0 6 0 8 1 0 100 x 30 legend relevance recovery fig 6 comparison of biclustering algorithm performance in scenarios with narrow biclusters the reference results are quoted from wang et al wang et al 2016 3 2 enrichment analysis on genomic datasets for the genetic datasets it was observed that the proportion of enriched biclusters obtained after approximately 5000 iterations highly depended on the dataset see supplementary data further iterations either improved or worsened the proportion ebic was run for 5000 iterations columns were allowed to overlap by 50 or 75 the results of enrichment analyses are presented in table 2 some memory management issues were encountered with ccs both the sequential and parallel versions the algorithm was unable to detect biclusters in some of the genomic datasets and terminated prematurely with an error after fixing a bug the algorithm even in parallel mode proved to be extremely slow although the dataset was of reasonable size it took over 8 days of computation on cpu gpus to yield results for the most challenging genomic datasets gds 1451 in contrast ebic needed less than 3 minutes to yield higher number of significantly enriched biclusters for this dataset ebic generated the highest percentage of enriched biclusters ebic with a more restrictive overlap ratio 0 5 generated a higher percentage of significantly enriched biclusters 52 4 in comparison to any other method the second best was ccs 43 5 which on the other hand generated much more significantly enriched biclusters ebic with less restrictive overlap 0 75 outperformed all the methods included in our study both in terms of the number and percentage of significantly enriched biclusters ebic generated 20 significantly enriched biclusters more than the second best method 323 vs 303 by ccs more importantly ebic managed to find nearly 11 more significantly enriched biclusters this ebic 2018 7 27 0 29 page 7 7 7 result is noticeable considering that the difference between the second and third best methods was only 2 7 in addition the biclusters returned did not overlap substantially from less than 4 up to 31 depending on the dataset the datasets as well as the results of biological validation of ebic and ccs are available in supplementary data table 2 significantly enriched biclusters found across all gds datasets two overlap thresholds of ebic are considered 0 5 and 0 75 the scores of the algorithms other than ebic and ccs are quoted from wang et al 2016 algorithm found enriched ebic 0 75 589 323 54 8 ebic 0 5 145 76 52 4 ccs 691 303 43 8 unibic 151 62 41 1 opsm 163 48 29 5 qubic 91 34 37 4 isa 217 71 32 7 fabia 80 22 27 5 cpb 96 34 35 4 we reinspected the results of the two best methods ebic 0 75 and ccs after applying a filtering proposed by prelic et al prelic et al 2006 and implemented in eren et al eren et al 2013 the procedure removed biclusters that overlap with the others by over 25 after filtering 296 out of 589 biclusters for ebic remained out of which 122 were found to be significantly enriched 41 2 for ccs 332 out of 619 remained and only 113 were marked as significantly enriched 34 0 we eschewed testing the other methods as their number of significantly enriched biclusters before the filtering procedure was even applied was lower than the one for ebic or ccs after applying the procedure 3 3 scalability of the algorithm in order to assess the scalability of the methods five datasets with 100 columns and different numbers of rows ranging between 5000 and 25000 were generated times were averaged based on five runs of the methods on each of the datasets with their default parameters the algorithms were allowed to yield up to 100 biclusters all tests were performed on a machine with an intel coretm i 7 6950 x cpu and 64 gb of ram comparison of run times in logarithmic scale is presented in fig 7 starting with 10 000 rows ebic began to run faster than both ccs and unibic the most precise methods so far for problems with 25 000 rows ebic was over 12 times faster than unibic and over 20 times faster than ccs with increasing data size the running times of ebic have started to be comparable with ones from opsm and isa the actual performance of ebic for larger datasets on multiple gpus requires further investigation a complexity analysis of ebic can be found in supplementary data 4 discussion ebic is one of the very few parallel biclustering methods dedicated for multi gpu environments in comparison with state of the art algorithms ebic exhibited a number of advantages 1 ebic outperformed the state of the art biclustering algorithms on established synthetic datasets ebic was the only algorithm to discover each of six types of major genetic patterns in synthetic datasets with over 95 average accuracy and the only one to maintain over 90 accuracy on narrow and overlapping biclusters 2 ebic found over 11 more significantly enriched biclusters than the second best method ccs on a benchmark of 8 genomic datasets over 5000 10000 15000 20000 25000 number of rows 0 2 4 6 8 10 r u n n in g t im e lo g s fabia cpb opsm isa ebic unibic ccs fig 7 comparison of running time of the algorithms on datasets with 100 columns and varying numbers of rows 7 more after removing overlapping biclusters 3 ebic yielded far more significantly enriched biclusters than any of the methods even after removing overlapping biclusters 4 ebic proved to be over 12 times faster than any of the most accurate methods ccs or unibic on the largest datasets we would like to formulate the requirements for the next generation of biclustering methods such algorithms are expected to meet the following criteria 1 be capable of discovering the six major types of biclusters discussed above with high accuracy over 75 on average 2 be capable of handling overlapping narrow and approximate patterns with similar accuracy 3 provide meaningful solutions for both synthetic and real datasets 4 be scalable in contrast to other methods described in this paper ebic with its average accuracy exceeding 90 certainly meets these requirements and could be called a next generation biclustering method ebic has certain limitations first the closer the overlap threshold to 0 ebic may no longer be able to capture different series that are present within the same columns instead this series of columns which is represented by the largest number of rows will incorporate all other permutations the reason for this is construction of top rank list for performance purposes the list uses intersection of columns as the merging criterion what makes the actual order of columns within the series irrelevant a full overlap of biclusters within the top rank list is possible but discouraged secondly application of ebic to datasets that have fewer than 20 columns is discouraged in this case an exhaustive search guarantees discovery of all meaningful patterns in a much shorter time thirdly the overlap degree of biclusters for a dataset requires verification tuning the parameters of the method may decrease the level of overlaps a more restrictive overlap threshold 0 5 allows the algorithm to detect fewer biclusters with less overlapping columns while a less restrictive overlap threshold 0 75 returns more biclusters at the cost of their overlap the degree of biclusters overlap cannot be directly controlled in ebic the guidelines for the exact number of iterations to run ebic as well as the optimal level of overlap on biclusters in the top list need to be empirically defined ebic scores do not seem to improve with every iteration the accuracy of pattern detection generally improves over time for synthetic datasets but this did not hold for real genomic datasets the highest proportion of significantly enriched biclusters oscillated or even slightly deteriorated for real world genetic datasets after 100 iterations for all genomic datasets ebic was stopped after 5 000 iterations as it seemed to be a reasonable compromise between the percentage of enriched results and run time additional study on the influence of the size of the input matrix on the number of required iterations is needed ebic 2018 7 27 0 29 page 8 8 8 orzechowski et al our initial tests using larger volumes of data indicate that the algorithm supports datasets of up to 60 k rows per gpu full scalability of ebic and preparing the algorithm for big data challenges requires more work 5 conclusions ebic is anticipated to become a reference method for future studies in biclustering ebic may also prove beneficial in other domains beyond genomics the method may improve pattern detection in multiple other fields e g medicine applied informatics economics biology or chemistry in which biclustering has been previously successfully applied extensive ai method development is necessary to fully realize the potential of ai for solving the most challenging big data problems authors contribution p o conceived the study designed and implemented the algorithm p o and j h m performed the analysis m s and x h consulted the project analyzed the results and participated in writing the manuscript j h m oversaw the project acknowledgements this research was supported in part by pl grid infrastructure and by national institutes of health grants lm 012601 tr 001263 and es 013508 references ayadi w ma touk o and bouziri h 2012 evolutionary biclustering algorithm of gene expression data in database and expert systems applications dexa 2012 23 rd international workshop on pages 206 210 ieee ben dor a chor b karp r and yakhini z 2003 discovering local structure in gene expression data the order preserving submatrix problem j comput biol 10 3 4 373 384 benjamini y and hochberg y 1995 controlling the false discovery rate a practical and powerful approach to multiple testing journal of the royal statistical society series b methodological pages 289 300 bergmann s ihmels j and barkai n 2003 iterative signature algorithm for the analysis of large scale gene expression data physical review e 67 3 031902 bhattacharya a and cui y 2017 a gpu accelerated algorithm for biclustering analysis and detection of condition dependent coexpression network modules scientific reports 7 1 4162 bozdag d parvin j d and catalyurek u v 2009 a biclustering method to discover co regulated genes using diverse gene expression datasets in s rajasekaran editor bioinformatics and computational biology pages 151 163 berlin heidelberg springer berlin heidelberg busygin s prokopyev o and pardalos p m 2008 biclustering in data mining computers operations research 35 9 2964 2987 cheng y and church g m 2000 biclustering of expression data in proceedings of the eighth international conference on intelligent systems for molecular biology pages 93 103 aaai press ching t himmelstein d s beaulieu jones b k kalinin a a do b t way g p ferrero e agapow p m zietz m hoffman m m xie w rosen g l lengerich b j israeli j lanchantin j woloszynek s carpenter a e shrikumar a xu j cofer e m lavender c a turaga s c alexandari a m lu z harris d j decaprio d qi y kundaje a peng y wiley l k segler m h s boca s m swamidass s j huang a gitter a and greene c s 2018 opportunities and obstacles for deep learning in biology and medicine journal of the royal society interface 15 141 davis s and meltzer p s 2007 geoquery a bridge between the gene expression omnibus geo and bioconductor bioinformatics 23 14 1846 1847 divina f and aguilar ruiz j s 2006 biclustering of expression data with evolutionary computation ieee transactions on knowledge and data engineering 18 5 590 602 dolnicar s kaiser s lazarevski k and leisch f 2012 biclustering overcoming data dimensionality problems in market segmentation journal of travel research 51 1 41 49 eren k deveci m k ktun o and ataly rek v 2013 a comparative analysis of biclustering algorithms for gene expression data briefings in bioinformatics 14 3 279 292 falcon s and gentleman r 2007 using gostats to test gene lists for go term association bioinformatics 23 2 257 258 glover f 1989 tabu search part i orsa journal on computing 1 3 190 206 glover f 1990 tabu search part ii orsa journal on computing 2 1 4 32 hartigan j a 1972 direct clustering of a data matrix journal of the american statistical association 67 337 123 129 henriques r and madeira s c 2014 bicspam flexible biclustering using sequential patterns bmc bioinformatics 15 1 130 hochreiter s bodenhofer u heusel m mayr a mitterecker a kasim a khamiakova t sanden s v lin d talloen w et al 2010 fabia factor analysis for bicluster acquisition bioinformatics 26 12 1520 1527 jaccard p 1901 tude comparative de la distribution florale dans une portion des alpes et des jura bull soc vaudoise sci nat 37 547 579 koza j r 1992 genetic programming on the programming of computers by means of natural selection volume 1 mit press lazzeroni l and owen a 2002 plaid models for gene expression data statistica sinica 12 1 61 86 li g ma q tang h paterson a h and xu y 2009 qubic a qualitative biclustering algorithm for analyses of gene expression data nucleic acids research 37 15 e 101 e 101 madeira s c and oliveira a l 2004 biclustering algorithms for biological data analysis a survey computational biology and bioinformatics ieee acm transactions on 1 1 24 45 mirkin b 1996 mathematical classification and clustering mitra s and banka h 2006 multi objective evolutionary biclustering of gene expression data pattern recognition 39 12 2464 2477 morgan j n and sonquist j a 1963 problems in the analysis of survey data and a proposal journal of the american statistical association 58 302 415 434 orzechowski p 2013 proximity measures and results validation in biclustering a survey in l rutkowski m korytkowski r scherer r tadeusiewicz l a zadeh and j m zurada editors artificial intelligence and soft computing pages 206 217 berlin heidelberg springer berlin heidelberg orzechowski p and boryczko k 2016 a hybrid biclustering algorithms for data mining in g squillero and p burelli editors applications of evolutionary computation pages 156 168 cham springer international publishing orzechowski p and boryczko k 2016 b propagation based biclustering algorithm for extracting inclusion maximal motifs computing informatics 35 2 padilha v a and campello r j 2017 a systematic comparative evaluation of biclustering techniques bmc bioinformatics 18 1 55 ebic 2018 7 27 0 29 page 9 9 9 poli r langdon w b mcphee n f and koza j r 2008 a field guide to genetic programming lulu com pontes b gir ldez r and aguilar ruiz j s 2015 a biclustering on expression data a review journal of biomedical informatics 57 163 180 pontes b girldez r and aguilar ruiz j s 2015 b quality measures for gene expression biclusters plos one 10 3 e 0115497 prelic a bleuler s zimmermann p wille a b hlmann p gruissem w hennig l thiele l and zitzler e 2006 a systematic comparison and evaluation of biclustering methods for gene expression data bioinformatics 22 9 1122 1129 sareni b and krahenbuhl l 1998 fitness sharing and niching methods revisited ieee transactions on evolutionary computation 2 3 97 106 stacklies w redestig h scholz m walther d and selbig j 2007 pcamethods a bioconductor package providing pca methods for incomplete data bioinformatics 23 9 1164 1167 wang z li g robinson r w and huang x 2016 unibic sequential row based biclustering algorithm for analysis of gene expression data scientific reports 6 1 introduction 2 methods 2 1 motivation 2 2 ebic algorithm step 1 initialization step 2 elitism step 3 prepare population of biclusters step 4 calculate quality of biclusters in parallel step 5 update top rank list step 6 prepare biclusters step 7 expansion of biclusters 2 3 pattern discovery on synthetic datasets 2 4 enrichment analysis on genomic datasets 3 results 3 1 pattern discovery on synthetic datasets overlapping biclusters narrow biclusters noise sensitivity summary 3 2 enrichment analysis on genomic datasets 3 3 scalability of the algorithm 4 discussion 5 conclusions