programming for all understanding the nature of programs andrej brodnik 1 2 0000 0001 9773 0664 andrew csizmadia 3 0000 0002 9779 055 x gerald futschek 4 0000 0001 7255 2531 lidija kralj 5 0000 0001 5750 6123 violetta lonati 6 0000 0002 4722 244 x peter micheuz 7 0000 0002 4722 244 x and mattia monga 7 0000 0003 4852 0067 1 university of primorska koper slovenia 2 university of ljubljana slovenia 3 newman university birmingham united kingdom 4 tu wien institute of information systems engineering vienna austria 5 udruga suradnici u uc enju croatia 6 universita degli studi di milano milan italy abstract computer programs are part of our daily life we use them we provide them with data they support our decisions they help us remember they control machines etc programs are made by people but in most cases we are not their authors so we have to decide if we can trust them programs enable computers and computer controlled machines to behave in a large variety of ways they bring the intrinsic power of computers to life programs have a variety of properties that all citizens must be aware of due to the intangible nature of programs most of these properties are very unusual but important to understand the digital world in this position paper we describe the nature of programs in the form of knowledge statements accompanied by examples from everyday life to clarify their meaning everything is formulated in an easily understandable manner and avoids obscure technical language we suggest that these knowledge statements must be imparted to all teachers and school students a great way to learn and experience the nature of programs is to develop programs yourself keywords nature of programs nature of computer science comput ing education 1 introduction the expression nature of programs nop in the title draws inspiration from nature of science nos 10 a similar expression born in the 70 s that refers to the fundamental characteristics of science knowledge and scientific inquiry as derived from how it is produced a necessary knowledge to make informed deci sions with respect to the ever increasing scientifically based personal and societal issues nos is a significant component of scientific literacy and it is argued that nos cannot be learned simply by studying science concepts or attending science ar x iv 2 11 1 04 88 7 v 2 cs c y 4 d ec 2 02 1 labs but it must be addressed explicitly with active reflective practice and dis cussions among students in their learning contexts 7 this also implies that teachers should have a shared accurate view of nos and agree that nos needs to be taught and assessed explicitly 10 informatics 7 differs from the natural science in many aspects at least because its objects are artificial and not natural and has indeed many peculiarities that ask for a specific approach in education however despite the numerous initiatives aiming at popularizing informatics and introducing it in educational systems there is no clear agreement of what the nature of computer science is and the debate on this topic doesn t seem to attract nowadays much interest in our community some very significant contributions on this topic appeared in the 80 90 s 12 4 15 but they need an actualization if nothing else because they refer to a time where digital devices had a much less relevant role in society than today a recent review of the positions on this issue can be found in 11 the centrality of programming in informatics can be found also in most computing education initiatives which indeed often include some type of pro gramming activity mainly under the term coding one can even argue that for many teachers computer science is a just a synonym for coding 14 another fundamental component of computing education revolves around the computa tional thinking idea 17 even if there is no clear definition for this expression either this idea concerns the ability to address problems in a way that enables us to use a computer and other tools to help solve them 6 this includes also the ability to represent organize and logically analyze data and to automatize solutions through algorithmic thinking all skills that have a fundamental role also in the process of designing programs however the full understanding of what the nop is might not be a natural learning outcome of informatics activities similarly as it was shown for the nos 7 for instance practicing coding in a visual programming environment does not imply that students are able to recognize that the programs they write have the same nature as the apps they use on their mobile phones similarly unplugged activities aimed at developing computational thinking skills might be perceived as disconnected from the use of digital devices in everyday life 13 9 on the contrary we claim that understanding the nop is a critical component of the computing literacy culture and should be one of the main outcome of computing education alongside with the development of problem solving and computational thinking skills moreover we think it should be a core part of any effort to bring digital competences to the masses like 16 1 and even more so of the initiatives aimed at the inclusion of informatics as a foundational discipline in schools 2 5 in section 2 we discuss the nop then in section a we present a series of knowledge statements that aim at providing a summary about the nature of programs and are targeted to the general public starting with teachers and 7 in this paper we use the terms informatics preferred and computer science as synonyms 2 students finally section 4 concludes the paper with a summary of our position and hints for future work 2 programming programs and the nature of programs in fact the nop makes them distinct from any other human artifacts indeed one can recognize three different facets of programs first they are real entities in that they affect our everyday lives in the same way as physical or political reality does 8 next they are concrete artifacts in that they are written encoded stored on some digital device finally they are abstract entities that manipulate abstract entities data and data structures thus understanding nop includes grasping the relation between a program and its interpretation by a computing device being aware of the the duality of instructions and data accepting the need for and the power of extreme precision and unambiguity and the unavoidable abstraction involved in computational problems let s precise better the three facets of programs and why it is important to grasp them all programs are real entities this is probably the most obvious aspect that no one can really ignore as famously stated by larry lessig nowadays code is law 8 and it is one of the main forces that shapes are daily life and yet programs are designed by some to be used by many the goals the values of the designers are brought into the reality by their translation into algorithms programs systems indeed programs are usually created with the purpose of helping in the execution of tasks or the solution of problems more precisely they are designed to automatize the execution of tasks or the solution of problems this is the prevailing facet of programs from the point of view of their users when using an app on a mobile device or using a piece of software on a personal computer the users see the program as a useful tool that has impact on the reality of their job or personal life this facet is central when talking about digital competences 16 1 where the core is indeed in the ability to use programs for one s own goals programs are also concrete artifacts in that they are written encoded and stored to use them one has to have access to them clearly the concrete nature of programs is different from the nature of physical artifacts in that programs are intangible for instance it s in principle very easy to make copies of programs and modifications can be also cheap or even unconscious or malicious we use term software for a reason thus programs take up space in the memory of digital devices they can be deleted they can be corrupted and checking their integrity requires special cautions very different from those that are necessary for checking physical integrity moreover a program by its nature needs an interpreter to be enacted finally there is the facet of programs that programmers and computer sci entists typically deal with and know the most but the general public often tend to ignore programs are abstract entities it is indeed very difficult to appreciate the consequences of this without having any acquaintance with the activities 3 involved in programming indeed good programs are able to capture their users in the abstract world they create and the relationship with reality becomes hid den enough without an explicit effort of trying to understand why something is designed in a given way programs are descriptions that must be expressed using the formal rigorous language the programming languages that the automatic interpret is able to follow moreover they manipulate abstract entities namely data and data structures even though these abstract entities do model real entities in general when modeling them it is necessary to make key choices sim plifying and distorting reality to make the automatic processing of information possible or feasible the process of creating programs is called programming unfortunately for many educators and the general public programming boils down to coding i e writing instructions in a programming language however programming is a much more complex and rich process it consists of designing and developing a sequence of instructions that a computing device is able to execute in order to solve automatically a given problem or perform a given task designing and de veloping involve 3 p 3 analysis and understanding of problems identifying and evaluating possible solutions generating algorithms implementing solutions in the code of a particular programming language testing and debugging 3 knowledge statements to describe nop in more details we identify several phases or steps in program development and its use reflecting on the development phases of programs and their use we created and curated a list of knowledge sentences which we grouped into five knowledge areas 1 the area algorithms covers the modeling of real problems as computational problems the design and evaluation of their computational solutions and related complexity and computability issues 2 the area programs are made of instructions concerns the fact that an al gorithm needs to be translated into a programming language the artifact resulting from this translation is the actual program which is understood and can be executed by the automatic interpreter 3 relation between data and program area addresses how programs process abstract data to get output data from input data the relationship between data and the information they represent and ultimately their dual nature of being program and data at the same time 4 in programs are running on computers area the focus is on the distinction between software programs and hardware computing devices and the role of programs in the use of computing devices 5 finally program execution area is about the execution of programs on a computing device and the effects its execution causes including possibly malicious effects caused by malware or errors 4 in the rest of this section we limit ourselves to a sample of statements from different areas with examples that exemplify them the full list of all sentences including sample skills and attitudes is in the appendix knowledge area algorithms knowing that to solve a real world problem on a computer it has to be modeled first in the digital world as a computational problem computational twin example to create a method to find a path through a hedge maze it is advisable to reduce the maze to its essential elements that are important for finding a way out so the kind of hedge its height the length and form of the paths etc are not relevant relevant for the model is the structure of the maze i e which walls are connected to each other and which part of walls are outside the maze the computational problem is to find a wall that is outside the maze knowledge area programs are made of instructions knowing that programming languages provide structures that al low program instructions to be executed in sequence repeatedly or only when a certain condition is met example for instance in a video game a sprite moves around when it moves it first makes a step with the left foot one program instruction and then a step with the right foot the second program instruction the double step represents a sequence of two program instructions further when the sprite has to move for 10 double steps it can do this with ten repetitions of the above sequence moreover during its move if the sprite bumps into a wall it cannot make a step to detect the wall it checks the wall detect condition knowledge area relation between data and program being aware that the data e g numbers text images sounds has to be properly digitized digitally encoded so that it can be processed by a program example a picture can be digitized as a grid of color dots each color can be modeled as a combination of three basic colors and therefore a color dot is encoded as a triplet of numbers indicating the brightness of the basic colors the rgb model uses red green and blue as basic colors knowledge area programs are running on computers knowing that computers consist of hardware and software 5 example we want to play a computer game in the first situation we have a gaming device which is just a piece of hardware when we switch it on it loads and runs a piece of software like our gaming application and only then can we play the game on the other hand in the second situation we can have a computer game software on our memory stick until the memory stick is plugged into the device piece of hardware and the device loads the computer game from the memory stick and runs it we can not play the game either from the above examples we conclude that we need both hardware and software to play the game computer programs enable computers and computer driven devices to fulfill a wide range of tasks but everybody should be aware that also the power of programs is limited we mention here as examples two knowledge statements that are related to the limitation of problem solving by a computer program the first statement captures the limits of finding an exact solution to a given problem knowledge area algorithms knowing that exact solutions to problems may not exist or may not be known or may require too much time to be computed they are in practice replaced by approximate solutions this is most likely the case with artificial intelligence ai applications example 1 since a navigation system cannot calculate the exact arrival time in advance because there are many unknown influence factors e g changing traffic conditions congestion it estimates the approximate ar rival time example 2 since in some cases it would take too much time for a chess computer to compute the best move it makes an estimation of the best move to make example 3 in ai and machine learning deep neural network programs are a frequent approach used for sentiment emotion recognition from images of faces however the recognised sentiment is only the best guess the algorithm can make the second statement exemplifies limitation related to the fact that programs are programmed by humans everybody should be aware that malfunction of computer systems can also be provoked by either the misbehaviour or computer programmer s mistakes knowledge area program execution 6 being aware that program execution can result in a computer sys tem malfunction leaking of information or damage and this may be intentional by the design of the programmer e g viruses or malware or unintentional as a consequence of programmer s er ror be aware that programs have to be updated to protect the computer system example 1 it happens sometimes to us that our text editing program used to frequently crash and we lost the result of our work after the program upgrade this never happened again example 2 also it can happen to us that after opening an email with a meaningless attachment we forget about the message after a while we get a message from a local pizza store complaining that we are trying to break into their system for placing orders it turned out that the meaningless attachment was a program specifically designed to install on our computer a special program permitting malicious operators to use our computer in attacking the local pizzeria because the program was using a flaw in the design of the operating system installed on our computer system the problems went away after an update of our computer system to wrap up in this section we presented five knowledge areas crucial to understanding the nature of programs and programming the areas were illus trated with a few knowledge sentences to give the reader an idea about them the list of sentences in each area is longer and covers all relevant aspects to understand the nature of programs 4 conclusions a competent and well informed citizen of the digital world has to understand the nop which encompasses the many properties of programs everyone has to be aware of therefore also in the k 12 computing education the understanding of nop must be explicitly addressed together with computational thinking and problem solving skills in order to elicit the nop and make it accessible to the general public we wrote a series of knowledge statements describing the properties of programs reflecting the development of programs and their use we grouped the statements into five knowledge areas to illustrate the statements in this position paper we presented a sample of them through real cases we claim that in order to understand the nop hence perceiving all the facets that characterize programs one needs to experience some programming activi ties first hand this must include both coding and activities related to the more abstract aspects as algorithms and data representation as mentioned in sec tion a note however that programming activities alone might not be sufficient and active reflections about the nop should also be fostered in educational con texts this clearly brings into question the need 1 to find the appropriate ways 7 to make students appreciate the nop and 2 to properly train teachers so that they acquire a correct understanding of the nop themselves fully grasping the nop is essential for anyone in order to become digitally conscious to make sense of the digital world and ultimately to act proactively and creatively in it references 1 carretero s vuorikari r punie y digcomp 2 1 the digital competence framework for citizens with eight proficiency levels and examples of use joint research centre european commission european union 2017 2 csforall computer science for all https www csforall org last accessed on july 2021 3 dagiene v hromkovic j lacher r designing informatics curriculum for k 12 education from concepts to implementations informatics in education 2021 https doi org 10 15388 infedu 2021 22 4 denning p j comer d e gries d mulder m c tucker a turner a j young p r computing as a discipline computer 22 2 63 70 1989 5 informatics for all coalition informatics for all https www informaticsforall org last accessed on july 2021 6 international society for technology in education iste computer science teachers association csta operational definition of computational think ing for k 12 education 2011 https cdn iste org www root computational thinking operational definition iste pdf 7 lederman n g nature of science past present and future in handbook of research on science education pp 845 894 routledge 2013 8 lessig l code is law harvard magazine 1 2000 https www harvardmagazine com 2000 01 code is law html 9 lonati v malchiodi d monga m morpurgo a is coding the way to go in brodnik a vahrenhold j eds 8 th international conference on in formatics in schools situation evolution and perspective lncs vol 9378 pp 165 174 springer international publishing switzerland september 2015 https doi org 10 1007 978 3 319 25396 1 15 10 national science teachers association nature of science jan 2020 https www nsta org nstas official positions nature science 11 rapaport w philosophy of computer science 2020 https cse buffalo edu rapaport papers phics pdf 12 shaw m the nature of computer science in the carnegie mellon curriculum for undergraduate computer science pp 7 12 springer 1985 13 taub r armoni m ben ari m cs unplugged and middle school students views attitudes and intentions regarding cs acm trans comput educ 12 2 apr 2012 https doi org 10 1145 2160547 2160551 14 tissenbaum m ottenbreit leftwich a a vision of k 12 computer science education for 2030 commun acm 63 5 42 44 apr 2020 https doi org 10 1145 3386910 15 turkle s papert s epistemological pluralism styles and voices within the com puter culture signs journal of women in culture and society 16 1 128 157 1990 16 vuorikari r punie y carretero s van den brande l digcomp 2 0 the digital competence framework for citizens joint research centre european com mission european union 2016 8 https www csforall org https doi org 10 15388 infedu 2021 22 https www informaticsforall org https cdn iste org www root computational thinking operational definition iste pdf https cdn iste org www root computational thinking operational definition iste pdf https www harvardmagazine com 2000 01 code is law html https www harvardmagazine com 2000 01 code is law html https doi org 10 1007 978 3 319 25396 1 15 https www nsta org nstas official positions nature science https www nsta org nstas official positions nature science https cse buffalo edu rapaport papers phics pdf https cse buffalo edu rapaport papers phics pdf https doi org 10 1145 2160547 2160551 https doi org 10 1145 3386910 17 wing j m computational thinking communications of the acm 49 3 33 35 2006 a knowledge areas five knowledge areas are 1 the area algorithms covers the modeling of real problems as computational problems the design and evaluation of their computational solutions and related complexity and computability issues 2 the area programs are made of instructions concerns the fact that an al gorithm needs to be translated into a programming language the artifact resulting from this translation is the actual program which is understood and can be executed by the automatic interpreter 3 relation between data and program area addresses how programs process abstract data to get output data from input data the relationship between data and the information they represent and ultimately their dual nature of being program and data at the same time 4 in programs are running on computers area the focus is on the distinction between software programs and hardware computing devices and the role of programs in the use of computing devices 5 finally program execution area is about the execution of programs on a computing device and the effects its execution causes including possibly malicious effects caused by malware or errors in the rest of the section we discuss each of the knowledge areas in detail for each area we give a list of knowledge sentences with an additional exaplanation where necesary the lists are accompanied with lists of skills and attitudes a 1 algorithms knowlede sentences k 1 1 knowing that to solve a real world problem on a computer it has to be modeled first in the digital world as a computational problem computational twin explanation o create a method to find a path through a hedge maze it is advisable to reduce the maze to its essential elements that are important for finding a way out so the kind of hedge its height the length and form of the paths etc are not relevant relevant for the model is the structure of the maze i e which walls are connected to each other and which part of walls are outside the maze the computational problem is to find a wall that is outside the maze 9 k 1 2 knowing that an algorithm represents a solution to a computa tional problem explanation a well known algorithm to find a way through any hedge maze that is enter a hedge maze and exit it at the end is the wall follower algorithm if one enters a hedge maze then all the walls that are connected to each other at the left side of the entrance can be walked around by simply following the walls on the left side of our walk as the wall on the left side of the entrance is an outside wall and since all walls are connected walking around them will definitely bring us out again this simple approach finds a way through any possible hedge maze so it is an algorithmic solution to a computational problem of maze traversal k 1 3 knowing that various problem solving strategies are used to devise and design algorithms explanation when we play cards we want to have them ordered in our hand one way to order them is to first pick up the smallest card and put it on the left then pick up the second smallest and put it next to it and so on this is an example of a greedy strategy the same strategy works for other completely different problems for example when a cashier wants to give us back change in as few coins as possible other well known problem solving strategies are divide and conquer depth first search breadth first search k 1 4 knowing that an algorithm is presented in a form that is language independent but permits a judgment of its correctness that it does what it is supposed to do and efficiency how efficiently it solves the problem explanation we have a shuffled deck of cards and we wonder if the queen of spades is in it we do this by checking each card in the deck in order until we find it or we run out of cards this algorithm can be presented e g in the form of a flowchart or pseudo code these representations cannot be executed by a computer but they should be exact enough that one may judge its correctness and efficiency on one hand we can judge that the algorithm will always find the searched for card as it checks all cards in the deck on the other hand to measure the efficiency of the algorithm we count the number of cards we check the number of cards 10 we check depends on how soon we find the queen but we will never check more cards than there are in the deck note that if the deck is not shuffled but already ordered we can design a more efficient algorithm to find the queen of spades k 1 5 knowing that an algorithm requires time and space hardware re sources to solve a problem depending on the problem s size explanation an algorithm that calculates the sum of an arbitrary se quence of values may start with the first one then add one value at a time the time this algorithm needs depends on the number of values in the sequence while the space that is memory it needs has to be sufficient to record the sum k 1 6 knowing that computational problems a may be solved by different algorithms explanation if we are looking for the queen of spades in an ordered deck of cards we can search for it by inspecting one by one each card in the deck as explained above a completely different algorithm could first inspect the card in the middle of the deck and if it is smaller than the queen of spades it proceeds with a search in the upper part of the deck which is just half of the size of the original deck otherwise the middle card is smaller than the queen of spades it proceeds in the lower part of the deck the algorithm simply repeatedly applies the same approach until it finds the queen or runs out of the deck b exist that cannot be solved in a reasonable time even for their mod est size explanation a very impressive example is a puzzle like the one shown in fig 1 the player gets the image cut into several pieces and she must rebuild these pieces into one image in which all beavers fit in the above picture the colour of the beavers brown red blue and green and the top and the bottom part of the head must match the 3 x 3 puzzle is not easy to solve for humans a 5 x 5 puzzle is practically impossible to solve a 7 x 7 puzzle of this kind is even for the fastest available computers out of reach except by chance 11 fig 1 move pieces to get beavers c exist that cannot be solved in principle no matter how fast the ma chine is or how smart the algorithm designer is explanation peter is a teacher of computer science and he wants to check that the programs submitted by the students are correct therefore he wants to write a program that could check for any other program whether it is correct or not correct unfortunately such a program cannot be written in principle there are other computational problems that are also not solvable in principle e g automatic checking for any program whether it is harmful to our computer malware finding all errors in any given computer program automatically writing a program for any given computational problem k 1 7 knowing that exact solutions to problems may not exist or may not be known or may require too much time to be computed they are in practice replaced by approximate solutions this is most likely the case with artificial intelligence ai applications explanation since a navigation system cannot calculate the exact ar rival time in advance because there are many unknown influence factors e g changing traffic conditions it estimates the approximate arrival time 12 since in some cases it would take too much time for a chess computer to compute the best move it makes an estimation of the best move to make in ai and machine learning deep neural network programs are a frequent approach used for sentiment recognition from images of faces however the recognised sentiment is only the best guess the algorithm can make skills s 1 1 being able to write down instructions to sort a deck of cards s 1 2 given an algorithm that reads up to three numbers makes different calculations and prints the result at the end being able to determine what will be printed when given input numbers are entered s 1 3 given a set of algorithm blocks being able to combine them to solve a more complex problem s 1 4 given an algorithm with a single loop that sometimes runs forever being able to describe conditions when this happens s 1 5 having two algorithms that find a card in a sorted deck of cards being able to argue which of them requires more steps attitude a 1 1 appreciating the benefits of using algorithms in daily life a 1 2 valuing positive and negative aspects of decision making algo rithms a 1 3 developing a critical awareness that algorithms are the humanly made blueprint of programs 13 a 1 4 willing to accept an algorithm may not be perfect in solving the underlying problem a 1 5 feeling comfortable with decomposition of tasks a 2 programs are made of instructions knowlede sentences k 2 1 knowing that a computer program is written by humans according to strict rules in a programming language explanation when programmers write a program they need to know and stick to the rules of the programming language they are using for instance to display hello europe on the screen the rules in python require us to write print hello europe whereas the rules in php require us to write echo hello europe and the rules in blockly require to combine the following blocks on the contrary the following writing print hello europe does not respect python rules because the parentheses are not properly matched in visual programming environments like blockly the shapes of blocks make the rules of the language visible and prevent the programmer from breaking the rules if the combination of two blocks is not allowed their shapes prevent them from being connected for instance we cannot di rectly connect the blocks depicting numbers 12 and 33 together how ever the language rules allow you to combine them for example using an operator block 14 k 2 2 knowing that there are different kinds of instructions and that there are many programming languages each providing a different set of program instructions explanation there are program instructions that display something on a screen read data from a touchscreen calculate values store values in memory etc other specific instruction can be provided by special ized languages r language provides program instructions to support statistical analysis of data php provides program instructions to cre ate interactive webpages and scratch provides program instructions to display sprites move them and make them interact with each others as in a video game or a movie k 2 3 knowing that programming languages provide structures that al low program instructions to be executed in sequence repeatedly or only when a certain condition is met explanation for instance in a video game a sprite moves around when it moves it first makes a step with the left foot one program instruction and then a step with the right foot the second program instruction the double step represents a sequence of two program instructions further when the sprite has to move for 10 double steps it can do this with ten repetitions of the above sequence moreover during its move if the sprite bumps into a wall it cannot make a step to detect the wall it checks the wall detect condition k 2 4 knowing that a programmer has to be aware of what program in structions do but not necessarily how they do it 15 explanation if a python programmer wants to print text hello europe on the screen she uses the program instruction print hello europe after this the programmer needs not to worry about what needs to hap pen in order for the text to appear on the screen k 2 5 knowing that new instructions can be created from existing in structions to perform a specific task explanation in blockly or in many other programming languages we can create a new program instruction that draws a square from now on we can use the new program instruction as any other program instruction in our program a new program instruction created by a programmer is called differently in different programming languages function subrou tine macro procedure etc most programming languages permit created program instructions to be packed into libraries which can be shared among programmers and provide ready made program instructions skills s 2 1 being able to make changes in a formal description of a procedure explanation being able to modify or complete a simple program written in a visual programming language s 2 2 giving a procedure described in a formal way being able to recog nize which kind of information it processes explanation given a simple program written in a known programming language being able to identify if it processes numerical data images point coordinates or something else s 2 3 giving a procedure described in a formal way being able to recog nize the flow of information that is how information is processed explanation given a simple program written in a known programming language and a given input being able to find out what the output will be 16 s 2 4 being able to detect possible problems in a formal description of a procedure explanation being able to reproduce the error of a program and perform simple debugging being able to identify and describe the conditions under which the program written in a known programming language does not behave as desired attitude a 2 1 developing the awareness that the responsibility of software fail ures should be attributed to the software developers a 2 2 not being afraid to try to understand the source code of a program a 2 3 discussing and discovering if two different sequences of instruc tions give the same result a 2 4 appreciating the possibility and value of creating new instructions explanation new instructions can for example be functions a 2 5 developing an appreciation for expressing actions and conditions precisely and unambiguously even in natural language descriptions a 3 relation between data and program knowlede sentences k 3 1 knowing that programs produce results depending on input data and that different input data usually yields different output data explanation in a navigation system the input is a destination location and the output is a route to it different input destinations yield different output routes 17 k 3 2 being aware that the data e g numbers text images sounds has to be properly digitized digitally encoded so that it can be processed by a program explanation a picture can be digitized as a grid of color dots each color can be modeled as a combination of three basic colors and therefore a color dot is encoded as a triplet of numbers indicating the brightness of the basic colors the rgb model uses red green and blue as basic colors k 3 3 being aware that there is a difference between data and informa tion in that data has no intrinsic meaning and gives information only when interpreted by humans in the context of the problem being solved explanation data 42 can be interpreted as a temperature if it occurs in a sentence like today is 42 c degree or as an age if it occurs in a sentence like i m 42 years old or as the answer to the ultimate question of life the universe and everything if it is said by douglas adams k 3 4 knowing that input data models information that is relevant to the problem statement and output data provide information relevant to its solution explanation in the context of a translation program the input word or sentence models the meaning that the word resp sentence has in the source language and the output data models the meaning of the word resp sentence in the destination language k 3 5 knowing that a program itself is data explanation when installing an application we download data that is later executedby the machine as a program skills 18 s 3 1 being able to identify input and output data in some simple pro grams s 3 2 being able to recognize the difference between batch programs in which the input is given once for all and then output is produced and interactive programs s 3 3 being able to find information about digital encoding of specific data s 3 4 being able to determine the amount of data to be downloaded to install a program attitude a 3 1 inclined to critically evaluate the choice of programs by the de mand and supply of data a 3 2 discussing the benefits of different choices for digital encoding of data a 3 3 arguing about the amount of data that has to be downloaded to install a program by backing up one s claim with evidence a 3 4 appreciating the importance of context that gives meaning to data and computation a 4 programs are running on computers knowlede sentences k 4 1 being aware that many technological devices contain computers which control them 19 explanation for example a greenhouse is digitally controlled by a vari ety of programmed devices a smart temperature sensor runs a program that checks whether the temperature is above or below the target range for a particular time of day and then triggers the heating or cooling sys tem when needed further a security camera uses a machine learning algorithm to detect non plant motion and sends a video sequence to a computer both the data from the temperature sensor and the video sequences are stored on a desktop computer which moreover generates a graph of the temperature all devices are connected to a wireless router which uses networking software to enable the transmission of data k 4 2 knowing that computers consist of hardware and software explanation we want to play a computer game in the first situation we have a gaming device which is just a piece of hardware when we switch it on it loads and runs a piece of software like our gaming application and only then can we play the game on the other hand we can have a computer game software on our memory stick until the memory stick is plugged into the device piece of hardware and the device loads the computer game from the memory stick and runs it we can not play the game either from the above examples we conclude that we need both hardware and software to play the game k 4 3 knowing that an operating system is a special type of software that enables a user to run application software on a computing device explanation we are using our smart phone to attend a video conference call using the phone s camera speaker and microphone in the middle of the video conference call comes a phone call and a phone application is started which needs to first use the speaker to ring and then if we decide to take the call now let the phone application also use the speaker and the microphone all the coordination work needed for this is done unseen for the user by the operating system and the user is barely aware of it in this way the operating system permits several applications to run simultaneously on the device an operating system manages input devices such as a keyboard and mouse output devices such as monitors speakers and printers and stor age devices such as internal and external memory moreover it also man ages network connections finally to interact with the operating system the user can use either a graphical user interface gui or command line interface 20 k 4 4 recognizing that computer systems which have the same or similar hardware may have different operating systems with different graph ical user interfaces installed on them explanation when we buy a new computer we can install either linux operating system windows operating system freebsd operating sys tem or some other operating system this is true even for the apple computers and some smartphones moreover when we install the oper ating system we can also use different graphical interfaces on the same operating system which is most common on the linux operating system skills s 4 1 being able to identify which program is responsible for the overload of a computer system and stop the program explanation being able to launch the task manager utility to get infor mation about the resources used by programs that are running on your personal computer s 4 2 being able to install update and uninstall different software on a computer system explanation being able to upgrade the version of the operating system on a smart tv being able to uninstall an app from a smartphone s 4 3 being able to recognize the same simple functionality under differ ent operating systems explanation being able to list the files in desktop on ios and windows ms attitude a 4 1 developing a positive attitude and self confidence in the use of programs 21 a 4 2 being open to new programs self confident in exploring their func tionalities respecting the experiences and opinions of others when selecting new programs a 4 3 evaluating new program tools before using them and confidently switching to them if favourable assessment a 4 4 helping and guiding others in selecting and using new programs a 5 program execution knowlede sentences k 5 1 knowing that a computer is able to automatically interpret and execute instructions explanation the program is a sequence of instructions the instructions are executed one after the other by the computer in fact the computer consists of several parts and one of them is the central processing unit cpu which interprets and executes instructions automatically one at a time k 5 2 knowing that for a program to be executed by a computing device it may be necessary to translate it from the programming language it is written in into a language understood by a computing device and this is done by specific programs explanation we can run an app that we have downloaded to our mobile phone but we can neither inspect its code nor modify it in order to modify the app one needs to have access to its source code in order to update an app its developers modify its source code then use a specific program compiler to translate the source code into a language understood by mobile phones and finally release the resulting updated version of the app k 5 3 knowing that execution of programs changes data stored in the computer system 22 explanation each time you enter or update your emails through the software the program checks for new emails and downloads them if there are any new ones resulting in a change in the data stored about emails on your computer k 5 4 being aware that program execution can result in a computer sys tem malfunction leaking of information or damage and this may be intentional by the design of the programmer e g viruses or malware or unintentional as a consequence of programmer s error be aware that programs have to be updated to protect the computer system explanation it happens sometimes to us that our program for text edit ing used to crash frequently and we lost the result of our work after the program upgrade this never happened again also it can happen to us that after opening an email with a meaningless attachment and then we forget about the message after a while we get a message from a local pizza store complaining that we are trying to break into their system for placing orders it turned out that the meaningless attachment was a program specifically designed to install on our computer a special program permitting malicious operators to use our computer in attacking the local pizzeria because the program was using a flaw in the design of the operating system the problems went away after an update of our computer system k 5 5 be aware that during the execution of a program the data is stored in either a permanent or a volatile way and the one stored in the latter is lost when the application crashes or the power is cut off explanation if your computer suddenly crashes stops working while you are writing a document for example in a word processor there is a chance that the latest changes to your document are lost because it was not stored permanently similarly your e mail message could be lost if the mail program stops working while you are writing it this could happen with almost any program or computing device so have in mind to check that it is automatically stored on the device or in the cloud frequently enough or you have to store it explicitly yourself 23 k 5 6 being aware that there are programs applications with a graphi cal user interface that are used by users to accomplish a certain task and other programs without a user interface that are started auto matically and are necessary to make the computer useful such as operating systems system support programs programs on embedded systems explanation the software we use from time to time needs to be updated however we do not know when the update will occur for this reason a special program starts automatically without an explicit user command and periodically checks the availability of an update while we are browsing the internet an antivirus program may automat ically check for unexpected attempts to access our computer similarly when we want to communicate on social media platforms an integrated grammar checking program may automatically correct our posts finally when the posting is ready to be published and we press the share but ton we need not to care about all the details involved in transferring bits on the network appliance as the operating system automatically ar ranges both hardware and software resources to transfer and publish the content the operating system automatic grammar checkers and virus checkers often work without interacting with the user skills s 5 1 being able to start execution of a program on a personal computer or a smartphone s 5 2 being able to stop execution of a program on a personal computer or a smartphone explanation especially when the program cannot be controlled within the user interface provided by the program e g endless loop s 5 3 being able to describe how a used piece of software saves user input to be retrieved in the future explanation for example saved automatically by explicit saving by user locally remotely 24 s 5 4 being able to describe the context under which an app is malfunc tioning attitude a 5 1 appreciating the benefit of computers automatically interpreting and executing instructions a 5 2 developing a critical attitude to periodically checking for a new version of the program a 5 3 developing cautiousness about downloaded programs a 5 4 trying to find out why a program is not acting as expected and persistently trying to find a solution even if attempts were less suc cessful 25 programming for all understanding the nature of programs