fraunhofer iese and robert bosch gmbh 2021 1 21 27 10 2021 from complexity measurement to holistic quality evaluation for automotive software development position paper jens heidrich michael kl s andreas morgenstern pablo oliveira antonino adam trendowicz fraunhofer iese fraunhofer platz 1 67663 kaiserslautern jens heidrich michael klaes andreas morgenstern pablo antonino adam trendowicz iese fraunhofer de jochen quante thomas grundler robert bosch gmbh robert bosch platz 1 70839 gerlingen schillerh he jochen quante thomas grundler de bosch com management summary in recent years the role and importance of software in the automotive domain has changed dramatically more functionalities are implemented in software and are enabled by software such as automated driving functions furthermore vehicles get connected with other vehicles and digital services operated by digital platforms in order to cope with the increased size and complexity of software practices from the classical field of software engineering have been increasingly adopted and service oriented and standardized archi tectures like autosar have been introduced one implication of architecture centric practices is also that more and more code is generated from models which changes the way software is produced maintained and evaluated regarding its quality additionally software development processes have become more and more agile and continuous in order to facilitate faster and incremental implementation and deployment of new functions bizdevops reduces the distance between business development and operations enabling practices like over the air delivery of new functionalities improvements and bug fixes because of these trends being able to systematically evaluate and manage software quality becomes even more crucial measurement based approaches are the common best practice for doing this in research sev eral new approaches have emerged in recent years to address these software trends in practice however we still find a largely static approach for measuring software quality in general and its complexity in particu lar for instance quite commonly manufacturers require their suppliers to deliver a predefined list of com plexity measures with static thresholds to fulfill this approach neither takes into account that software qual ity is dependent on the specific context of a function nor does it address the trends sketched above we therefore propose evolving the paradigm of measurement based software quality evaluation and manage ment accordingly our proposed approach is holistic and includes consolidated conclusions from recent re search as well as experiences from other industrial application fields our proposed framework includes four areas they define the term software quality in a goal oriented way for a specific context and describe how to measure and evaluate relevant qualities 1 understand the context and the stakeholder goals needs 2 derive technical quality factors for relevant development artifacts related to stakeholder goals 3 determine quality measures and evaluation rules for relevant quality factors 4 define a process for managing quality during the entire lifecycle we propose that all parties should agree on goals factors measures evaluation rules and quality manage ment processes at the beginning of a software development project this could e g be documented in the specification and should revise this agreement in predefined cycles based on the course of the project this framework provides the following advantages software quality has a clear link to the value it provides to stakeholders in specific contexts only relevant quality factors and measures are included which reduces overhead application and goal oriented evaluation rules avoid comparing apples and oranges fraunhofer iese and robert bosch gmbh 2021 2 21 27 10 2021 focus on all relevant development artifacts such as architecture and models and not only on code provides a real value for collecting measurement data during the product lifecycle keeping up with increasing development speed and flexible feature development 1 introduction in recent years the role and importance of software in the automotive domain has changed dramatically software and its quality have become a major driver of innovation and a differentiator from competitors this change has been mainly driven by implementing existing functionalities in software which used to rely on electromechanical components in the past and also by adding new software based functionalities such as automated driving functions and integration of the vehicle with digital platforms and ecosystems in which the vehicle becomes part of a digital service in order to cope with the increased size and complexity of software based functions in a vehicle practices from the classical field of software engineering have been increasingly adopted and more powerful control lers for operating the software have been introduced this goes hand in hand with the paradigm shift to wards service orientation and standardized architectures like autosar one of the consequences of the wide adoption of architecture centric practices is that more and more code is generated from models which changes the way software is produced maintained and evaluated regarding its quality additionally software development processes have also changed radically in the last few years processes have become more and more agile and continuous in order to facilitate faster and incremental implementation and deployment of new functions this paradigm shift is supported by sophisticated contin uous development and integration tooling and pipelines along these lines trends towards bizdevops have been considered as a means to reduce the distance between business development and operations ena bling practices like over the air delivery of new functionalities improvements and bug fixes because of the increased importance of software being able to systematically evaluate and manage its qual ity is a crucial success factor iso iec 25000 1 describes recommendations for software product quality requirements and evaluation square and defines key software qualities such as functional suitability re liability or maintainability there are many different methods techniques and tools available for software quality assurance however for systematically determining evaluating and managing software quality in general and its complexity in particular measurement based approaches are the common best practice measurement is the process by which numbers or symbols are mapped to attributes of entities in the real world in such a way as to describe them according to clearly defined rules 2 in every engineering discipline measurement is a core activity and a symbol for mature development processes consequently common maturity and capability models such as spice 3 6 define process areas and practices related to software measurement in automotive software development practice we still find a largely static approach for measuring software quality for instance quite commonly manufacturers demand that their suppliers deliver a list of complexity measures 7 with static thresholds to fulfill for the delivered source code of course complexity has been acknowledged to be one of the main factors impacting software quality e g 8 however it is only one aspect of many impacting software quality furthermore focusing on source code only in the context of measurement based quality evaluation is too narrow considering the trends sketched about e g towards more complex software architectures and model based software development furthermore static ap proaches also assume that there is a universal generic understanding of which metrics to collect for all kinds of systems and that universal thresholds exist that define what good quality software systems must look like this is unfortunately not true as software quality may be interpreted in different ways for different kinds of systems and stakeholders research in measurement based software quality evaluation and management has developed many ap proaches over the years to cope with these deficiencies comprehensive solutions for software quality mod eling such as 9 provide methods techniques and tools for systematically specifying how to measure and evaluate different aspects of software quality we also find more recent approaches focusing e g on meas uring related concepts such as technical debt 10 on dedicated development artifacts such as the software architecture 11 or on dedicated types of systems such as the quality of ai systems 12 fraunhofer iese and robert bosch gmbh 2021 3 21 27 10 2021 we therefore propose changing the paradigm of measurement based software quality evaluation and man agement in practice to a more modern and holistic approach including conclusions from recent research and addressing novel technologies and development processes this paper is organized as follows in section 2 we take a deeper look at relevant trends in automotive soft ware development that have an impact on software quality and how to evaluate and measure it in section 3 we will discuss the current state of the practice of measurement based complexity evaluation in automo tive software development section 4 will highlight some relevant approaches from research in software complexity and quality evaluation based on that in section 5 we will summarize the main needs for action for measurement based software quality evaluation and management from our point of view in section 6 we will propose a quality evaluation framework for automotive software development addressing the trends and progression in research section 7 summarizes the advantages of the proposed framework and illustrates next steps towards holistic quality evaluation for automotive software development 2 relevant trends in automotive software development several trends are changing automotive software development in this section we will summarize the trends that are most important for software quality and complexity evaluation we will shed light on the change of paradigms like the shift from hand written code to generated source code the change of processes from a classical v model to more agile processes like devops or continuous deployment but also on the introduc tion of disruptive technologies especially in the area of artificial intelligence which are relevant in the con text of e g environmental perception for highly automated and autonomous cars the introduction of highly automated driving assistance functionalities like automatic cruise control systems in modern cars led to a massive increase in the complexity of the control algorithms for the physical parts of a vehicle this fostered a paradigm change from manual coding to model based design with tools like matlab simulink where algorithms are developed using models that are automatically translated into pro gramming languages like c these model based engineering tools offer a higher level of abstraction closer to the problem space e g the physics therefore reducing development effort and generally increasing soft ware quality 13 for many years model based engineering has been the state of the practice in the auto motive domain 14 unfortunately existing metrics for manual coding are often inappropriate for auto gen erated code and hence there is a need to shift the focus from code based metrics to metrics based on models 33 however this topic is not fully covered in existing standards like 7 besides the changes on the lowest level of software development there are also tremendous changes on the highest level of the software architecture in the past automotive development was ecu centric i e suppli ers developed the software for an ecu either from scratch or on top of manufacturer specific operating sys tems recent years have seen a change from these manufacturer specific architectures towards autosar the main goal of autosar is to enable the development of hardware independent application functions autosar application software that can be executed in any autosar environment autosar offers a basic layer that abstracts from the underlying hardware like microcontrollers and cpus on top of this basic layer the autosar rte implements a common api for the communication between application software compo nents regardless of them being deployed on the same ecu or on different ecus the next generation of autosar which is currently under development is called autosar adaptive it addresses the needs of modern cars like vehicle to x connections besides other things autosar adaptive offers means for service oriented architectures which leads to a change in apis from rather simple c based apis in autosar classic towards c based apis describing services thus while autosar fosters reuse and hence generally leads to a reduction of development effort this comes at the price of more complex apis and more complex tool chains for example to synchronize the interaction between application functions and the autosar basic layer the 1990 es and the early 2000 s also saw a dramatic change in e e architectures in the automotive domain the 1990 es were dominated by an increase of the number of ecus from a few dozens to 100 s of ecus up to a point where managing the complexity of the overall system architecture was no longer feasible this period was followed by a consolidation of the number of ecus starting with domain based architectures 15 that organize the overall vehicle bus around more powerful but still classical embedded domain controllers the last years have seen a trend towards even more consolidated ecus an example is audi s zfa zentrales fraunhofer iese and robert bosch gmbh 2021 4 21 27 10 2021 fahrer assistenzsystem which includes a main processor a graphic processing unit and a safety system all on one integrated circuit those highly integrated circuits offer computational power comparable to or exceeding the computational power of modern business pcs looking at software complexity it seems that this consolidation helps to reduce the overall complexity as more functionality is offered on the same control unit reducing external communication however looking closer these paradigm changes in e e architec tures have actually only led to a shift in software complexity technologies such as hypervisors which are necessary e g to tackle freedom from interference introduce new difficulties previously not present in the automotive domain from an overall system perspective we see two major trends that have a big impact on software develop ment in the automotive domain the first one is the trend towards connected vehicles today a vehicle is no longer an isolated system instead a vehicle is connected to a multitude of other systems modern cars offer connections to smartphones using android auto or apple carplay furthermore vehicle to vehicle or more generically vehicle to x connections can be used e g for intersection assistants which enable cars to coor dinate the priority at intersections among themselves applications for these vehicle to x communications are numerous and practitioners have only started to investigate the potentials of these technologies in the past the software of a vehicle could be seen as an isolated entity interacting with its environment only indirectly via the laws of physics however with vehicle to x connections the software interacts directly with the environment this makes a vehicle one system in a system of systems and we have to find ways of dealing with the associated complexity increase another big trend is the development of highly automated and autonomous vehicles artificial intelligence ai techniques like machine learning and especially deep neural networks are already changing software development in the automotive domain dramatically this change is not only about a new technology but about how algorithms are developed and validated traditionally algorithms have been completely devel oped and implemented by a human developer based on intermediate artifacts such as requirements speci fications 1 in a machine learning setting the major task of a human engineer is to choose the right learning engine for the task at hand and prepare enough good examples from which the learning algorithm can infer the desired behavior as a consequence the artifacts that influence the quality of a learning based algorithm are very different from those found in conventional development moreover the behavior of neural net works is still in most cases unpredictable and not understandable by humans making uncertainty manage ment 16 and explainable ai 17 important research topics ultimately the quality of ai based algorithms is nowadays still validated using vehicle tests which involves a lot of manual effort t v s d experts estimate that 100 million safety scenarios have to be tested before one single fully autonomous driving function can be approved 18 therefore research projects like pegasus 19 or virqko 20 investigate new engineering methodologies like virtual engineering in virtual engineering simulation techniques are used to test the quality of ai based components in early stages of the classical v model while this mitigates the validation problem of ai based components it adds another artifact the simulation models which heavily influences the overall quality of the final vehicle overall new and novel approaches are required to evaluate the quality of ai based approaches based on the newly introduced artifacts like training data and simulation models besides the aforementioned technical changes recent years have also seen changes in development pro cesses in the automotive domain agile development approaches like continuous engineering are already being implemented in industry for example tesla reacts efficiently to customer requirements requested on social networks in a particular case a tesla car owner sent a recommendation via twitter directly to tesla s ceo elon musk suggesting moving the car seat back and raising the steering wheel when the car is parked elon musk answered twenty four minutes later via twitter saying that the feature would be included in the next software update 21 the requested feature was released by tesla less than two months later and de ployed over the air the implications of this case on engineering departments are tremendous and the real ization of such immediate responses is only possible by incorporating continuous engineering practices into development processes from market and product monitoring to architecture analysis redesign verification and deployment the literature discusses that in continuous software engineering the classical v model is no longer sequential but is rather based on iterative executions of activities on the left side of the v decom position and definition as well as on the right side integration and validation 22 23 tesla also applies 1 note that this is also true for more traditional ai algorithms like image recognition based on edge detection fraunhofer iese and robert bosch gmbh 2021 5 21 27 10 2021 devops practices the whole fleet is running the autopilot software in the background constantly collecting data that is shared with the company to improve the next version of the autopilot 24 it is yet to be shown whether devops will have the same impact on the automotive domain as for other domains but other agile approaches like scrum are already established state of the practice in the automotive domain without doubt agile approaches foster faster development however the focus on releasing new features fast entails the risk of introducing technical debt 10 like code smells or architecture erosion hence managing main tainability and controlling technical debt becomes more important in an agile setting therefore we need faster feedback cycles regarding the quality of the software in order to be able to fix problems early in summary there are a lot of changes in programming paradigms architectures and processes going on in the automotive domain that demand novel approaches to manage the quality of software 3 state of the practice in automotive software complexity evaluation in recent decades the software industry has evolved a number of practices for managing software quality including organization specific and cross organizational standards as complexity has been acknowledged to be one of the main factors impacting software quality e g 8 many of the established practices aim at managing complexity in software development these efforts include monitoring the complexity of software products such as architecture or code and improving software development environments including pro cesses tools and the capabilities of human resources consistent findings in research and practice regarding the relationships between software process and prod uct quality have led to efforts being initiated to establish universal guidelines for managing software quality one of the key elements of these guidelines is managing software complexity as a critical factor influencing software quality as a result a number of organization specific as well as cross organizational guidelines and quasi standards have been developed some of them focus on software products others on software devel opment processes manufacturers e g in the automotive domain use these standards internally to manage software development and externally as a reference for agreements with their subcontractors for example they require their suppliers to comply with certain process maturity levels of automotive spice 25 or deliver code that does not exceed the metric thresholds defined in the his 2 source code metrics document 7 com mon use of code metrics and coding guidelines have led to a rush of code measurement and evaluation tools which have gradually become an inherent part of software development environments for example nightly build systems launch code analysis and create code quality reports automatically or coding environments provide real time evaluation of code compliance with coding rules some tools such as perforce s qac offer explicit compliance checks against coding standards such as the his metric set or the misra coding guidelines 26 measurement tools typically offer visualization and drill down functionalities which support software devel opers in identifying potential quality issues and their root causes quickly tools also typically offer different views for various quality stakeholders for example an aggregated view for product owners and project man agers and a detailed view for developers and testers a significant issue in practice is that not all stakeholders understand certain metrics i e the concept they represent one reason is the complexity of the metrics another reason is the inconsistent implementation of what appear to be the same metrics by different meas urement tools yielding inconsistent measurement results furthermore the impact of specific metrics on software quality is not clear and varies from context to context in this respect what software measurement tools are largely missing is the analysis of the actual impact that the internal characteristics of software prod ucts e g complexity have on the quality of the software in use and operation e g maintainability or reli ability in a specific context on the one hand such capability would allow context specific learning about quality dependencies and thus enable deriving specific improvement actions on the other hand modeled dependencies would allow predicting the effects of development activities on software quality initial attempts have shown the great potential of quantitative data analysis especially machine learning methods in finding relevant quality patterns in development and runtime data in the context of devops and dataops for example in the prodebt project 10 aimed at the quantitative analysis of software tech nical debt the number of preprocessor lines of code and nesting levels were identified as critical factors 2 hersteller initiative software eng manufacturer s initiative for software fraunhofer iese and robert bosch gmbh 2021 6 21 27 10 2021 influencing development productivity in addition to cyclomatic complexity the greatest challenge in apply ing quantitative analysis to software data is their limited quality for example changes to software code must be aligned with information in the project backlog and the change tracking system however in practice these data sources are typically not consistent or lack important associations yet over the time the intended strength of cross organizational standards being universally applicable in different organizations turned out to be their greatest weakness the one size fits all principle proved to work only to a certain extent for example regarding software code general coding guidelines proved to be useful for maintaining the quality of code and for avoiding technical debt related to maintaining and evolving software code however fixed thresholds defined for specific static properties of code such as cyclomatic complexity turned out to be challenging for the management of software quality 27 29 staying with the example of cyclomatic complexity typically a high value is considered negative however in many cases these values are reasonable and as such do not have any negative impact on software quality at all one example might be model based development in which code is generated based on models because devel opers do not directly maintain such code its complexity does not have an impact on the maintainability or fault proneness of the software consequently new versions of standards discard predefined threshold val ues for specific static properties in favor of measurable coding rules and guidelines for software processes and documents for example the latest misra compliance guidelines for c 26 still confirm the usefulness of code measurement in the section metrics but under the condition that it fits a specific context of a function to be implemented the use of metrics is recommended by many software process standards as a means to identify code that may require additional review however the nature of the metrics being collected and their corre sponding thresholds will be determined by the industry organization and or the nature of the project this document therefore does not offer any guidance on software metrics hence misra does not define any specific metrics or metric value thresholds we can thus expect that the his consortium 7 which defined acceptance thresholds for selected code metrics will follow the example of misra and refrain from predefining specific metrics and thresholds in its next version from the process perspective reference models are commonly used to check the compliance of software development thereby fostering high quality of the produced software examples of cross organizational models include the automotive spice process capability model 25 and the iso 26262 30 standard for road vehicles functional safety automotive spice includes a specific process area for measurement man 6 which defines certain practices that have to be performed to set up a proper measurement program for software development projects products processes and the organization it explicitly requires that organi zations derive appropriate metrics from information needs and does not propose standard measures to be collected regarding iso 26262 part 6 of the standard describes recommendations for software artifacts embedded in road vehicles one of the recommended aspects is the need to measure test coverage at both the unit and architecture level the recommended metrics for the unit level are statement coverage branch coverage and modified condition decision coverage mc dc the recommended metrics for the architec ture level are function coverage functional completeness and call coverage functional invocation as de scribed in table 15 of iso 26262 an example of an organization specific standard is the maintainability index of bosch 31 which is embed ded in the development process and helps to define the right consequences and measures for software mod ules see also chapter 4 4 complexity of source code in general process standards unanimously promote measurement and data analysis for managing software quality spotting weak points and deriving improvement actions similar to recent product oriented stand ards they largely advocate adapting measurement to a specific context rather than prescribing specific meas urement approaches and measures with some exceptions 4 research in software complexity and quality evaluation in this section we provide an overview of the current state of research in the area of software complexity and quality evaluation we will start this overview by discussing approaches that focus on the product per spective i e metrics trends in the context of different software development artifacts as well as proposed quality modeling and assessment approaches we will close the overview with recent work motivated by the fraunhofer iese and robert bosch gmbh 2021 7 21 27 10 2021 increasing relevance of ai systems such software systems that contain data driven components do not only call for new complexity metrics but also for a discussion of ai related quality characteristics 4 1 complexity and quality of requirements specifications complexity measures applied to the software requirements specification either target or characterize quali ties of the requirements itself e g their understandability or they try to provide a proxy for the complexity of the solution that is specified e g its functional size metrics that can be used to quantify the quality specific characteristics of requirements depend on how the requirements are specified metrics for natural language based requirements comprise metrics on e g vagueness and weaknesses based on indicator words 32 33 and more advanced metrics to identify e g over specification and duplication in require ments specifications 34 in contrast to metrics which can be collected automatically on requirement spec ifications functional size e g function points is manually derived by skilled humans following standards like ifpug 35 or cosmic 36 in the context of functional sizing automated function point afp was specified by the cisq consortium founded in 2010 afp was developed with the objective of automating function point counting on the code level for transaction based systems and has recently been published as the iso iec 19515 standard 37 despite the increasing usage of transactional databases in the embedded context the applicability of afp may be limited to specific types of embedded software 4 2 complexity and quality of architectures there exist a number of metrics with narrow measurement goals for the analysis of software architecture complexity 38 focuses on measuring how well a software system is decoupled into small and independent modules 39 introduces a metric that measures how tightly coupled a system is cohesion 40 describes industrial evidences of the strong relationship between architecture bad smells and architecture complexity another common way to measure the quality of an architecture is by defining anti patterns or so called bad smells which are architectural patterns that will cause some quality issues in the future for instance if de fined apis are not used appropriately components have too many dependencies or well known architectural patterns are not followed most organizations use existing well known bad smells from the literature as a basis from which they derive specific bad smells suitable for their concrete system some methodologies for identifying smells are using a quantifiable pattern e g thresholds of metrics that indicate a bad smell if the threshold is missed if the architecture contains the defined pattern while satisfying its quantifiable parame ters then the system contains a user defined bad smell some approaches try to integrate individual metrics to complex indexes for instance the goal of the stand ard architecture index sai 40 is to calculate an architecture complexity index it is necessary to establish an explicit mapping of the smell to software quality attributes and to categorize the smells based on their scope global system component module file and function thresholds and weights need to be assigned to each smell a threshold serves to determine whether an architecture has bad smells the weight serves to describe the severity of the smell the sai provides a formula for calculating the complexity index of the architecture based on the identified smells and their weight the higher the index the lower the quality of the product architecture and vice versa 4 3 complexity and quality of models in the course of the further spread of model based development respective complexity metrics are also dis cussed in the literature especially for widely used models like block diagrams 41 42 or state machines most of the proposed metrics are either based on existing source code metrics and try to transfer their ideas to models or they adapt ideas from graphs in other domains the first metrics on block diagram models were proposed by menkhaus et al 43 they applied mccabe s cyclomatic complexity and several oo metrics like instability 44 to the model graph and checked their correlation with faults olszewska et al 45 defined several metrics for block diagrams in particular size and structural complexity metrics the latter are based on the architecture quality metrics by card glass 46 hu et al 47 mapped iso 9126 maintainability quality attributes to simulink metrics however a validation of this mapping is missing stuermer and pohlheim 48 propose a complexity metric that is based on halstead s software science dajsuren et al 49 propose mod fraunhofer iese and robert bosch gmbh 2021 8 21 27 10 2021 ularity and complexity metrics for simulink they performed correlation analysis and identified several cou pling metrics that are highly correlated with expert opinion on coupling olszewska et al 41 45 present a selection and weak evaluation of a set of previously published simulink metrics they found a positive cor relation between structural complexity metrics and number of faults in summary although a lot of studies have been performed on measuring models there is only very limited tool support for these metrics i e only mxam mxray 3 and simulink check 4 implement a few of them which probably also hinders their widespread application furthermore their relation to quality attributes and in particular to maintainability has hardly been investigated on the other hand complexity should be measured on the artifact that the developer works on the code that is generated from these models might be quite complex when the models are still easy to understand as they abstract away a lot of the details so measuring on the model level is highly desirable for quality assessment 4 4 complexity of source code regarding source code metrics in addition to the well known metrics proposed e g by halstead 50 mccabe 51 and chidamber and kemerer 52 various revisions adaptations and alternatives are discussed in the literature 53 in particular recent work propagates strengthening the connection between the meas ured complexity and the complexity as perceived by developers when they try to understand the code such an approach was already proposed in the 1990 s by oman et al 54 55 using linear regression they con structed a maintainability predictor based on expert opinions this approach has been used successfully for maintainability assessment at bosch 31 another example is cognitive complexity a measure adapting mccabe s cyclomatic complexity metric 56 a meta analysis from 2020 indicates that cognitive complexity is well correlated with the time required to understand source code but it does not answer the question regarding a reasonable threshold 57 a similar idea based on cognitive weights was already published earlier 58 4 5 software quality standards and quality modeling iso iec 25000 1 describes recommendations for software product quality requirements and evaluation square and distinguishes between three different types of interrelated qualities internal quality when software is developed has an impact on external quality when the system is delivered to a customer which in turn has an impact on software quality in use at the core of the iso iec 25010 59 series is a definition of eight quality characteristics further refined into 31 sub characteristics for internal and external software quality the standard also proposes some metrics for quantitatively evaluating quality characteristics but the example measures provided in iso iec 25023 60 are often too abstract to be directly implemented in prac tice in order to fill the conceptual gap between abstract quality characteristics and specific metrics quality mod eling and evaluation approaches such as quamoco 9 propose the introduction of an intermediate layer with product factors consisting of a concrete entity artifact or part of an artifact from software development and a relevant quality property e g coupling of a software module cognitive complexity of a source code func tion or redundancy of a source code fragment major challenges are seen in the consistent and efficient adaptation of quality models for a specific context 29 and in providing a coherent overall picture of quality based on concrete measurement results 61 however even within one application domain expert opinion differs regarding what quality aspects are important and what evaluation rules to use for this reason the practical adaptation of these approaches is currently limited vogel et al 28 present a systematic literature review on metrics in automotive software development and their mapping to iso iec 25010 one of their findings is that out of a total of 112 metrics only very few come with boundary values because boundary values are seen as specific to particular contexts and project setups furthermore the majority of metrics focus on maintainability as a quality characteristic and code as an anal ysis object broad tool support for a lot of the metrics listed is limited 3 https model engineers com 4 https www mathworks com https model engineers com https www mathworks com fraunhofer iese and robert bosch gmbh 2021 9 21 27 10 2021 4 6 quality and technical debt technical debt is a concept closely related to quality and refers to the cost implied by additional work caused by choosing an easy yet low quality solution now instead of using a proper approach that would take more effort now but allow avoiding additional costs later technical debt is an inherent phenomenon of evolving software as software is continuously changed its structure deteriorates which is manifested in growing complexity measuring and managing technical debt were important research topics in the last decade since technical debt allows representing the implications of insufficiently maintainable software in monetary units an important challenge in calculating technical debt is that highly simplified cost models lead to unrealistic cost estimates while in many cases the costs associated with individual deficits cannot be calculated since there is a lake of data that would provide traceability between a specific deficit and related maintenance efforts 10 62 63 discusses the usage of software quality evaluation in projects with short development cycles and 64 propose adaptations for the context of devops regarding architectural debt 65 presents an industrial case study and a cost benefit model for estimating possible savings 66 presents a use case in which an economic model was used to assess the effort that could be saved after refactoring the architectural debts 4 7 quality and artificial intelligence systems are increasingly highly automated and intelligent artificial intelligence and machine learning in particular are increasingly proving to be important enablers for automation and autonomy however guar anteeing and verifying essential properties such as trustworthiness and dependability of ml components is still a largely unsolved challenge therefore machine learning outcomes suffer from various kinds of uncer tainties 67 due to the different nature of ml we have to re interpret existing qualities e g from iso iec 25010 for ml systems or add new ones such as trustworthiness for instance 12 provides an overview of the quality properties that are typically relevant for an entity of an ml component of interest such as com pleteness of training data or correctness of the trained model and discuss how to objectively evaluate ad herence to quality requirements 5 needs for action whereas in research many new approaches have evolved for coping with the trends in automotive software development in practice we find a quite traditional largely static view of software quality in general and its complexity in particular for instance it is quite common for manufacturers to demand that their suppliers deliver a list of complexity measures based on the his with static thresholds to fulfill this approach neither considers the fact that software quality is dependent on the specific context of a function to be implemented nor does it address the trends sketched earlier we therefore propose changing the paradigm of measure ment based software quality evaluation to a more modern and holistic approach including conclusions from recent research and addressing novel technologies and development processes we see the following needs and requirements for future measurement based software quality evaluation consider the perspectives of different stakeholders in modern software development there are different stakeholders with more long term or more short term interest in software quality and different values re lated to software quality 68 while the core functionality of vehicles namely getting securely and comfort ably from point a to point b becomes a commodity differentiation among manufacturers is more about software and its usability and reliability the end user in a connected car with assistance and multimedia functions is confronted much more directly with software and its quality from a development perspective we have the strong interest to update software functionality more frequently this means that the term software quality must be sketched and analyzed from the perspectives of all relevant stakeholders such as end users product managers project managers developers etc evaluate relevant development artifacts traditionally the focus of measurement based quality evaluation has mostly been on the code level considering modern development paradigms this evaluation scope must be broadened nowadays it is much more about model based development where code is partially gener ated automatically and the overall architecture of the software system becomes more important the inclu sion of new types of components built with new technologies e g ai based components also requires the fraunhofer iese and robert bosch gmbh 2021 10 21 27 10 2021 inclusion of related development artifacts other than source code e g machine learning models and the data on which the models were trained go beyond the software component level traditionally the focus of measurement based quality evaluation has mostly been on the level of single software components functions methods and their modules classes nowadays higher levels of the system architecture are much more relevant from a quality perspective the overall software architecture goes beyond the level of a single control unit for instance we find whole soft ware architectures for different types of controllers for the vehicle as a whole for a network of connected vehicles up to the level of digital platforms and mobility services therefore we must also broaden the scope and go beyond the component level in order to better understand the effect of software quality for different stakeholders evaluate relevant quality properties traditionally the focus of measurement based quality evaluation has mostly been on quite technical quality properties especially on complexity because these are easy to meas ure automatically nowadays software quality is about much more than size and cyclomatic complexity in fact the field of potentially relevant quality properties to consider is so large that we must have a clear ra tionale for deciding what qualities are relevant for the specific goals of a particular software in a dedicated context for instance for a connected vehicle data security and privacy also become very important issues for automated driving or assistant functions based on ai trustworthiness or sub aspects such as explaina bility of the ai model used become important the focus should be on qualities and corresponding metrics that are really useful for stakeholders in the project and especially for developers so the aim should not be to cover all potential qualities and related metrics but to concentrate on the most important ones less is more those relevant qualities and metrics should have high usability and allow addressing the real problems issues regarding the software be more flexible and less static traditionally the metrics collected have mostly been static with fixed thresh olds this assumes a universal generic understanding of which metrics to collect for all kinds of systems and universal thresholds defining what high quality software systems must look like maybe decades ago ecu software was not as diverse as today and it was a valid attempt to come up with a fixed set of metrics and thresholds for determining its quality nowadays software quality could mean quite different things for dif ferent kinds of systems functions and stakeholders in the context of automotive software development fur thermore the notion of software quality may change over time measurement based quality evaluation should not impede development flexibility and speed this especially means that the specification of software quality is not something that is only defined once but must also be allowed to change and be adapted over time 6 quality evaluation framework for automotive software development as we have seen in the previous section there is a need to change our views on the term software quality and its evaluation we have to move from a mostly static set of complexity metrics with fixed thresholds towards a more flexible approach that considers the context as well as goal specific requirements for man aging software quality the objective of the framework is to provide a systematic approach for defining what the term software quality means in a goal oriented way for a specific context of a function to be implemented and to measure and evaluate relevant qualities systematically in order to enable early identification of potential quality risks and issues in the course of a software development and maintenance project the framework consists of four areas 1 understand the context and the stakeholder goals needs 2 derive technical quality factors for relevant development artifacts related to stakeholder goals 3 determine quality measures and evaluation rules for relevant quality factors 4 define a process for managing quality during the entire lifecycle the different activities and outputs of the framework operationalize a goal oriented measurement process such as gqm 69 which has been a quasi standard in measurement research for decades and is also de manded by different process maturity models such as in the measurement process as defined by spice 5 6 figure 1 gives an overview of the proposed framework fraunhofer iese and robert bosch gmbh 2021 11 21 27 10 2021 figure 1 framework for measurement based quality evaluation for automotive software development we propose that all involved stakeholders and parties should agree on goals factors measures evaluation rules as well as quality management processes at the beginning of a software development project and that should revise that agreement in predefined cycles based on the course of the project the agreement may also contain exceptions or special evaluation rules for dedicated parts of the software such as off the shelf platforms or open source software used we see two options for using the framework in the context of an oem supplier relationship a in the first option the agreement about goals factors measures evaluation rules as well as quality man agement processes would directly become part of a contract between the oem and the supplier the ad vantage of this option is that the oem and the supplier have a highly objective evaluation basis which is systematically derived from the goals and needs of the software product to be used in a specific context the disadvantage is that this option is less flexible because updating and adapting the agreement in the course of the project would imply changing the contract furthermore the overhead on both sides is higher because the fulfillment of the agreement must be formally proven b in the second option only the framework for measurement based quality evaluation would become part of a contract between the oem and the supplier similar as currently done for requesting and checking a certain capability level of processes according to the automotive spice model the oem could just request and check that the activities of the framework are performed properly and that the corresponding outputs are produced the advantage of this option is that the oem and the supplier can define the agreement about goals factors measures evaluation rules as well as quality management processes based on quality needs instead of contractual constraints furthermore this allows for high flexibility in updating and adapting the agreement in the course of the project the disadvantage lies in less formal control over the contents of the agreement as it would not be part of the contract in the following sections we will describe different aspects of the framework and give advice on suitable processes methods and tools 6 1 understand context and stakeholder goals needs this area of the framework is about characterizing the context of a function to be implemented and to discuss relevant software quality goals needs together with all relevant stakeholders of the customer and their soft ware supplier to identify relevant measures for quality evaluation understanding the context and how the software will be used in this context is essential for instance for an infotainment system the user interface and its usa bility might be important whereas this would be out of scope for an embedded engine control unit further more different stakeholders from different parties are typically involved in software development with dif ferent interests in software product qualities for instance a product manager on the customer side may be 1 understand context goals needs a characterization of context b list of relevant software quality goals needs for stakeholders 2 determine technical quality factors a hierarchy of technical quality factors entity x property 3 determine measures evaluation rules a list of measures connected to factor hierarchy b evaluation rules e g normalization aggregation rating 4 determine quality management process a specification of data to exchange b tooling c quality management process in lifecycle quality definition 1 a context 1 b stakeholder quality goals needs 2 a technical quality factors entities x properties 3 a measures 3 b evaluation rules quality management 4 a data exchange 4 b tooling 4 c quality management process agreement stakeholder a stakeholder b stakeholder c fraunhofer iese and robert bosch gmbh 2021 12 21 27 10 2021 interested in the usability of a user interface whereas a product manager of the development organization may want to be able to quickly change and adapt the software to user customer needs i e they are inter ested in the maintainability of the software as an alternative to agreeing on stakeholder goals a risk driven approach can be used finally it is important to analyze the real value that software quality provides to the different stakeholders and parties involved table 1 lists some examples of typical context characteristics while table 2 lists some examples of typical stakeholder goals related to software quality note that we would recommend focusing and agreeing on the most important characteristics and goals for software quality instead of on all potential ones furthermore we would recommend writing down a ra tionale explaining why a certain stakeholder goal was agreed upon for instance if frequent feature updates are planned software maintainability is of high importance table 1 examples of context characteristics product development approach type infotainment software user interface touchscreen contains ai ml components no architecture autosar process scrum release cycles twice a year ota updates yes table 2 examples of quality goals for different stakeholders based on iso iec 25010 software supplier customer customer user functional suitability performance efficiency compatibility usability reliability security maintainability portability effectiveness efficiency satisfaction freedom from risk flexibility 6 2 determine technical quality factors this area of the framework deals with determining technical quality factors for all relevant development artifacts related to stakeholder goals in order to be able to manage software quality on a technical level abstract qualities such as those defined by iso iec 25000 must be decomposed into concrete technical quality factors that are specific for concrete usage scenarios for instance what does the usability of a user interface or the maintainability of software mean to precisely specify quality centered usage scenarios we recommend using the approach proposed by 11 who claim that such specifications should be done in terms of i the environment or condition in which this driver occurs ii the event that stimulates the occurrence of the driver iii the expected response of the system to the driver event and iv the quantifications associated with the three previous aspects the usage scenario specifications should be precise enough to enable the architecture to properly reason about adequate architecture solutions for addressing them a technical factor is specified by a quality property of a development artifact or a part of a development artifact such as the understandability of the source code a technical factor refines stakeholder quality goals on a technical level e g the quality goal maintainability of software can be refined by understandability of source code while the quality goals give a clear motivation of why it is important to deal with different aspects of software quality the technical factors break that down into what entities development artifacts or parts thereof are of interest and what properties have to be evaluated we would recommend starting by thinking about relevant entities first and then identifying relevant quality properties per entity the tricky part lies in focusing on the most important entities and their properties for which quantitative quality man agement must be established instead of looking at all possible combinations for this it might be helpful to fraunhofer iese and robert bosch gmbh 2021 13 21 27 10 2021 focus on entities that are exchanged between the parties stakeholders and which have a high risk of leading to serious issues during development or operation time of the software to be developed table 3 presents some examples of technical factors we would recommend describing the rationales for why a certain technical factor is related to a specific stakeholder goal more specifically we recommend specifying this rationale by means of pros cons and risks i e the points in favor and against assumptions and quantifications i e the assumptions made about the decision and their related measurable effects and trade offs i e aspects negatively impacted by this deci sion for practical reasons it might be necessary to create a hierarchy of technical factors if a property or entity is still too abstract to be understood in the same way by all stakeholders for instance understandability of source code could be broken down to documentation degree of public interfaces in source code or com plexity of apis in source code etc at the end technical factors should be as concrete as possible table 3 examples of technical quality factors related to different development artifacts requirements architecture source code test volatility of features appropriateness of requirements breakdown completeness and consistency of re quirements ac ceptance criteria traceability be tween requirements and architecture solution adequacy of architecture to the associated re quirements atam complexity of archi tecture documentation ad equacy of architec ture compliance be tween architecture and code traceability be tween architecture and source code complexity of apis in source code algorithmic com plexity of source code coupling cohesion between source code components understandability of source code documentation de gree of public inter faces in source code compliance with misra c c coding guidelines coverage of code with test cases coverage of re quirements with test cases 6 2 1 identification of relevant entities relevant entities development artifacts or parts thereof depend on the context and on the stakeholders quality goals for instance for a domain controller a hardware layer and its qualities are more important than for an infotainment system for a machine learning ml component of a software the quality of the data used for training and testing the model might by essential while it might not be important at all for a classically programmed piece of software typical entities to consider at this high level include but are not limited to requirements documentation system and software architecture and design source code or v v related artifacts however entities may also be specific to certain development techniques used such as model based development virtual engi neering simulation or types of systems under development such as a system including ai components for instance in the case of model based development sysml or matab simulink models may be of interest and source code generated automatically from the models should be excluded for ml components one might include qualities related to the data the learned model the infrastructure in which the model is learned the system into which the ml component is placed or the environment in which the model is used later on 12 6 2 2 identification of relevant quality properties for each relevant entity relevant quality properties have to be identified this could include quality proper ties relevant for development time such as reliability or during the use of the software such as efficiency iso iec 25010 gives some starting points for thinking about generic qualities which could be relevant on the fraunhofer iese and robert bosch gmbh 2021 14 21 27 10 2021 level of the software system however in order to be practically applicable they have to be broken down into more technical properties by using approaches such as gqm 69 quality modeling approaches 9 from the field of software measurement or approaches generically applicable for breaking down abstract con cepts for decision making such as multiple criteria decision making 70 one may also follow predefined methods for certain types of entities to define relevant quality properties such as the rate method for ar chitecture assessment or derive relevant qualities from architecture scenarios or drivers 11 after relevant quality properties have been identified for all relevant entities an analysis should be per formed of potential cross links between the created technical quality factors this is useful for identifying potential conflicts between factors or factors that support each other it might also be helpful to note any known relationship to relevant qualities not related to the software 6 3 determine measures and evaluation rules this area of the framework determines quality measures and evaluation rules for all relevant technical quality factors in order to quantitatively evaluate software quality the technical factors must be made measurable by de fining concrete metrics and clear rules on how to evaluate the measurement data and distinguish between acceptable and unacceptable levels of quality for instance you may define a measure for the technical factor documentation degree of public interfaces in source code by percentage of public interfaces containing a description of functionality input parameters and return values a simple evaluation rule could be that 100 of public interfaces in source code must be documented we would recommend starting by thinking about relevant measures for all identified technical factors first and then defining evaluation rules to identify relevant quality properties per entity 6 3 1 identification of relevant measures to identify relevant measures approaches such as gqm may be helpful as they support the derivation of metrics via measurement goals and questions however it is important not to reinvent the wheel i e not to start on the green field when it comes to defining measures but to refer to well known measures from the literature and to use standardized measures whenever possible on the one hand one should avoid de termining measures which are hard or nearly impossible to collect in practice on the other hand one should also not only focus on those measures that are the easiest to collect but rather on those that provide a good measure for the relevant technical quality factors for most standard technical quality factors it should be possible to find recommended measures or whole evaluation models in the literature for instance different qualities of a software architecture could be meas ured using the software architecture complexity model sacm 71 for different source code qualities one also finds metric collections in the literature or collected by tool vendors e g 72 or models for addressing more complex concepts such as technical debt 10 for certain types of systems such as ai systems differ ent proposals for measures to be collected for dedicated quality properties can also be found 12 note that there is unfortunately no one size fits all solution regarding measures that should be collected for certain technical quality factors there exist some typical suspects however the number of quality factors and related measures is far too high to simply try to collect all of them therefore it is crucial to know what technical quality factors are relevant to evaluate in the course of a software development project note also that the main goal of the proposed framework is to describe an approach for identifying relevant metrics and not to define a standard set of metrics in practice external benchmarking databases such as the tiobe index 73 can also be found these benchmarking databases use a common set of measures to evaluate software systems grouped by programming language but do so independent of context and qual ity goals this approach fits the purpose of external benchmarking but not the purpose of focusing on all quality risks and issues that are relevant for the functionality of a dedicated software system 6 3 2 definition of evaluation rules defining clear and meaningful evaluation rules is probably the most important task but also challenging in the context of evaluating software quality fraunhofer iese and robert bosch gmbh 2021 15 21 27 10 2021 before starting to define evaluation rules it should be clarified on what abstraction level measurement based quality evaluation is required so far the described framework has specified three different levels 1 stake holder quality goals refer to a set of 2 technical quality factors which in turn refer to 3 concrete measures in the simplest case a quality evaluation on the level of single measures is sufficient however depending on the stakeholders and their interest it could be required that the evaluation on the level of single metrics is aggregated across the tree levels based on the defined tree graph structure for calculating quality indexes for quality factors quality goals or the software as a whole if this kind of aggregation is required measure ment values typically have to be normalized and mapped to a unique evaluation scale using e g utility func tions before they are aggregated furthermore the type of aggregation has to be defined e g whether a compensatory aggregation model like weighted sum or a not compensatory model like worst case aggre gation is applied 9 70 describe this procedure a critical question is how to define evaluation rules for measurement values specifically how to come up with meaningful thresholds for distinguishing between acceptable and unacceptable measurement values older approaches assume that one can define universal thresholds that are valid for a certain measure in dependent of the nature and functionality of the system for instance assuming that mccabe s cyclomatic complexity mcc must always be lower than 10 more recent approaches assume that acceptable thresholds should be defined for a certain type of system using a more baseline driven approach that is the actual distributions of measurement values are analyzed for an already existing system or for a similar system if the system should be newly developed based on this baseline realistic thresholds are defined relative to this baseline for instance mcc for the whole system or certain critical parts should not become higher or should be reduced by 10 when defining the evaluation rules it is also important to consider which level of granularity according to the structure of the software system one is referring to for instance are we referring to the average or the maximum of mcc across all methods functions of a system or to the absolute sum of mcc across the whole system or do we use another measure for normalization such as the size of a function measured by loc or number of statements 6 4 determine quality management process this area of the framework defines the agreed process for managing quality during the entire lifecycle of the software product nowadays a more continuous and flexible approach is required for managing quality dur ing the entire lifecycle which allows for a more incremental analysis of quality based on agile principles first based on the specification of software quality from the previous framework areas all parties have to agree on the following aspects 1 what measurement data is exchanged on which level of granularity for instance is raw data re garding all defined measures exchanged or just the evaluation results of all defined rules 2 what tools are used for collecting storing and analyzing the measurement data and where is the analysis performed for instance is the analysis performed on the supplier side the customer side or by a neutral party 3 when to analyze the data what to do if the evaluation reveals quality issues and how to integrate measurement based quality evaluation into the development process for instance are software deliveries with quality issues not allowed at all or have all issues been documented as tasks in an agile product backlog to be addressed in future software releases 4 when to revise the quality specification for instance if new quality issues are raised or critical func tionality of the software system is changed all parties should agree on adapting the quality specifi cation regarding the point in time when certain measurement data becomes available the use of virtual engineer ing and simulation makes sense for early quality evaluation e g virtual hardware prototypes note that for certain types of systems such as ai systems feedback loops from operation to development also have to be considered in order to detect quality issues e g by monitoring components of ai decisions it is also important to note that the defined process for measurement based quality evaluation should not impede development flexibility and speed but should become part of the process e g certain scrum re views or retrospective meetings this specifically includes that the specification of software quality is not fraunhofer iese and robert bosch gmbh 2021 16 21 27 10 2021 something that is only defined once in the contract at the beginning of the project but is also allowed to change in the course of the project 7 conclusions in this paper we discussed relevant trends in automotive software development that have an impact on software quality and how to evaluate and measure it this included especially the increased importance of software in the automotive domain the heterogeneity of the application fields novel software architectures and model based development and changes in the development process towards more agile processes and bizdevops we also discussed the current state of the practice of measurement based complexity evaluation in automotive software development we concluded that we still find largely static approaches for measuring software quality in general and complexity in particular which do not address the trends that we have ob served in recent years furthermore we highlighted some relevant approaches from research in software complexity and quality evaluation we concluded that several new approaches have emerged in recent years for coping with the identified trends these especially include what development artifacts to evaluate what metrics to collect and how to analyze evaluate and manage software quality based on that we summarized the main needs for action for measurement based software quality evaluation and management from our point of view and proposed a quality evaluation framework for automotive soft ware development that addresses the trends and progression in research the framework aims at defining the term software quality in a goal oriented way for a specific context and at describing how to measure and evaluate relevant qualities following this approach we proclaim the following advantages when fully imple menting the framework software quality has a clear link to the value it provides for all relevant stakeholders in specific appli cation contexts only relevant technical quality factors and measures are included which reduces the overhead for collecting measurement data that is not actually of use application and goal oriented evaluation rules avoid comparing apples and oranges and focus on meaningful quality risks and issues discovered all relevant development artifacts and parts thereof are included for which evaluating the quality during the course of the project is important which better reflects modern development paradigms a real added value for collecting measurement data during the product lifecycle can be provided to actually address critical quality risks and issues the framework allows for keeping up with increasing development speed and more flexible devel opment approaches such as agile development or devops currently the framework is only defined on a conceptual level based on our knowledge and experience from research and practice for detailing discussing and deploying the framework we suggest the following steps as future work more detailed descriptions of the sketched framework activities work products roles tools com prehensive example templates etc have to be elaborated and provided pilot case studies where the framework is tried out on practical examples have to be performed in the context of real development projects including getting feedback from practitioners a discussion has to be initiated among relevant partners and an agreement has to be reached for using the framework in the future e g between key oems suppliers and associations a reference standards document has to be created based on the description of the framework the standard has to be published and support for deployment and rollout has to be provided based on the sketched trends regarding the importance of software in the automotive domain we see a clear need to change the status quo regarding the evaluation and management of software quality we see these steps as a practical way to start discussions about what a novel approach addressing the trends and progres sion in research could look like fraunhofer iese and robert bosch gmbh 2021 17 21 27 10 2021 acknowledgments the authors would like to thank robert bosch gmbh for supporting the creation of this position paper fur thermore we would like to thank andreas jedlitschka ralf kalmar sonnhild namingha and hendrik post for their valuable comments and for reviewing initial versions of the paper we also want to emphasize that this article represents our own independent position on the topic based on our personal experience and knowledge references 1 iso iso iec 25000 2014 systems and software engineering systems and software quality require ments and evaluation square guide to square online available https www iso org stand ard 64764 html accessed jan 11 2021 2 c wohlin p runeson m h st m c ohlsson b regnell and a wessl n measurement in experi mentation in software engineering c wohlin p runeson m h st m c ohlsson b regnell and a wessl n eds berlin heidelberg springer berlin heidelberg 2012 pp 37 43 3 iso iso iec 15504 5 2012 information technology process assessment part 5 an exemplar soft ware life cycle process assessment model online available https www iso org standard 60555 html accessed jan 11 2021 4 iso iso iec 33001 2015 information technology process assessment concepts and terminology online available https www iso org standard 54175 html accessed jan 11 2021 5 iso iso iec 15504 5 2012 online available https www iso org standard 60555 html accessed sep 16 2021 6 iso iso iec ts 33061 2021 online available https www iso org standard 80362 html accessed sep 16 2021 7 h kuder his source code metrics version 1 3 1 2008 8 v r basili l c briand and w l melo a validation of object oriented design metrics as quality indi cators iieee trans software eng vol 22 no 10 pp 751 761 1996 doi 10 1109 32 544352 9 s wagner et al operationalised product quality models and assessment the quamoco approach information and software technology vol 62 pp 101 123 2015 doi 10 1016 j infsof 2015 02 009 10 m ciolkowski l guzm n a trendowicz and f salfner lessons learned from the prodebt research project on planning technical debt strategically in lecture notes in computer science product fo cused software process improvement m felderer d m ndez fern ndez b turhan m kalinowski f sarro and d winkler eds cham springer international publishing 2017 pp 523 534 11 j knodel and m naab pragmatic evaluation of software architectures cham springer international publishing 2016 12 j siebert et al towards guidelines for assessing qualities of machine learning systems in commu nications in computer and information science 1865 0929 vol 1266 quality of information and com munications technology 13 th international conference quatic 2020 faro portugal september 9 11 2020 proceedings martin shepperd fernando brito e abreu alberto rodrigues da silva ricardo p rez castillo eds m shepperd f b e abreu a r d silva and r p rez castillo eds cham swit zerland springer 2020 pp 17 31 13 m kl s t bauer a dereani t soderqvist and p helle a large scale technology evaluation study effects of model based analysis and testing in bigdse 2015 first international workshop on big data software engineering florence italy 2015 pp 119 128 14 f deissenboeck et al clone detection in automotive model based development in proceedings of the 13 th international conference on software engineering icse 08 leipzig germany 2008 p 603 15 d reinhardt and m kucera domain controlled architecture a new approach for large scale soft ware integrated automotive systems in proceedings of the 3 rd international conference on pervasive embedded computing and communication systems barcelona spain feb 2013 feb 2013 pp 221 226 fraunhofer iese and robert bosch gmbh 2021 18 21 27 10 2021 16 m kl s and l sembach uncertainty wrappers for data driven models in lecture notes in com puter science computer safety reliability and security a romanovsky e troubitsyna i gashi e schoitsch and f bitsch eds cham springer international publishing 2019 pp 358 364 17 a adadi and m berrada peeking inside the black box a survey on explainable artificial intelligence xai ieee access vol 6 pp 52138 52160 2018 doi 10 1109 access 2018 2870052 18 t v s d pegasus autonomous vehicles driverless car security online available https www tuvsud com en industries mobility and automotive automotive and oem autonomous driving pegasus project accessed jan 11 2021 19 pegasus project consortium schlussbericht f r das gesamtprojekt pegasus 2020 accessed nov 1 2021 online available https www pegasusprojekt de files tmpl pdf pegasus abschlussbericht gesamtprojekt pdf 20 o bleisinger t kuhn and m eigner autogeneration of simulation models from usage data using learning ai procedures online available https prostep epaper pro org pdj 1 2020 english 46 accessed jan 11 2021 21 j bariso a tesla customer complained on twitter less than 30 minutes later elon musk promised to fix it inc 21 aug 2017 https www inc com justin bariso elon musk promises to implement customer suggestio html accessed jan 11 2021 22 j bosch ed continuous software engineering 1 st ed cham springer international publishing im print springer 2014 23 c shamieh continuous engineering for dummies john wiley sons inc 2014 24 tesla team upgrading autopilot seeing the world in radar online available https www tesla com de de blog upgrading autopilot seeing world radar redirect no accessed jan 11 2021 25 automotive spice process assessment reference model 3 1 vda qmc working group 13 automo tive sig nov 2017 online available http www automotivespice com fileadmin software down load automotivespice pam 31 pdf 26 misra compliance 2020 achieving compliance with misra coding guidelines february 2020 misra online available https www misra org uk linkclick aspx fileticket vfarsqzp 1 d 0 3 d tabid 57 27 a trendowicz m kl s c lampasona j m nch c k rner and m saft model based product quality evaluation with multi criteria decision analysis proceedings of the international conference on soft ware process and product measurement iwsm metrikon mensura online available https arxiv org pdf 1401 1913 28 m vogel et al metrics in automotive software development a systematic literature review j softw evol proc vol 33 no 2 2021 doi 10 1002 smr 2296 29 m kl s c lampasona and j munch adapting software quality models practical challenges ap proach and first empirical results in 37 th euromicro conference on software engineering and ad vanced applications seaa 2011 aug 30 2011 sept 2 2011 oulu finland proceedings oulu fin land 2011 pp 341 348 30 iso iso 26262 1 2018 road vehicles functional safety part 1 vocabulary online available https www iso org standard 68383 html accessed jan 11 2021 31 t grundler h post j quante and s yigit software komplexit tsmetriken effektiv einsetzen em bedded software engineering 11 apr 2019 https www embedded software engineering de soft ware komplexitaetsmetriken effektiv einsetzen a 819683 accessed sep 16 2021 32 g lami quars a tool for analyzing requirements carnegie mellon university pittsburgh sei 2005 33 g lami m fusani and g trentanni quars a pioneer tool for nl requirement analysis in lncs sublibrary sl 1 theoretical computer science and general issues vol 11865 from software engineer ing to formal methods and tools and back s gnesi m h t beek a fantechi and l semini eds cham switzerland springer 2019 pp 211 219 fraunhofer iese and robert bosch gmbh 2021 19 21 27 10 2021 34 s adam automatische berpr fung von anforderungen osseno software gmbh 21 jan 2018 https www osseno com de automatische validierung von anforderungen accessed jan 11 2021 35 iso iso iec 20926 2009 software and systems engineering software measurement ifpug func tional size measurement method 2009 online available https www iso org standard 51717 html accessed jan 11 2021 36 iso iso iec 19761 2011 software engineering cosmic a functional size measurement method online available https www iso org standard 54849 html accessed jan 11 2021 37 iso iso iec 19515 2019 information technology object management group automated function points afp 1 0 online available https www iso org standard 65378 html accessed jan 11 2021 38 r mo y cai r kazman l xiao and q feng decoupling level in proceedings of the 38 th interna tional conference on software engineering austin texas 05142016 pp 499 510 39 a maccormack j rusnak and c y baldwin exploring the structure of complex software designs an empirical study of open source and proprietary code management science vol 52 no 7 pp 1015 1030 2006 doi 10 1287 mnsc 1060 0552 40 w wu et al software architecture measurement experiences from a multinational company in software architecture cham 2018 pp 303 319 41 m olszewska y dajsuren h altinger a serebrenik m wald n and m g j van den brand tailor ing complexity metrics for simulink models in proccedings of the 10 th european conference on soft ware architecture workshops copenhagen denmark 2016 pp 1 7 42 j schroeder c berger t herpel and m staron comparing the applicability of complexity measure ments for simulink models during integration testing an industrial case study in software archi tecture and metrics sam 2015 ieee acm 2 nd international workshop on florence italy may 2015 may 2015 pp 35 40 43 g menkhaus and b andrich metric suite for directing the failure mode analysis of embedded soft ware systems in proceedings of the seventh international conference on enterprise information sys tems miami united states may 2005 may 2005 pp 266 273 44 r c martin oo design quality metrics an analysis of dependencies in workshop pragmatic and theoretical directions in object oriented software metrics oopsla 1994 45 m olszewska m huova m walden k sere and m linjama quality analysis of simulink models in software quality engineering proceedings of the conquest 2009 2009 46 d n card and r l glass measuring software design quality englewood cliffs london prentice hall 1990 online available http worldcatlibraries org wcpa oclc 805612692 47 w hu t loeffler and j wegener quality model based on iso iec 9126 for internal quality of matlab simulink stateflow models in 2012 ieee international conference on industrial technology 2012 pp 325 330 48 i st rmer and h pohlheim model quality assessment in practice how to measure and assess the quality of software models during the embedded software development process in 2012 accessed aug 4 2019 online available https hal archives ouvertes fr hal 02263433 49 y dajsuren m g j van den brand a serebrenik and s roubtsov simulink models are also soft ware in proceedings of the 9 th international acm sigsoft conference on quality of software architec tures qosa 13 vancouver british columbia canada 2013 p 99 50 m h halstead elements of software science new york oxford elsevier 1977 51 t j mccabe a complexity measure iieee trans software eng se 2 no 4 pp 308 320 1976 doi 10 1109 tse 1976 233837 52 s r chidamber and c f kemerer a metrics suite for object oriented design iieee trans software eng vol 20 no 6 pp 476 493 1994 doi 10 1109 32 295895 fraunhofer iese and robert bosch gmbh 2021 20 21 27 10 2021 53 a s nu ez varela h g p rez gonzalez f e mart nez perez and c soubervielle montalvo source code metrics a systematic mapping study journal of systems and software vol 128 pp 164 197 2017 doi 10 1016 j jss 2017 03 044 54 p oman and j hagemeister metrics for assessing a software system s maintainability in software maintenance 8 th conference papers orlando fl usa 1992 pp 337 344 55 p oman and j hagemeister construction and testing of polynomials predicting software maintaina bility journal of systems and software vol 24 no 3 pp 251 266 1994 doi 10 1016 0164 1212 94 90067 1 56 g a campbell cognitive complexity an overview and evaluation in 2018 ieee acm interna tional conference on technical debt techdebt 2018 pp 57 58 57 m mu oz bar n m wyrich and s wagner an empirical validation of cognitive complexity as a measure of source code understandability in proceedings of the 14 th acm bari italy 2020 pp 1 12 58 jingqiu shao and yingxu wang a new measure of software complexity based on cognitive weights in ccece 2003 canadian conference on electrical and computer engineering toward a caring and humane technology cat no 03 ch 37436 2003 1333 1338 vol 2 59 iso iso iec 25010 2011 systems and software engineering systems and software quality require ments and evaluation square system and software quality models online available https www iso org standard 35733 html accessed jan 11 2021 60 iso iso iec 25023 2016 systems and software engineering systems and software quality require ments and evaluation square measurement of system and software product quality online available https www iso org standard 35747 html accessed jan 11 2021 61 s wagner et al softwarequalit tsmodelle praxisempfehlungen und forschungsagenda informa tik spektrum vol 33 no 1 pp 37 44 2010 doi 10 1007 s 00287 009 0339 4 62 x franch l lopez s mart nez fern ndez m oriol p rodr guez and a trendowicz quality aware rapid software development project the q rapids project in software technology methods and tools cham 2019 pp 378 392 63 s martinez fernandez a jedlitschka l guzman and a m vollmer a quality model for actionable analytics in rapid software development in 2018 44 th euromicro conference on software engineer ing and advanced applications seaa prague 2018 pp 370 377 64 p haindl r plosch and c korner an extension of the quamoco quality model to specify and eval uate feature dependent non functional requirements in 45 th euromicro conference on software engineering and advanced applications kallithea chalkidiki greece 2019 pp 19 28 65 j carriere r kazman and i ozkaya a cost benefit framework for making architectural decisions in a business context in acm ieee 32 nd international conference on software engineering 2010 cape town south africa 2010 p 149 66 r kazman et al a case study in locating the architectural roots of technical debt in bigdse 2015 first international workshop on big data software engineering florence italy 2015 pp 179 188 67 m kl s and a m vollmer uncertainty in machine learning applications a practice driven classifica tion of uncertainty in computer safety reliability and security cham 2018 pp 431 438 68 d painter and m rhodes practical software quality a guide in progress laurel md usa dec 18 2015 accessed jan 11 2021 online available https ntrs nasa gov citations 20150023413 69 v basili et al aligning organizations through measurement cham springer international publishing 2014 70 international society on mcdm multiple criteria decision making online available https www mcdmsociety org accessed jan 11 2021 fraunhofer iese and robert bosch gmbh 2021 21 21 27 10 2021 71 e bouwers j visser c lilienthal and a van deursen a cognitive model for software architecture complexity in 2010 ieee 18 th international conference on program comprehension braga portugal jun 2010 jul 2010 pp 152 155 72 sonarqube metric definitions sonarqube docs online available https docs sonarqube org lat est user guide metric definitions accessed jan 11 2021 73 tiobe software bv tiobe index for january 2021 online available https www tiobe com tiobe index accessed jan 11 2021