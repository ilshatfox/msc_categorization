ar x iv 1 80 3 10 92 0 v 3 m at h c o 1 6 a pr 2 01 8 lattice walk enumeration bryan ek june 30 2021 abstract trying to enumerate all of the walks in a 2 d lattice is a fun combinatorial problem and there are numerous applications from polymers to sports computers provide a wonderful tool for analyzing these walks we provide a maple package for automatically describing generating functions of walks restricted to any step set in a 2 d lattice we always obtain a closed system of relations for generating functions of walks that are bounded semi bounded or unbounded for bounded walks this leads to explicit rational solutions for semi bounded or unbounded walks we may get lucky and obtain algebraic solutions if not we still have a short self referential description of the generating function 1 introduction we consider walks in the two dimensional square lattice with an arbitrary set of integral steps x y subject to x 0 in addition to unbounded walks we also separately constrain the walks to lie in regions bounded above and below as well as bounded only below one would then like to count all possible walks of a certain length possibly with a specific total change in y value rather than a brute force search of the entire space looking for 1 value one could use generating function relations as a bonus one would obtain not only the initial generating function of desire but also many related ones that may be of interest studies of this kind have been done in the literature with simple step sets such as dyck paths 1 1 1 1 dr 71 borw 05 and old time basketball games az 07 philippe duchon department of mathematics the school of arts and sciences rutgers the state university of new jersey piscataway nj 08854 1 http arxiv org abs 1803 10920 v 3 analyzed the case of nonnegative bridges with step set 1 2 1 3 see oeis 1 sequence a 060941 oeia for further developments on the subject see vr 00 and the references therein the accompanying maple package is able to extend and inform on old sequences and create many new sequences much of the analysis thus far has been on steps with x value exactly equal to 1 one of the aspects of this paper that sets it apart is the ease with which it can analyze more generic cases 1 1 motivation we want to enumerate walking paths constrained to specific allowable steps most of the time we are looking for paths that begin and end on the x axis an earlier motivation for bounded walks came from physics analyzing polymers con strained between plates borw 05 ayyer and zeilberger gave one solution in an earlier paper az 07 that provided the main motivation for this research the kernel method has received attention lately for analyzing specific cases of walks bkk 17 there are several advantages to describing walks using the method of this paper the main idea is the same writing functional equations to describe possible steps in a walk the difference is that this method then describes new components of the functional equation in an iterative manner the kernel method uses analytical number theory on the roots and can be reliant on very case specific techniques compared to the kernel method we believe our method is a lot easier to understand combinatorially is more insightful faster and easier to produce trying to picture an entire walk at once can be difficult this is where the awesome powers of dynamical programming come into play instead of trying to think about the entirety of a walk think about a part either the beginning step end step or the middle step across the x axis break the walk down into different parts irreducible versus reducible this is what the generating function equations accomplish originally we wrote out a single equation to describe the initial walk of interest then the next then the next until it eventually became a closed system and the wonderful part is that our descriptions always lead to closed systems finally we solved the system we created 1 online encyclopedia of integer sequences nei 2 http oeis org a 060941 since this is a very algorithmic approach to answering the question why not have a computer work for us 1 2 definitions i will generically use the term walk to indicate any sequence of points x 0 y 0 xs ys in the xy plane though the walk will not necessarily start at the origin if the starting point is not given it is assumed to begin at 0 0 the steps of a walk are x 1 x 0 y 1 y 0 xs xs 1 ys ys 1 and are built from some step set s a set of ordered pairs i exclusively consider walks that are monotonically weakly increasing xi 1 xi 0 a walk is nonnegative nonpositive if the walk never crosses below above the x axis i will sometimes refer to the y value as the altitude of the walk definition 1 walks a bridge is an unbounded walk that begins at the origin and ends on the x axis i say bounded bridge for a bounded walk that begins at the origin and ends on the x axis an excursion is a semi bounded not necessarily nonnegative walk that begins at the origin and ends on the x axis a free walk can end anywhere not ending at any specific altitude a meander is a semi bounded free walk the length of a walk is n s i 0 xi the size of a walk is s see figure 1 for examples of the different types of walks 3 figure 1 walk examples x x nonnegative excursion of size 8 nonnegative meander of size 9 bridge of size 9 free walk of size 7 all of the example walks are of length 8 and are considered to have begun at the origin they are all built from the same step set s 0 1 1 0 1 1 1 2 2 1 note the vertical line in the excursion is actually 2 steps the excursion happens to be irreducible while the rest are not banderier et al bkk 17 uses walk path to reference any sequence of steps that start at the origin the only difference in definitions is that they always count excursions and meanders as nonnegative i will mostly consider them as nonnegative and explicitly say when i am not definition 2 the interior of a walk consists of every point other than the endpoints x 1 y 1 xs 1 ys 1 an irreducible walk is one in which the interior has a strictly higher altitude than the lower end point min y 1 ys 1 min y 0 ys for purposes of this paper and maple package the stationary walk 2 and walks that are direct steps to the right are not considered to be irreducible walks 3 irreducible is also used to refer to walks that do not exactly hit the final altitude until the final step 2 a single point 3 as the interior the edge between points is not strictly higher than the endpoints 4 1 3 paper organization i will exclusively use t as the variable in generating functions i also abbreviate generating function s as g f s this paper is organized in the following sections section 2 bounded this is the section in which a computer does the best it can give an exact g f solution since we have a linear system of equations computers are very good at solving these quickly and efficiently section 3 semi bounded an algebraic expression for the g f is no longer guaranteed however we can always find a polynomial in z t for which the g f is a root 4 section 4 guess and check finding a minimal polynomial is guaranteed so why not just guess this section gives a time and memory comparison showing why that would be a poor decision section 5 algebraic to recursive using the minimal polynomial of the g f is not always the fastest for enumerating this section introduces another maple package that converts the polyno mial into a 1 d recurrence section 6 unbounded we find minimal polynomials for g f s of unbounded walks and show an alternative method of producing recurrences in specific cases section 7 asymptotics we discover asymptotic results for several step sets to show relationships between the number of excursions bridges and to a lesser degree meanders section 8 applications we use the maple package to find some extended results and talk about probabilistic behavior we also express minimal polynomials for excursions of small step sets section 9 conclusions and future work a brief recap of what we can do with the scoringpaths maple package and how we can extend the work this paper is produced in conjunction with the maple package scoringpaths it is downloadable from math rutgers edu bte 14 code scoringpaths scoringpaths txt i will mention various functions of the package in bold all functions mentioned in this paper are included in the accompanying maple package some functions have been borrowed from other packages with credit and included in scoringpaths for completeness all comparisons of time 4 in the formal power series sense 5 and memory are done with maple 17 s codetools usage on linux version 3 10 0 514 el 7 x 86 64 with 8 gb of ram all values are averages of at least 30 trials unless otherwise specified pay careful attention to the units in some examples we are considering discrete walks as such we can consider steps with only integral values if the x steps are fractional there will likely not be any issues if the y steps are fractional many functions will not work as intended if all of the steps share a common factor in the y value it should be factored out leaving an equivalent problem the bounds will need to be factored and truncated as well leaving the common factor may cause problems with some functions the g f may produce non zero coefficients only every mth value it may be desirable to make the substitution t t 1 m for ease of reading i commonly use b n and occasionally c n as the number of walks of length n the step set and walk restrictions will be obvious from context or given explicitly a few functions to create sets of random steps have been included for quick demonstra tions randomstepset produces a generic set randomzerostepset parses for walks that begin and end on the x axis randomsemiboundedstepset parses for walks bounded below and ran domunboundedstepset produces a step set without any 0 y steps there are several paper functions that automatically produce an article with information about a given step set see the paper producing functions section of the help function the package gfun by salvy and zimmermann sz 94 a staple included with recent maple versions is also very useful for manipulating g f s it contains many functions for translating between algebraic expressions recurrences and differential equations satisfied by g f s 2 bounded the first case is walks that are bounded above and below consider an arbitrary set of steps s x 1 y 1 xn yn the goal is to find the g f denoted fa b for walks with step set s starting at 0 0 and bounded above and below by a 0 and b 0 respectively all walks paths in this section are constrained to a step set s and bounded above and below 6 2 1 walking anywhere first assume that the walk can end anywhere between the lines y a and y b a walk either never goes anywhere 1 or it takes a step tx and continues as if it is a walk starting at a new point fa y b y the following relation accomplishes that fa b 1 x y s tx fa y b y this by itself gets us nowhere but if a y 0 or b y 0 then fa y b y 0 since it is already starting in a prohibited region now write out all a b equations f 0 b a 1 x y s tx f 0 y b a y f 1 b a 1 1 x y s tx f 1 y b a 1 y fa b 0 1 x y s tx fa b y 0 y this is a linear system of a b equations with a b variables after discarding the constant 0 g f s for which maple s solve function can easily find the solution as a bonus we not only have fa b but also every fm n such that m n a b and m 0 n 0 the function boundedscoringpathseqsvars will produce all of the equations and vari ables for this system extremely quickly boundedscoringpaths will output only the g f fa b again this is very fast since it is solving a linear system of only a b equations to verify the values one can use boundedscoringpathsnumber which computes the number of walks by recursion allowable steps are any as long as there is not a 0 and a 0 such that they can sum to 0 within the bounds specifically if 0 m and 0 n are steps then it is allowable will not produce infinite values as long as the width is small enough a b n m gcd m n proof let s 0 m 0 n and assume m n also assume gcd m n 1 if a b n m 1 then we can always take at least one of the s steps since there is a finite number of altitudes then must be acollision at some point a loop if gcd m n g 1 then reconsider the same problem after factoring g out of everything a a g b b g s 0 m g 0 n g 7 this bound only works for two 0 steps for more than two 0 steps the width must be even shorter for some combinations e g 0 u v 0 u 0 u v there is no allowable width that includes all steps 5 2 1 1 examples example 3 close american football games consider trying to enumerate the number of american football games in which the teams are never separated by more than 1 score on a given play 6 it is possible for one team to score 2 3 6 7 or 8 points it is also possible for one team to score 6 points and the opposing team to score 1 or 2 points though these are pretty rare occurrences what if we want to enumerate the number of games with n scoring plays that end separated by no more than 1 score we can use the step set s 1 2 1 3 1 6 1 7 1 8 1 5 1 4 1 2 1 3 1 6 1 7 1 8 1 5 1 4 each step represents 1 scoring play and how many points the home team gained relative to the away team since the maximum scoring play is 8 points we make the bounds y 8 8 the g f is then found with boundedscoringpaths s 8 8 t 1 10 t 13 t 2 37 t 3 40 t 4 28 t 5 26 t 6 2 t 7 1 4 t 59 t 2 77 t 3 170 t 4 234 t 5 92 t 6 142 t 7 4 t 8 6 t 9 this sequence is new in the oeis a 301379 oeib example 4 speed enumeration bounded 1 consider finding the first 1000 coefficients of the g f found in example 3 above we could use brute force recursion in boundedscoringpath snumber or take a taylor series expansion since we have an explicit form for the g f from boundedscoringpaths table 1 bounded walk enumeration method memory used memory allocation cpu time real time brute force recursion 60 23 mib 24 mib 309 53 ms 308 90 ms g f construction 3 27 mib 0 bytes 30 17 ms 33 50 ms taylor enumeration 4 86 mib 0 bytes 4 93 ms 5 07 ms total 8 13 mib 0 bytes 35 10 ms 38 57 ms 5 assuming that one can get to the edges of the boundary u v u u v u 0 a loop 6 counting untimed downs as part of the previous play 8 http oeis org a 301379 using the g f method of enumeration is about 8 times as fast and uses a much smaller amount of memory 1 8 th 2 2 returning to the x axis the above equations are for g f s of walks that are able to end anywhere what if we want a g f for walks that must end back at the x axis ayyer and zeilberger solved the bounded bridge case but not the bounded free walk case using different relations but the same general method az 08 they also use the equivalent problem of walks between parallel lines of positive slope instead of between horizontal lines let fa b now denote the g f for walks that begin at 0 0 and end on the x axis again we either never get moving 1 or we take a step and then must take a path back to the x axis let ea b c denote the g f for paths that start at 0 c end on the x axis and never touch the x axis beforehand now that ea b c is introduced we can write the relation for fa b fa b 1 x 0 s tx fa b x y s y 6 0 txea b y fa b 2 1 there is also the possibility of just moving along the x axis to start after returning to the x axis we can now take any walk as before hence the multiplication by fa b we now need the equations for ea b c for a c b if any step would return to the x axis then we are done otherwise it must continue as a new ea b c path ea b c x c s tx x y s y 6 c txea b c y we now have a set of linear equations to solve for the ea b c to produce all of the equations and variables use equalboundedscoringpathseqsvars once the ea b c system is solved eqn 2 1 is linear in fa b so we or rather a computer will find a rational g f solution use equalbounded scoringpaths for the single solution to verify the result one can check using the enumeration in equalboundedscoringpathsnumber the irreducible g f s can be checked with specificirre ducibleboundedscoringpathsnumber 2 2 1 old time basketball the methods of relating generating functions were inspired by ayyer and zeilberger s work az 07 they found the following relation 9 theorem 5 let fw denote the generating function for the number of walks subject to step set s 1 2 1 1 2 1 1 2 1 2 that start at 0 0 end at n 0 and never go below the x axis or above the line y w then fw satisfies the following recurrence relation fw 1 tfw 2 tfwfw 1 2 t 2 fwfw 1 fw 2 t 3 t 4 fwfw 1 fw 2 fw 3 t 5 fwfw 1 fw 2 fw 3 fw 4 proposition 6 the initial conditions are given as follows f 0 1 f 1 1 1 t f 2 1 t 1 2 t 3 t 2 f 3 1 2 t 3 t 2 1 3 t 5 t 2 2 t 3 t 4 f 4 1 3 t 5 t 2 2 t 3 t 4 1 4 t 6 t 2 2 t 3 if we compute equalboundedscoringpaths 1 2 1 1 2 1 1 2 1 2 w 0 t for w 0 4 then the initial conditions match and we can verify theorem 5 empirically for any fixed w 2 2 2 examples example 7 tied american football games consider the similar example 3 but this time we want the teams to be tied at the end of the game our step set is the same the only difference is in which method we use equalboundedscoringpaths s 8 8 t 1 4 t 45 t 2 43 t 3 98 t 4 108 t 5 24 t 6 30 t 7 1 4 t 59 t 2 77 t 3 170 t 4 234 t 5 92 t 6 142 t 7 4 t 8 6 t 9 this sequence is new in the oeis a 301380 oeic example 8 speed enumeration bounded 2 once again let us find the first 1000 coefficients of a g f this time the one found in example 7 above table 2 bounded bridge enumeration 1000 terms method memory used memory allocation cpu time real time brute force recursion 55 98 mib 24 mib 278 93 ms 279 03 ms g f construction 10 13 mib 8 mib 102 43 ms 103 20 ms taylor enumeration 4 85 mib 0 bytes 5 20 ms 5 10 ms total 14 98 mib 8 mib 107 63 ms 108 30 ms again the g f method is faster this time about 2 5 times as fast and 1 4 th the memory 10 http oeis org a 301380 3 semi bounded we now remove the restriction of bounding walks from above 7 ayyer and zeilberger also pro vided relations for describing excursions that are similar to those included here az 08 duchon had previously tackled the case of excursions using much different language but the same overall method duc 00 let s denote the set of steps as in the previous section let f now denote the g f for nonnegative excursions with step set s that begin at 0 0 and end on the x axis how will we describe f in an equation we could try to use the same method as section 2 2 and write f 1 x 0 s tx f x y s y 6 0 txey f where ey is the g f for walks that start at 0 y end at n 0 and never hit the x axis beforehand however to describe ey as in section 2 2 by looking at the first step would require writing equa tions for all ei 0 since a walk could get arbitrarily far from the x axis before returning 8 at some point all of the ei equations would look essentially the same and it may be possible to take limits of their form to find a solution for ey however there is an easier method ayyer and zeilberger az 07 used a standard idea in combinatorics of irreducible walks to describe fw in section 2 2 1 we will use them as well let fa b denote the g f for nonnegative walks that start at 0 a and end at n b note that f 0 0 f is what we are typically looking for let ga b denote the g f for walks that start at 0 a end at n b and stay above the line y min a b except at the respective endpoint note then that ga b ga b 0 or g 0 b a if b a 9 then f 0 0 1 g 0 0 x 0 s tx f 0 0 3 1 either the walk is stationary 1 or it returns to the x axis g 0 0 x 0 s t x and then continues as if it were new multiplication by f 0 0 g 0 0 x 1 y 1 s y 1 0 x 2 y 2 s y 2 0 tx 1 fy 1 1 y 2 1 t x 2 3 2 7 to look at walks solely bounded above simply change the sign of the y value of every step or note that every nonnegative excursion is in bijection with a nonpositive excursion by reversing the order of steps 8 we could instead look at the final step but that is essentially the method described in the next paragraph 9 in this definition g 0 0 does not include stationary walks or walks that are solely a step directly to the right if this is what one desires then use g g 0 0 1 x 0 s t x 11 an irreducible 0 0 walk can be characterized by how it departs from the x axis tx 1 and how it returns tx 2 there must be an intermediate walk between these two steps fy 1 1 y 2 1 that does not touch the x axis hence the shift now we need to describe each new fa b a b fa b b i 0 ga i 0 f 0 b i 3 3 a b fa a b 1 i 0 ga i 0 f 0 b i f 0 0 3 4 a b fa b a 1 i 0 ga i 0 f 0 b i f 0 0 g 0 b a 3 5 we can characterize a walk by how close it gets to the x axis an fa b walk can go i levels below the level of y min a b in this case we have an irreducible walk down to the lowest point ga i 0 and then an arbitrary walk to the final level that does not go any lower f 0 b i if a b then a walk that does not go below level y a is equivalent to f 0 0 if a b then a walk that does not go below level y a consists of an arbitrary walk back to the same level without going lower f 0 0 followed by an irreducible walk to the final level of y b g 0 b a now we must describe the irreducible walks that have not been covered ga 0 x y s y 0 fa 1 y 1 t x 3 6 g 0 a x y s y 0 tx fy 1 a 1 3 7 an irreducible walk can be characterized by how it reaches tx the lowest point the rest of the walk is arbitrary as long as it does not hit the x axis again hence the shift we need to show that this iterated process does eventually terminate this can easily be justified because the largest index of either g or f will be max x y s y the maximum step size thus there is a finite number of g f that we need to describe in order to have a closed system use equalsemiboundedscoringpathseqsvars to generate these variables and their equations the equations are no longer linear and so maple s built in solve function does not work as nicely instead we use the basis procedure in the groebner package to find definition 9 minimal polynomial the minimal algebraic equation satisfied by the generating function p such that p f 0 in terms of formal power series we refer to p as the minimal polynomial when discussing the degree of the minimal polynomial we are considering the degree of f in p unless explicitly stated that we are considering t 12 to produce this polynomial use equalsemiboundedscoringpaths to produce an ideal polynomial for each g f use allequalsemiboundedscoringpaths 10 if you want the minimal polynomial for only a single variable use specificequalsemiboundedscoringpaths the mini mal polynomial is typically found when the groebner basis receives the desired variable as the lowest order lexicographically occasionally the groebner basis will not produce the minimal polynomial but instead a product of it and another polynomial one can recover the minimal polynomial by factoring the output and testing which factor satisfies p f 0 in terms of formal power series 11 every function that outputs an algebraic expression has had findproperroot appended to the end to properly parse the minimal polynomial example 10 semi bounded example let s 0 3 1 2 2 0 3 1 the g f f for the number of excursions that do not go below y 1 and have step set s is found to satisfy using equalsemiboundedscoringpaths s 1 t f t 18 f 4 t 14 t 2 1 f 3 2 t 7 t 2 1 2 f 2 t 2 1 5 f t 2 1 4 0 this is actually a fairly simple answer if we change 0 3 0 3 then the minimal polynomial is degree 10 in f and takes 4 lines to write this polynomial can then be used to discover the enumeration hidden in the coefficients of the taylor series expansion by setting f 0 1 and then iterating f 0 p f 0 f 0 to find a fixed point solution 12 finding the coefficients in this manner requires finding p use equalsemi boundedscoringpathscoefficients finding the minimal polynomial can be a time consuming process an alternative method is to iterate a fixed point solution of a vector of all g f and then pick out f 0 0 initialize fa a 1 and every other g f to 0 13 now iterate all of the g f into their respective equations truncating to the desired coefficient eventually we will reach a fixed point for the vector of solutions to do this use equalsemiboundedscoringpathsseries however for most reasonable calculations of the coefficients 1000 terms finding the values via brute force recursion with specificequal boundedscoringpathsnumber is faster than either iterating technique example 11 speed enumeration excursions we want to obtain the number of nonnegative 10 this can be slow as it requires finding a groebner basis for every variable 11 by checking a truncated version of f in most cases f 1 is sufficient to see which factor works in general enu merate m terms first using the proper enumerating function and see if the corresponding polynomial is o tm signifying a root 12 this glosses over why the convergence works it becomes an issue in the unbounded case 13 staying stationary is only valid for general walks that begin and end at the same level 13 excursions with step set s 1 2 1 1 1 0 1 1 1 2 let f denote the corresponding g f then 14 t 4 f 4 t 2 t 1 f 3 t t 2 f 2 t 1 f 1 0 3 8 a truncated solution in formal power series and the one that makes sense in terms of our prob lem is f 1 t 3 t 2 9 t 3 32 t 4 120 t 5 473 t 6 1925 t 7 8034 t 8 34188 t 9 147787 t 10 we compare and contrast the amount of time and memory to enumerate the first 500 and 1000 coefficients of f in the following tables 1 set up the g f equations and then iterate a vector of solutions using equalsemibounded scoringpathsseries 2 solve for the minimal polynomial eqn 3 8 and iterate a single solution with equalsemi boundedscoringpaths 3 use maple s taylor function on the minimal polynomial 15 4 use brute force recursion and maple s option remember specificequalsemiboundedscor ingpathsnumber table 3 500 term excursion enumeration method memory used memory allocation cpu time real time vector set up 16 58 kib 0 bytes 300 s 766 s iterating 100 04 gib 55 64 mib 4 45 m 4 09 m total 100 04 gib 55 64 mib 4 45 m 4 09 m polynomial 2 63 mib 0 bytes 19 23 ms 18 63 ms iterating 23 61 gib 20 84 mib 64 52 s 58 56 s total 23 61 gib 20 84 mib 64 54 s 58 58 s polynomial 2 63 mib 0 bytes 19 23 ms 18 63 ms taylor 328 97 mib 53 85 mib 3 20 s 3 18 s total 331 60 mib 53 85 mib 3 22 s 3 20 s brute force recursion 186 60 mib 328 mib 1 569 s 1 472 s 14 using equalsemiboundedscoringpaths s 0 t f 15 requires replacing f by z and using rootof p 14 finding the polynomials takes negligible time and memory in comparison to actually enumerat ing the coefficients beyond the first few terms table 4 1000 term excursion enumeration method memory used memory allocation cpu time real time vector iterating 1 31 tib 159 26 mib 63 84 m 51 86 m single iterating 300 84 gib 15 32 mib 14 50 m 11 93 m taylor 1 82 gib 489 68 mib 12 20 s 11 12 s brute force recursion 0 85 gib 508 mib 7 53 s 7 13 s so using recursion is the fastest but also must reserve the most memory the other meth ods use more memory in total but can recycle much of what they used we can best all of the methods with another recursion that is faster and uses less memory see example 16 before implementing findproperroot the groebner basis output a degree 5 polynomial that took over 5 times as long to iterate as the degree 4 minimal polynomial whether iterating a single polynomial or the entire vector of solutions is faster depends on the degree of the minimal polynomial and the number of variables in the closed system and the number of terms to enumerate an interesting question would be to look at the time complexity of this method of enumeration the vector and single polynomial iteration could potentially be optimized to pick out coefficients from each monomial instead of expanding everything and then picking only relatively few terms this would help the minimal polynomial iteration much more as the vector iteration only relies on degree 2 expressions 3 1 arbitrary lower limit what if we want to consider walks that stay above an arbitrary lower bound y c as in example 10 this is actually very easy by shifting the walk to be nonnegative we are now looking for fc c describe fc c using eqn 3 4 again iterating on all new g f will eventually yield a closed system since the indices are bounded by max max x y s y 1 c this shifting technique is what the maple package utilizes when it is given a lower limit other than 0 for semi bounded walks the maple functions are always focused on obtaining g f s for walks that begin at the origin other produced g f are purely bonus to obtain a g f that 15 starts at 0 c input a lower limit of c and take the g f that corresponds to starting at the origin 3 2 meanders what if we do not care where the walk ends as long as it stays above y c neither ayyer and zeilberger az 08 nor duchon duc 00 investigated semi bounded free walks in this case we can actually utilize the irreducible walks we have just created recall the irreducible g f s in eqns 3 6 and 3 7 let ka denote the g f for nonnegative meanders that begin at 0 a restricted to step set s then k 0 1 g 0 0 x 0 s tx k 0 x y s y 0 txky 1 the walk can be stationary 1 it can return to the x axis g 0 0 x 0 s t x and continue as a new meander k 0 or we take the first step t x and continue as a new meander that never returns to the x axis ky 1 g 0 0 the g f for irreducible walks that return to the x axis already has a description from our previous work we need only describe the new ki 16 ka a 1 i 0 ga ik 0 k 0 a i 1 gi 0 1 k 0 the meander can drop down to any lower altitude ga i ga i 0 and then continue as a new me ander k 0 never dropping further or the meander will never go below y a so it is equivalent to a meander from the origin k 0 and since we have already described the irreducible walks earlier we now have a closed system that we can use to solve for k 0 to produce the entire system of equations use semi boundedscoringpathseqsvars again we use groebner basis to find a minimal polynomial semiboundedscoringpaths to find the minimal polynomials for all 17 of the variables use allsemiboundedscoringpaths though this will likely take a while for a specific ka use specific semiboundedscoringpaths for any ga b fa b it is best 18 to use specificequalsemiboundedscor ingpaths example 12 for comparison we use the same step set as in example 10 s 0 3 1 2 2 0 3 1 the g f k for the number of meanders that do not go below y 1 and have step set s is found 16 if they exist 17 including all of the irreducible and specific altitude walks from the previous section 18 and necessary compatibility was removed for ease of use 16 to satisfy using semiboundedscoringpaths s 1 t k t 19 t 2 t 1 k 4 t 12 4 t 6 t 4 3 t 3 6 t 2 t 3 k 3 3 t 6 2 t 9 2 t 8 t 7 4 t 6 2 t 5 2 t 4 t 3 3 t 2 1 k 2 4 t 12 8 t 11 7 t 10 11 t 9 7 t 8 3 t 7 7 t 6 6 t 5 6 t 4 2 t 3 4 t 2 1 k t 9 3 t 8 4 t 7 2 t 6 6 t 5 4 t 4 3 t 3 3 t 2 1 0 sadly the coefficients do not factor as nicely as in example 10 now that we have a method of describing the g f for meanders let us compare how fast it is for enumeration example 13 speed enumeration meanders we use the simpler step set s 1 2 1 1 1 0 1 1 1 2 and let k be the g f for the number of nonnegative meanders with step set s then 19 t 2 5 t 1 2 k 4 t 5 t 1 2 k 3 3 t 5 t 1 k 2 5 t 1 k 1 0 3 9 a truncated solution is k 1 3 t 12 t 2 51 t 3 226 t 4 1025 t 5 4724 t 6 22022 t 7 103550 t 8 we repeat our analysis of differing methods of enumeration from example 11 1 iterating a vector of solutions using semiboundedscoringpathsseries 2 iterating a fixed point solution after solving for the polynomial eqn 3 9 with semi boundedscoringpaths 20 3 using maple s taylor function on the minimal polynomial 21 4 enumerating using brute force recursion and maple s option remember specificsemi boundedscoringpathsnumber 19 using semiboundedscoringpaths s 0 t k 20 all of this can be accomplished with the one function semiboundedscoringpathscoefficients 21 requires replacing k by z and using rootof p 17 table 5 1000 term meander enumeration method memory used memory allocation cpu time real time vector set up 21 07 kib 0 bytes 233 s 233 s vector iterating 2 18 tib 15 29 mib 102 64 m 84 48 m total 2 18 tib 15 29 mib 102 64 m 84 48 m polynomial 6 37 mib 0 bytes 43 00 ms 43 03 ms single iterating 304 99 gib 30 58 mib 13 88 m 11 64 m total 305 00 gib 30 58 mib 13 88 m 11 64 m polynomial 6 37 mib 0 bytes 43 00 ms 43 03 ms taylor 1 85 gib 490 mib 11 33 10 62 s total 1 86 gib 490 mib 11 37 s 10 66 s brute force recursion 1 08 gib 0 52 gib 7 93 s 7 465 s again there is an even faster recursive formula see example 17 4 guess and check method zeilberger provided a guess and check method and maple package w 1 d ez 15 for finding algebraic expressions in the semi bounded case where all steps have x step 1 phillippe duchon guaranteed that the results are algebraic thus the guess and check method will work eventu ally if you set the search parameter high enough for semi bounded cases with differing x steps and unbounded cases there is no guarantee that guessing will eventually work mr 09 though you may get lucky and produce an algebraic equation that has the minimal polynomial as a root another advantage of this paper s method over guess and check is that this method is typically much much faster setting up the equations takes a set amount of time that is linear in the maximum step size s and the lower limit the time sink comes in finding a groebner basis but this is still typically faster empir will take a list of the first few coefficients of the g f f and attempt to find an al gebraic equation that f satisfies by guessing the degree and trying to solve for the coefficients 18 empirf will do this faster 22 by utilizing the gfun package both empir and empirf require enu merating the first few terms example 14 excursion time comparison consider looking for an algebraic equation for the g f for nonnegative excursions with step set s 1 2 1 1 1 0 1 1 1 2 it takes 23 table 6 finding excursion minimal polynomial s 1 2 1 1 1 0 1 1 1 2 method memory used memory allocation cpu time real time esbsp 2 63 mib 0 bytes 19 23 ms 18 63 ms empir 91 61 mib 5 60 mib 734 ms 735 ms empirf 4 33 mib 0 bytes 33 87 ms 35 90 ms equalsemiboundedscoringpaths esbsp takes about 3 of the time and memory that empir requires and 60 of the time and memory as empirf example 15 meander time comparison now try to find an algebraic equation satisfied by the g f for nonnegative meanders with step set s 1 2 1 1 1 0 1 1 1 2 24 table 7 finding meander minimal polynomial s 1 2 1 1 1 0 1 1 1 2 method memory used memory allocation cpu time real time sbsp 6 37 mib 0 bytes 43 00 ms 43 03 ms empir 91 68 mib 5 45 mib 749 ms 770 ms empirf 4 74 mib 0 bytes 36 53 ms 38 63 ms sbsp semiboundedscoringpaths as expected this package is still much faster than empir interestingly empirf appears to be as fast if not a little faster empirf is still handicapped in its range of applications and so the slight speed up is sacrificed for versatility in fact adding 1 3 to the step set already makes empirf fail for the preset search bound the minimal polynomial has degree and order 10 in that case easily found by semibounded scoringpaths in 1 4 s 22 almost always 23 the actual minimal polynomial is shown in example 11 24 the minimal polynomial is shown in example 13 19 the other bonus is that this paper s method allows for any size x step w 2 d could poten tially be used to solve this problem once it has been restricted to look for the coefficient of xn y 0 however this would make the already slow guessing method even slower 5 algebraic to recursive 5 1 conversion there is a classical method for deducing from the algebraic function satisfying the g f a linear recurrence with polynomial coefficients satisfied by the coefficients of the g f in question see chapter 6 of the concrete tetrahedron by kauers and paule kp 11 the method is implemented in the maple package gfun sz 94 and also in zeilberger s maple package schutzenberger that is used here the schutzenberger package also contains empirf for obtaining the minimal polynomial but we now have a much better method of producing the minimal polynomial to convert an algebraic formula to a recurrence formula use algtorec let b n denote the number of walks of length n interestingly sometimes a larger non minimal polynomial produces a better lower order re currence example 16 better excursion recursion let s 1 2 1 1 1 0 1 1 1 2 let f de note the g f for nonnegative excursions 25 then its coefficients satisfy 0 3125 n 1 n 2 n 3 n 4 b n 250 n 4 n 3 n 2 27 n 122 b n 1 25 n 4 n 3 107 n 2 1457 n 4316 b n 2 10 n 4 304 n 3 3233 n 2 9864 n 6513 b n 3 2821 n 4 56794 n 3 425771 n 2 1407974 n 1731540 b n 4 2 n 7 413 n 3 6986 n 2 39356 n 73830 b n 5 n 8 n 7 99 n 2 1241 n 3900 b n 6 2 2 n 15 n 9 n 8 n 7 b n 7 5 1 25 the minimal polynomial is given in example 11 20 the following are the time and memory requirements for various stages of enumerating we need to create the minimal polynomial with equalsemiboundedscoringpaths convert it to an improved recursive formula eqn 5 1 for the coefficients of f with algtorec and then enumerate with seqfromrec table 8 enumerating excursions more efficiently method memory used memory allocation cpu time real time esbsp 2 63 mib 0 bytes 19 23 ms 18 63 ms algtorec 35 84 mib 3 12 mib 267 93 ms 262 40 ms seqfromrec 123 05 mib 24 mib 375 27 ms 375 37 ms total 161 52 mib 27 12 mib 662 43 ms 656 40 ms esbsp equalsemiboundedscoringpaths as expected this streamlined recurrence is much faster and less memory intensive than the basic recurrence in example 11 there is an up front cost for creating the improved recurrence but if the goal is to enumerate enough terms it can be worth it in this case enough is less than 500 before findproperroot was implemented to automatically parse the minimal polynomial we converted a larger polynomial into a sixth order recurrence in about 2 4 seconds example 17 better meander recursion let s 1 2 1 1 1 0 1 1 1 2 and k denote the g f for nonnegative meanders 26 the coefficients now satisfy 0 625 n 1 n 2 n 3 n 4 b n 250 5 n 21 n 4 n 3 n 2 b n 1 50 n 4 n 3 7 n 2 95 n 270 b n 2 20 n 4 32 n 3 367 n 2 1365 n 1620 b n 3 n 5 463 n 3 6691 n 2 32442 n 52704 b n 4 2 n 5 n 6 53 n 2 593 n 1674 b n 5 4 n 5 2 n 13 n 7 n 6 b n 6 oddly it is a lower order recurrence despite the slightly higher complexity of describing mean ders the following are the time and memory requirements for various stages of enumerating 26 the minimal polynomial is given in example 13 21 table 9 enumerating meanders more efficiently method memory used memory allocation cpu time real time sbsp 6 37 mib 0 bytes 43 00 ms 43 03 ms algtorec 110 77 mib 29 39 mib 659 73 ms 633 10 ms seqfromrec 89 58 mib 4 mib 284 57 ms 257 23 ms total 206 72 mib 33 39 mib 987 30 ms 933 36 ms sbsp semiboundedscoringpaths this improved recurrence is about 8 times as fast as the basic recurrence in example 13 it is not quite as much of a savings as the case of excursions but it is still extremely good 5 2 searching there is an alternative to converting the minimal polynomial into a linear recurrence since we know that this will be possible we could simply guess at the form of the recurrence and use a suitable number of starting values to determine the coefficients findrec will accomplish this guessing method the problem is that we do not know an upper bound for the order and degree setting the bound extremely high or searching until a recurrence is found would suffice however this is not ideal example 18 let s 1 2 1 3 the minimal polynomial is given later in section 8 3 2 let b n denote the number of nonnegative excursions of length 5 n b n was found to satisfy a 4 th order degree 11 recurrence relation using findrec and a 7 th order degree 9 recurrence relation using algtorec 27 both relations 28 are fairly large and so are not included here 29 we compare and contrast the methods in the table below table 10 alternative recurrence step set 1 2 1 3 method degree order memory used allocated cpu time real time algtorec 9 7 165 84 gib 2 46 gib 46 99 h 12 06 h findrec 11 4 0 50 gib 388 01 mib 4 47 s 4 31 s 272 trials 28 the findrec recurrence matches with andrew lohr s calculation as expected since they are computing the same result 29 they are available at math rutgers edu bte 14 articles scoringpaths 23 recurrence txt 22 simply guessing at the form appears to be the much better choice here example 19 let s 1 2 1 1 1 0 1 1 1 2 see example 11 for the minimal polyno mial let b n denote the number of nonnegative excursions of length n then 0 2 n 4 2 n 11 n 7 n 6 b n 5 n 6 43 n 3 597 n 2 2738 n 4142 b n 4 124 n 4 2110 n 3 13305 n 2 36815 n 37686 b n 3 5 n 3 2 n 3 22 n 2 305 n 726 b n 2 25 n 3 n 2 8 n 2 72 n 159 b n 1 125 n 5 n 3 n 2 n 1 b n this was found with findrec while algtorec found 0 2 2 n 15 n 9 n 8 n 7 b n 7 n 8 n 7 99 n 2 1241 n 3900 b n 6 2 n 7 413 n 3 6986 n 2 39356 n 73830 b n 5 2821 n 4 56794 n 3 425771 n 2 1407974 n 1731540 b n 4 10 n 4 304 n 3 3233 n 2 9864 n 6513 b n 3 25 n 4 n 3 107 n 2 1457 n 4316 b n 2 250 n 4 n 3 n 2 27 n 122 b n 1 3125 n 1 n 2 n 3 n 4 b n the comparison in methods is given below table 11 alternative recurrence step set 1 2 1 1 1 0 1 1 1 2 method degree order memory used allocated cpu time real time algtorec 4 7 38 32 mib 42 61 mib 355 60 ms 354 44 ms findrec 4 5 62 38 mib 28 00 mib 618 07 ms 630 87 ms conversion is actually more efficient though not ideal in this case though the difference is not as extreme as that shown in table with smaller step sizes conversion appears to be better this is likely due to the inten sive task of converting higher degree polynomials while guessing avoids that hurdle for small 23 enough examples guessing is a larger search space than conversion because of the way findrec is programmed it is guaranteed that a found recurrence has order less than or equal to that of algtorec depending on the goal when enumerating lower degree save computation or lower order save memory is optimal one can use algotrec s order and degree as a proper bound for use in findrec but instead of directly converting the minimal polynomial it may be possible to find a bound on the order and degree of a recurrence based on the degrees of the g f and t in the minimal polynomial we may also be able to derive an upper bound based on the number of variables in the closed system we created i was unable to prove any useful bounds and these examples are evidence against bound ing the order and degree directly by the degrees of the g f and t all three examples have minimal polynomials with smaller degree and total degree than the order of the found recurrences in fact we know that the sum of the degree and order of any recurrence has to be greater than the total degree of the minimal polynomial in these cases since we searched everything lower the first example showed that findrec can be an extreme improvement over algtorec and the second example showed when algtorec can just edge out findrec the following example demonstrates that algtorec can be the significantly better choice example 20 let s 1 1 3 1 1 0 3 0 2 1 1 2 2 2 the minimal polynomial letting k denote the g f of meanders with step set s is 1 t 3 5 t 2 4 t 1 k t 4 t 3 2 t 3 2 t 2 3 t 1 k 2 t t 1 2 t 3 2 t 2 3 t 1 k 3 the recurrences found by conversions and searching are much too large to include here for their information see math rutgers edu bte 14 articles scoringpaths recurrenceoutputfile 24 table 12 alternative recurrence step set 1 1 3 1 1 0 3 0 2 1 1 2 2 2 method degree order memory used allocated cpu time real time polynomial 2 55 mib 24 00 mib 20 80 ms 24 50 ms algtorec 3 31 73 92 mib 11 39 mib 491 03 ms 475 13 ms total 76 47 mib 35 39 mib 511 83 ms 499 63 ms 161 terms 24 11 mib 0 bytes 190 00 ms 193 00 ms findrec 5 15 2 46 gib 504 mib 23 30 s 21 20 s total 2 48 gib 504 mib 23 49 s 21 39 s conversion is surprisingly 43 times faster and has roughly 1 32 nd of the memory require ments we chose to enumerate 161 terms of the sequence because that was sufficient once we knew the degree and order of the converted recurrence to guarantee findrec would encounter a solution typically we do not use both findrec and algtorec we should simply find a set large bound of numbers but enumerating was a small portion of findrec s time so it does not matter too much to this example we have used meanders instead of excursions for our 3 rd example but they are similar enough to compare the important facets of the problem are the degree of the minimal polyno mial and the number of steps it would appear that increasing the number of steps does not affect the runtime of algtorec as much as the runtime of findrec the runtime of algtorec is highly dependent on the degree of the minimal polynomial 30 the degree of the minimal polynomial is generally correlated with the number of variables in the system though not necessarily equal or bounded one way or the other example 11 has 7 variables in the closed system and a minimal polynomial of degree only 4 section 8 3 shows that a step set of 1 3 1 5 for nonnegative excursions yields a closed system with 18 variables yet the minimal polynomial has degree 56 the most important aspects of the step set to algtorec runtime are then the maximum and minimum 31 y steps since these dictate how many other walks we must consider findrec is much weaker with larger step sets inherently the recurrences will become more 30 the degree of t is much less relevant 31 most negative 25 complicated which means findrec must consider many more terms in its guesses the worst case most number of terms to address will occur when the order and degree of our search are the same since algtorec works better with minimal polynomials of lower degree and finding the minimal polynomial is generally very fast see example 13 i have chosen to have programs such as papersemibounded and bookequalsemibounded use findrec when the minimal polynomial has degree 8 and algtorec otherwise the cutoff was arbitrarily chosen based on a few random examples a rigorous cutoff would be useful for more widespread implementation 6 unbounded we remove the lower bound in this section and transition from analyzing excursions to analyzing bridges i was unable to find any current literature that analyzes the unbounded case with generating functions thus i am led to believe that this section is novel work again all walks are assumed to be constructed from a step set s 6 1 walking anywhere enumerating walks that go anywhere can be a trivial task first off the y values do not matter except for describing multiple steps with the same x step if all of the steps have x value m 0 then the number of walks of length m n is simply s n if we have steps with varying x values then the problem becomes finding combinations of the x values that sum to n in general the g f will be 1 1 x y s tx this g f is produced by unboundedscoringpaths the terms are generated by using taylor series unboundedscoringpathscoefficients or via recursion unboundedscoringpathsnum ber using maple s taylor series expansion is typically faster but both are extremely quick at enumerating the first 1000 terms 32 32 by utilizing maple s option remember in the recursive case 26 6 2 returning to the x axis a lot of the work we have done in the semi bounded case will prove useful here we cannot use the exact same method as in semi bounded section 3 suppose we tried describing a walk with a negative change in altitude the first and last steps could both be positive then we would need to describe a walk that has a larger negative change in altitude and so on we try a slightly different method let g denote the g f for walks with step set s that begin at 0 0 and end on the x axis a bridge we choose to introduce another g f which we denote hi for the number of walks from 0 i to n 0 that do not touch the x axis beforehand with the exception of h 0 starting on the x axis 33 recall the definitions of ga b and fa b the first equation is similar to f 0 0 g 1 h 0 x 0 s tx g a walk can be stationary or it returns to the x axis after some number of steps at which point it can take another g walk h 0 2 g 0 0 x y s y 2 y 1 i 1 g 0 it xhi y x y s y 2 y 1 i 1 gy i 0 t xhi an h 0 walk can be purely positive g 0 0 or purely negative g 0 0 34 note that walks below the x axis are in bijection with walks above the x axis by reversing the order of steps 35 we can then use g 0 a ga 0 and f a b fb a it is also possible for the h walk to cross the x axis without touching it this would involve an irreducible walk g 0 i a step across the x axis t x and another walk hi y to return to the x axis the previous sentence described crossing the x axis from above to below we could instead cross from below to above this would consist of an irreducible walk g 0 i y gy i 0 a step across the x axis t x and another walk hi to return to the x axis we already have equations to describe the irreducible walks we now need to describe the 33 h 0 does not include stationary walks nor walks that are steps directly to the right for that one will want to use h h 0 1 x 0 s t x 34 this is also partially why irreducible walks do not include steps to the right if g 0 0 did then i would have to write h 0 2 g 0 0 x 0 s tx which is less elegant 35 equivalent to rotating the walk 180 27 other h walks j 0 hj gj 0 x y s y 2 y 1 i 1 f j 1 i 1 t xhi y j 0 hj g 0 j x y s y 2 y 1 i 1 fy i 1 j 1 t xhi an hj 0 walk can either be a walk directly to the x axis gj 0 or it consists of an arbitrary walk that does not touch the x axis f j 1 i 1 followed by a step across t x and another walk hi y to return to the x axis similarly an hj 0 walk can either be a walk directly to the x axis gj 0 g 0 j or it consists of an arbitrary walk that does not touch the x axis f j 1 i y 1 fy i 1 j 1 followed by a step across tx and another walk hi to return to the x axis a brief lapse in concentration allowed me to write the alternative and much simpler relation h 0 2 g 0 0 x y s y 6 0 txhy the reason for shunning this simpler description is that the hy may be irreducible walks di rectly back to the x axis and thus double count a walk from g 0 0 the system of equations will be closed since the index of hi walks is bounded by max x y s y 1 all of the equations and variables are produced in equalunboundedscoringpathseqsvars again we use the basis procedure in the groebner package to find a polynomial p such that p g 0 in terms of formal power series to produce this polynomial use equalunbounded scoringpaths to produce the minimal polynomial for hj use specificunboundedscoringpaths we can try to produce the coefficients of the taylor series using the iteration g 0 p g 0 g 0 however because of convergence issues this will typically not work it is also potentially not ideal because it requires finding a groebner basis which can be time consuming however iterating a vector of solutions la the semi bounded section 3 does work to check these values use specificunboundedscoringpathsnumber to verify g and specificirreducibleunbounded scoringpathsnumber to verify hj 28 6 3 alternative method there is an alternative method for enumerating unbounded walks in the specific case that all of the steps have x step 1 az 90 the functions themselves are taken from the maple package ekhad by zeilberger i will start with an example example 21 consider the function g t n t 2 t 1 t t 2 n this represents a possible step set of s 1 2 1 1 1 1 1 2 a specific monomial in the expansion of g t n comes from all the ways of picking a power of t from each term this is equivalent to picking which step to take and in which order 1 g t 0 1 there is only 1 walk the stationary walk 2 g t 1 t 2 t 1 t t 2 there are 4 possible steps each leading to a different final altitude 3 g t 2 t 4 2 t 3 t 2 2 t 1 4 2 t t 2 2 t 3 t 4 there are 4 ways to return to the x axis after 2 steps g t n enumerates all the ways to change altitude by c in the coefficient of the tc monomial in general for a step set s let g t n x y s t y n the procedure azd a t n n from package ekhad will give a recurrence for the contour around 0 integral of a with respect to t under hypergeometric assumptions i e azd returns the residue and if we represent a as a power series that means we extract the t 1 term so to find a recurrence for the number of walks that return to the x axis we will use a g t n t example 22 the input azd t 2 t 1 t t 2 n t n n yields as output 18 2 n 1 5 n 8 n 1 n 1 35 n 2 91 n 54 n 2 n 2 2 n 3 5 n 3 n 2 this translates as if we let b n denote the number of walks that return to the x axis after n steps 18 2 n 1 5 n 8 n 1 b n n 1 35 n 2 91 n 54 b n 1 2 n 2 2 n 3 5 n 3 b n 2 0 6 1 we can find a recursion for any change in altitude not just bridges if we are interested in walks that change in elevation by c then we should use a g t n tc 1 29 6 4 selected step sets the following examples are all produced by the one call equalunboundedscoringpaths s t g example 23 old time basketball we will follow up the previous example by using this paper s g f method of dynamical programming with the same step set let s 1 2 1 1 1 1 1 2 let g denote the g f for the number of unbounded bridges subject to step set s then g satisfies 9 t 4 4 t 1 2 g 4 2 3 t 2 4 t 1 g 2 t 0 and the coefficients satisfy using algtorec 108 n 1 2 n 1 b n 78 n 2 246 n 216 b n 1 n 2 17 n 9 b n 2 2 n 3 2 n 5 b n 3 0 interestingly we have obtained a different recurrence than what was found with the azd method eqn 6 1 both recurrences are correct typically azd will produce a lower order recurrence but with higher degree polynomial coefficients the simple alteration of the step set to s 2 2 1 1 1 1 2 2 makes the alter native method in section 6 3 ineffectual however the method presented in this paper is not bothered in the slightest let g denote the g f for the number of unbounded bridges subject to step set s then g satisfies 8 t 2 5 4 t 4 8 t 2 1 2 g 4 2 4 t 2 3 4 t 4 8 t 2 1 g 2 1 0 now we only have the option of conversion or guessing to find a recurrence for the coefficients of g using algtorec took only 69 ms and produced 32 n 3 n 2 b n 4 5 n 2 110 n 356 b n 2 8 15 n 2 160 n 439 b n 4 59 n 438 n 6 b n 6 10 n 8 n 6 b n 8 0 the reason to have x step as all 1 s versus having x step equal to y step is that the choice changes what g counts if all x steps are 1 g will count the number of ways to be tied after n total baskets if x step equals y step then g counts the number of ways to be tied at a score of n 2 to n 2 note that this interpretation means g has coefficient 0 for all odd powers of t teams cannot be tied after an odd number of points have been scored we could make the substitution t t in g and then g would count the number of ways to be tied at a score of n n 30 example 24 current basketball let s 1 3 1 2 1 1 1 1 1 2 1 3 let g denote the g f for the number of unbounded bridges subject to step set s then g satisfies 8 t 2 68 t 27 2 6 t 1 4 2 t 1 4 g 8 4 68 t 2 10 t 9 8 t 2 68 t 27 6 t 1 3 2 t 1 3 g 6 2 9120 t 4 3744 t 3 1264 t 2 212 t 135 6 t 1 2 2 t 1 2 g 4 4 1216 t 4 832 t 3 4 t 2 46 t 7 6 t 1 2 t 1 g 2 16 t 2 8 t 1 2 0 equalunboundedscoringpaths s t g originally gave a much larger polynomial that g satisfies after findproperroot was added to parse the output the smaller polynomial above was the result the coefficients satisfy using algtorec 36864 n 1 n 2 n 3 b n 3072 n 3 n 2 97 n 142 b n 1 64 n 3 4031 n 2 17601 n 19504 b n 2 16 1684 n 3 13491 n 2 31178 n 15240 b n 3 24 663 n 3 7222 n 2 28628 n 41563 b n 4 4 467 n 3 7011 n 2 35842 n 62490 b n 5 2 n 6 115 n 2 1080 n 2273 b n 6 3 3 n 20 3 n 19 n 7 b n 7 0 31 or using azd 96 n 1 n 2 n 3 2058 n 3 20335 n 2 66857 n 73300 b n 8 n 2 n 3 201684 n 4 2295356 n 3 9540055 n 2 16998380 n 10742400 b n 1 4 n 3 310758 n 5 4313617 n 4 23611469 n 3 63712598 n 2 84804508 n 44608800 b n 2 2 n 3 41160 n 5 591920 n 4 3361281 n 3 9453847 n 2 13262292 n 7512000 b n 3 3 3 n 11 3 n 10 n 4 2058 n 3 14161 n 2 32361 n 24720 b n 4 0 let s 3 3 2 2 1 1 1 1 2 2 3 3 let g denote the g f for the number of unbounded bridges subject to step set s then g satisfies 108 t 6 99 t 4 52 t 2 44 2 4 t 6 4 t 4 8 t 2 1 4 g 8 4 36 t 6 29 t 4 24 t 2 20 108 t 6 99 t 4 52 t 2 44 4 t 6 4 t 4 8 t 2 1 3 g 6 2 2160 t 12 4248 t 10 4347 t 8 992 t 6 16 t 4 1184 t 2 976 4 t 6 4 t 4 8 t 2 1 2 g 4 4 112 t 12 288 t 10 665 t 8 412 t 6 552 t 4 112 t 2 96 4 t 6 4 t 4 8 t 2 1 g 2 4 t 6 3 t 4 12 t 2 4 2 0 again equalunboundedscoringpaths s t g originally gave a more complicated polynomial before findproperroot was added we cannot use azd for this case however we can still obtain a recurrence using algtorec the conversion only took about 13 seconds but produced a recurrence of order 66 and degree 3 and as such is not included here 6 5 time comparison to reiterate the benefits of this paper and maple package over guessing for the polynomial the following examples illustrate the time savings 32 example 25 finding a polynomial let s 1 2 1 1 1 0 1 1 let g be the g f for bridges subject to step set s then 16 t 3 8 t 2 11 t 4 g 3 3 2 t g 1 0 this takes table 13 finding minimal polynomial s 1 2 1 1 1 0 1 1 method memory used memory allocation cpu time real time eusp 2 10 mib 0 bytes 18 27 ms 21 53 ms empir 34 94 mib 0 73 mib 294 93 ms 295 63 ms empirf 1 44 mib 0 bytes 14 27 ms 16 23 ms in this case empirf appears to be 25 faster than equalunboundedscoringpaths eusp but the time is so small the difference is likely to go unnoticed the next example shows why the scoringpaths package is superior to using empirf example 26 finding a polynomial 2 let s 1 2 1 1 1 0 1 1 1 2 let g be the g f for bridges subject to step set s then 5 t 4 5 t 1 2 t 1 2 g 4 2 t 1 5 t 2 5 t 1 g 2 t 0 this takes table 14 finding minimal polynomial s 1 2 1 1 1 0 1 1 1 2 method memory used memory allocation change cpu time real time eusp 7 70 mib 0 bytes 58 33 ms 61 43 ms empir 377 91 mib 31 29 mib 2 89 s 2 75 s empirf failed empirf happened to fail for this s while equalunboundedscoringpaths eusp only tripled in time and memory usage the only difference between this example and example 25 is the second step with positive y value eventually guessing should work but we have no way of knowing what the upper bound of search space is before blindly investigating expressing the g f equations is a set amount of time that is guaranteed to produce the solution the time complexity to find the minimal polynomial with groebner bases is an interesting question we leave to the reader 33 we have many different ways to enumerate the number of bridges with step set s we will compare their speed and memory usage here example 27 speed enumeration unbounded as with most previous examples we use the benchmark step set s 1 2 1 1 1 0 1 1 1 2 the following are time and memory requirements for enumerating 1000 terms of the sequence of bridges with step set s the different methods are 1 iterating the single polynomial found with equalunboundedscoringpaths does not work due to convergence issues beyond the scope of this paper 2 taylor cannot be used it gives the error does not have series solution taylor tends to work only if the minimal polynomial contains a g 1 term see example 25 3 iterating a vector solution with equalunboundedscoringpathsseries 4 brute force recursion using specificunboundedscoringpathsnumber 5 converting minimal polynomial to recurrence a obtain the polynomial with equalunboundedscoringpaths b convert to recurrence with algtorec the coefficients satisfy 0 125 n 1 n 2 b n 25 n 2 n 1 b n 1 5 21 n 2 89 n 96 b n 2 n 2 43 n 140 b n 3 2 n 4 n 7 b n 4 c enumerate using seqfromrec 6 using azd and then enumerating with seqfromrec 0 25 3 n 8 n 2 n 1 b n 5 3 n 5 2 n 5 n 2 b n 1 3 n 8 19 n 2 76 n 75 b n 2 2 3 n 5 2 n 5 n 3 b n 3 34 table 15 1000 term unbounded enumeration method memory used memory allocation cpu time real time vector set up 20 47 kib 0 bytes 200 s 200 s vector iterating 2 79 tib 30 54 mib 2 27 h 110 54 m polynomial 7 76 mib 0 bytes 59 40 ms 63 03 ms conversion 5 97 mib 8 kib 49 03 ms 51 97 ms enumeration 20 64 mib 2 16 mib 84 87 ms 81 50 ms total 34 37 mib 2 17 mib 193 30 ms 196 50 ms azd 2 45 mib 0 bytes 25 77 ms 30 53 ms seqfromrec 19 34 mib 3 59 mib 74 40 ms 74 43 ms total 21 79 mib 3 59 mib 100 17 ms 104 96 ms brute force recursion 1 41 gib 4 29 mib 12 69 s 11 91 s the alternate method is the fastest in this case it is about half of the time as converting but the actual enumeration after the preliminary set up is very similar the memory usage is similarly low however azd is only appropriate for specific cases with constant x step the key take away is that enumerating by combining scoringpaths and algtorec is much faster and leaner than brute force recursion and applicable in a wide range of cases if we change the step set back to s 1 2 1 1 1 0 1 1 then we can use taylor on the minimal polynomial as well as iterating the single solution after an appropriate change of iteration the difference is that example 25 had a g 1 term in its minimal polynomial while example 26 did not this allows one to write g as copies of itself which is what the iterative method is effectively accomplishing 7 asymptotics for determining asymptotic behavior i avoided analyzing the bounded cases as those resulted in explicit rational solutions which can already be handled very easily the asymptotic behavior of unbounded general walks is simply finding the number of combinations of x steps to yield a length of n the actual walk altitude does not matter 35 for semi bounded and unbounded cases once we have recurrences for the coefficients we can derive asymptotic expressions because of the nature of these quantities the number of walks of length n will always follow bn for some base b fs 09 wimp and zeilberger wz 85 created a method for automatically determining asymptotics for a linear recurrence including the constant of the leading term their package asyrec provides asy which attempts to determine the ex ponential power with which a recurrence grows asyc along with suitable starting values will also give the correct constant one task we can use this for is finding what proportion of walks are nonnegative let s 1 2 1 1 2 1 36 let f denote the g f for nonnegative excursions and b n denote the number of nonnegative excursions of length n then 37 0 1 f tf 2 0 4 n 2 b n n 2 b n 1 b n 4 n n 3 2 1 9 8 n 145 128 n 2 1155 1024 n 3 36939 32768 n 4 295911 262144 n 5 because the minimal polynomial is simple we could use the lagrange inversion formula to compute exact values of b n 38 but for most step sets with s 2 this will not work so the lif is not considered here let g denote the g f for bridges and c n the number of bridges of length n then 39 0 1 4 t 1 g 2 0 4 n 2 c n n 1 c n 1 c n 4 n n 1 1 8 n 1 128 n 2 5 1024 n 3 21 32768 n 4 399 262144 n 5 then the proportion of binary bridges that are dyck paths is asymptotically b n c n 1 n this matches with the known exact proportion of 1 n 1 the above example was not exactly revolutionary but the method allows for quick anal ysis of walks with any step set 36 x step is 1 2 so that excursions and bridges do not all have even length producing a bunch of extraneous 0 s 37 all of this can be produced by the one command equalsemiboundedpaper s 20 true true 38 this is what duchon used for several simple cases duc 00 39 this can be produced by unboundedpaper s 20 true true 36 dyck paths have been studied quite extensively the typical result is for walks with step set 1 0 0 1 from 0 0 to n n that stay below the line y x this is equivalent to enumerating nonnegative excursions with step set 1 1 1 1 changing the slope of the upper bound to rational a b is equivalent to using a step set 1 a 1 b this is called ra tional catalan combinatorics for a general conversion from walks below a line with slope m reflect the walk across the line through the origin with slope m 2 this produces an equiva lent nonnegative walk in the right hand plane andrew lohr studied the field of paths below rational slope with the goal of obtaining asymptotic constants lz 17 for his results go to http sites math rutgers edu ajl 213 drz rsp pdf lohr states a result by duchon in 2000 duc 00 that for any slope a b the number of paths below a line of that slope is asymptotically 1 n a b n an are we able to say anything about step sets of size 2 intuition would say the growth rate should be larger but how much larger first we need to tackle the scenario if we have steps with x step 0 recall we can only have steps directly up or down the maximum number of up steps we could have in an excursion or bridge of length n is n min yx x y s x 6 0 min y 0 y s replace the mins with maxs for down steps 40 we can only take so many steps in one direction before we have to start returning in order to make it to the x axis before length n let c denote the fraction above c 0 for step sets without vertical steps the worst case scenario 41 is that the remaining steps all have x step 1 then we have n cnn ways to place the vertical steps let s denote the size of s with the 0 steps removed then the number of walks is upper bounded usually very poorly by n 1 c n sn 1 c 2 cn s 1 c 1 1 c c n so the number of every type of walk is o bn n for some b 42 the bound may seem to contradict the dyck path example but remember that we cut the steps in half to avoid extraneous 0 s a good goal would be to improve this bound to something more meaningful 40 we technically do not need the x 6 0 since we assumed there were no steps directly down 41 largest number of walks 42 which matches with the earlier mentioned asymptotic 37 http sites math rutgers edu ajl 213 drz rsp pdf example 28 let s 1 1 1 0 1 2 then assuming f b g c are as before 0 1 t 1 f t 3 f 3 0 31 n 1 n 2 b n 6 2 n 5 n 2 b n 1 2 6 n 2 36 n 53 b n 2 2 2 n 9 n 3 b n 3 b n 0 8001188640 2 889881575 n n 3 2 1 1 7475722 n 2 6532889 n 2 4 0131981 n 3 and 0 1 3 t 1 g 31 t 3 12 t 2 12 t 4 g 3 0 31 n 1 n 2 c n 6 n 2 2 n 3 c n 1 2 6 n 2 24 n 23 c n 2 2 n 3 2 n 3 c n 3 c n 0 3488331868 2 889881575 n n 1 0 24757219 n 0 03549572 n 2 0 046925761 n 3 the exponential bound is simply s n 3 n fairly close to the actual asymptotic base and the proportion of excursions to bridges is b n c n 2 293700526 n also just a constant times 1 n finding the asymptotic behavior does not work in every case e g meanders with step set 0 1 1 1 2 1 2 0 2 1 if the asymptotic does not match with empirical data then asyc will notify the user of this is the ratio of nonnegative excursions to bridges always some constant times 1 n the following example is more experimental evidence for this conjecture example 29 let s 1 2 3 0 0 1 2 1 2 2 and f b g c as before then 0 1 t 1 t 2 t 1 f t 1 t t 2 1 2 f 3 b n 4 15 7 898354145 n n 3 2 0 1 3 t 1 t 2 t 1 g 4 t 9 15 t 6 27 t 5 54 t 4 66 t 3 27 t 2 27 t 4 g 3 c n 15 3 58 7 898354145 n n the actual recurrences obtained from conversion algtorec are not listed here due to size they are degree 2 order 18 and degree 2 order 16 respectively the base of the exponential is exactly 38 the same for b and c they are the same root of the same polynomial 43 and once again b n c n 232 3 675 1 n to compute the ratio for any step set use the shorthand ratioofwalks s we can also try to reason the ratio heuristically suppose we start with an excursion e we can reorder the steps cyclically or in any order and still have a bridge consider the set of such walks there are size of e such walks the reason for reordering cyclically would be to maintain the unique excursion in the set while the rest are bridges actually e is only unique if it was an irreducible excursion but potentially there is not much overlap similarly from a bridge b we could reorder the steps cyclically and we must obtain at least 1 excursion starting from the step after the minimum altitude of b we actually have the same number of excursions in this cyclic set as points of minimum altitude we have a relation between excursions and bridges that appears to be roughly linear some issues may be that an excursion of length n does not necessarily have size n we still have a linear relationship between the two bounded by max x x y s and even steps with x step 0 do not mess this up too horribly because we are considering excursions and bridges the walk returns to the x axis so can only go so far away before it must start returning since the return rate y x is finite we do not have steps directly up and down this again leads to a linear number of x step 0 allowed steps 7 1 discriminant another interesting result from analyzing asymptotic behavior is what the base of the exponent appears to be for all three of our examples the base can be found by taking the reciprocal of the smallest modulus of the roots of the coefficient of the leading term in the minimal polynomial of 43 the polynomial in question is 4 x 9 27 x 8 27 x 7 66 x 6 54 x 5 27 x 4 15 x 3 4 and the root has index 1 in maple notation 39 the bridges g f i e min z 4 z 1 0 1 4 min z 31 z 3 12 z 2 12 z 4 0 1 3 22 3 1 2 89 min z 4 z 9 15 z 6 27 z 5 54 z 4 66 z 3 27 z 2 27 z 4 0 1 7 90 this is the first estimate of the asymptotics from the inverse of the radius of convergence actually the polynomial whose root modulus we need can be taken to be the discriminant of the minimal polynomial which in the step sets given is the same for excursions and bridges in general one method that appears to find the base b for the exponential asymptotic behavior is 1 find the discriminant of the minimal polynomial 2 take the smallest positive real root 3 take the reciprocal of that root this will miss the possible sub exponential factors of n 3 2 etc the shorthand for this computa tion is implemented as asymptoticbase a more detailed analysis of singularities and the asso ciated asymptotics is available in analytic combinatorics by flajolet and sedgewick fs 09 7 2 meanders we have yet to analyze the asymptotic behavior of meanders let k denote the g f and d n the number of nonnegative meanders of length n for the case of dyck paths with a step set of 1 1 1 1 since we can have odd length walks now meanders satisfy 1 2 t 1 k t 2 t 1 k 2 0 4 n 1 d n 2 d n 1 n 3 d n 2 0 d n 0 797 n 2 n this says there are roughly 2 283 nonnegative meanders for each bridge of the same length all of the asymptotic behavior in this section was found using the conversion to recurrence and ex tracting the asymptotics from there 40 it turns out that meanders can follow very different asymptotic behavior depending on the step set example 30 for s 1 1 1 0 1 2 0 1 4 t 1 k 3 t 3 t 1 k 2 t 3 t 1 2 k 3 0 93 n 1 n 2 n 3 d n 2 80 n 293 n 3 n 2 d n 1 n 3 115 n 2 793 n 1318 d n 2 4 18 n 3 210 n 2 820 n 1071 d n 3 4 n 4 7 n 2 65 n 152 d n 4 2 n 5 n 4 2 n 11 d n 5 d n 3 5 2 3 n the base of the exponent happens to match the inverse of the smallest modulus of the roots of the discriminant of the minimal polynomial so meanders can by virtue of their endpoint flexibility greatly outnumber excursions and bridges finally meanders do not always follow s n let s 1 1 1 0 1 1 2 2 then 0 1 3 t 2 3 t 1 k t 3 t 1 t 2 3 t 1 k 2 t 2 t 2 3 t 1 2 k 3 d n 0 307 3 13 2 n 0 307 3 303 n the recurrence found was 11 th order and 3 rd degree so is not included here 44 it was produced in less than one second using algtorec and s 1 2 2 1 1 0 1 2 2 1 yields relations of 0 1 2 t 2 3 t 1 k t t 2 2 t 2 3 t 1 k 2 t 2 t 2 3 t 1 2 k 3 2 t 2 3 t 1 2 t 2 k 4 d n 7 2 13 n 3 17 2 n 0 7615 n 3 562 n the recurrence for this step set was 25 th order and of 4 th degree 44 the 0 307 is actually a root of 169 x 4 1014 x 3 507 x 2 78 x 4 maple s identify command was used on experimental data 41 the behavior of meanders appears to be a lot harder to peg down than the anticipated b n n for bridges and b n n 3 2 for excursions though it appears that meanders are always at least as large as bridges asymptotically 8 applications 8 1 combining solutions after obtaining all of these g f s we can produce much more sports are always a subject of interest for a good portion of the population sports statistics are an integral part of many a fan base so a question of interest beyond the number of ways to be tied may be the number of ways to win by at least x the task at hand then is how to describe a walk such as that we have spent the majority of this paper breaking down walks into smaller components we can now use those components to build other types of walks the important step is making sure that we count all of our walks and do not double count any walks suppose we want to win by 2 and never trail by more than 3 f 3 5 will count walks that drop by no more than 3 and we will have a 2 point lead at the end then any walk that stays above that line k 0 will produce what we want so does f 3 5 k 0 count what we want not necessarily f 3 5 ensures that at some point we are exactly 2 points ahead of where we began but depending on the step set we may skip over this lead and never actually hit the altitude 2 steps higher than our beginning in addition f 3 5 may finish with a step up and then down while k 0 could start that way effectively tracing the same walk in different ways thus f 3 5 k 0 double counts some walks and misses others there is at least one way though not as elegant of describing these walks let l de note the g f of interest then l k 3 f 3 0 f 3 1 f 3 2 f 3 3 f 3 4 we count all meanders that never drop more than 3 points and then remove those that change in altitude by exactly 3 2 1 0 1 42 example 31 let s 0 1 1 0 1 1 1 2 then l satisfies 0 t 3 t 12 63 t 11 555 t 10 2673 t 9 7671 t 8 13371 t 7 13745 t 6 7554 t 5 1615 t 4 179 t 3 138 t 2 21 t 1 9 t 14 216 t 13 2286 t 12 13986 t 11 54558 t 10 141402 t 9 246687 t 8 288270 t 7 221709 t 6 109548 t 5 33981 t 4 6448 t 3 715 t 2 42 t 1 l 3 t 3 3 t 7 36 t 6 153 t 5 261 t 4 126 t 3 50 t 2 26 t 2 l 2 9 t 6 l 3 and has truncated expansion l t 21 t 2 305 t 3 4064 t 4 52431 t 5 666657 t 6 8420130 t 7 106070229 t 8 1335635352 t 9 16832212452 t 10 the minimal polynomial was derived by finding a groebner basis we had to describe all of k 3 f 3 0 f 3 1 f 3 2 f 3 3 f 3 4 as well which included a chain of describing further walks but those methods are already set and have been shown to be closed 8 2 weighted walks one extension that would be fairly easy to implement is adding a weight to each step x y has an associated weight w then for example we would write 45 fa b 1 x y w s w tx fa y b y simply multiply by the weight whenever we take a certain step now we can accomplish more with the weights in place if x y w s w 1 and all x 1 then w represents the probability of taking a specific step and then fa b is the g f for the probability that a given walk of length n maintains altitude a y b if we want to know the probability of a bounded walk being a bounded bridge use weights to describe f a b the g f for probability of a general walk being a bounded bridge and divide its coefficients by the appropriate coefficient of fa b the probability of a general walk being bounded this is an explicit description of using pr a b pr a b pr b if all of the weights are the same then simply enumerate each one to get the probabilities it is much easier 45 taken from general walks in bounded section 2 43 example 32 let us try finding the probability of a general walk with step set s 1 2 1 3 1 1 1 6 1 2 1 2 being bounded above by y 3 and below by y 2 then the g f is explicitly 3 3888 3888 t 756 t 2 972 t 3 12 t 4 t 5 11664 7776 t 2 432 t 3 1296 t 4 t 6 which has taylor expansion 1 t 17 36 t 2 49 108 t 3 77 324 t 4 811 3888 t 5 53 432 t 6 3407 34992 t 7 26483 419904 t 8 58247 1259712 t 9 o t 10 we need the steps to all have the same x value otherwise we aren t representing the prob ability that a given walk of length n has some property we would somehow be combining the probability that a walk has length n and the probability that it satisfies our desired property ies in a way i cannot currently describe 8 3 2 step examples with all of the tools at our disposal let s now use them to produce more information about many sequences 8 3 1 bridges with s 1 1 1 k it is well known 46 that the g f for nonnegative excursions denoted f satisfies f 1 tk 1 f k 1 we would like to show something about bridges with this step set the g f for the first k 0 7 step sets have minimal polynomials t 1 g 1 4 t 2 1 g 2 1 27 t 3 4 g 3 3 g 1 256 t 4 27 g 4 18 g 2 8 g 1 3125 t 5 256 g 5 160 g 3 80 g 2 15 g 1 46656 t 6 3125 g 6 1875 g 4 1000 g 3 225 g 2 24 g 1 823543 t 7 46656 g 7 27216 g 5 15120 g 4 3780 g 3 504 g 2 35 g 1 46 try proving it for yourself or prove it for any finite k with this package 44 the general form appears to have leading term k 1 t k 1 kk gk 1 the g 1 term is fairly easy to see have coefficient k 1 k 1 the g 2 term after some manipulations has coeffi cients that follow k 2 2 k 1 k 2 the computer could only obtain up to k 9 before memory requirements became too large 3 gb allocated from that limited data i found that the g 3 term has coefficient that follows k 3 6 k 1 k 1 k 3 does this generalize and if so how these results are not groundbreaking as we can already enumerate the number of bridges of length a b n with step set 1 a 1 b with the simple a b nan they do allow a different view of the walks by considering how they can be built from copies of themselves 8 3 2 duchon numbers the duchon numbers 47 are one of the cases that lohr analyzed for asymptotic behavior lz 17 we can derive more information for the g f which we will denote f of the duchon numbers the sequence is defined as the number of paths of length 5 n from 0 0 to the line y 2 x 3 with unit north and east steps that stay below the line or touch it it is equivalent to enumerating excursions with step set 1 5 2 1 5 3 to find the minimal polynomial for its g f all we have to do is type equalsemiboundedscoringpaths s 0 t f and hit return 0 1 f 2 t f 5 t f 6 t f 7 t 2 f 10 we can also produce the minimal polynomial for the related g f of irreducible walks those that only touch at the endpoints we almost accomplish this with the call specificequalsemiboundedscoringpaths s 0 t f g g 0 0 but to match oeis a 293946 oeid we must allow the stationary walk simply substitute g 0 0 g 1 and we are done 0 g 10 19 g 9 162 g 8 816 g 7 2688 g 6 2 t 6048 g 5 19 t 9408 g 4 73 t 9984 g 3 142 t 6912 g 2 140 t 2816 g t 2 56 t 512 8 3 3 excursions with s 1 2 1 k we have some information for this family in the duchon numbers k 3 but what do they look like in general we will assume gcd 2 k 1 otherwise we could reduce the steps for an equiv 47 oeis a 060941 oeia 45 http oeis org a 293946 http oeis org a 060941 alent problem the first few g f have minimal polynomial we have made the transformation t t 1 2 k for ease of reading a 001764 k 1 f 3 t f 1 a 060941 k 3 f 10 t 2 f 7 t f 6 t 2 f 5 t f 1 a 300386 k 5 f 21 t 3 2 f 16 t 2 f 15 t 2 3 f 14 t 2 f 11 t f 10 t 2 f 9 t 2 f 8 t 3 f 7 t f 1 a 300387 k 7 f 36 t 4 3 f 29 t 3 f 28 t 3 4 f 27 t 3 3 f 22 t 2 2 f 21 t 2 6 f 20 t 2 3 f 19 t 2 6 f 18 t 2 f 15 t f 14 t 2 f 13 t 2 f 12 t 3 f 11 t 3 f 10 t 4 f 9 t f 1 a 300388 k 9 f 55 t 5 4 f 46 t 4 f 45 t 4 5 f 44 t 4 6 f 37 t 3 3 f 36 t 3 12 f 35 t 3 4 f 34 t 3 10 f 33 t 3 4 f 28 t 2 3 f 27 t 2 9 f 26 t 2 6 f 25 t 2 12 f 24 t 2 6 f 23 t 2 10 f 22 t 2 f 19 t f 18 t 2 f 17 t 2 f 16 t 3 f 15 t 3 f 14 t 4 f 13 t 4 f 12 t 5 f 11 t f 1 a 300389 k 11 f 78 t 6 5 f 67 t 5 f 66 t 5 6 f 65 t 5 10 f 56 t 4 4 f 55 t 4 20 f 54 t 4 5 f 53 t 4 15 f 52 t 4 10 f 45 t 3 6 f 44 t 3 24 f 43 t 3 12 f 42 t 3 30 f 41 t 3 10 f 40 t 3 20 f 39 t 3 5 f 34 t 2 4 f 33 t 2 12 f 32 t 2 9 f 31 t 2 18 f 30 t 2 12 f 29 t 2 20 f 28 t 2 10 f 27 t 2 15 f 26 t 2 f 23 t f 22 t 2 f 21 t 2 f 20 t 3 f 19 t 3 f 18 t 4 f 17 t 4 f 16 t 5 f 15 t 5 f 14 t 6 f 13 t f 1 the degree is simply 12 k 1 k 2 if one looks closer they may recognize that the degrees then decrease at a consistent rate the degree drops by k and then by 1 twice to create a group of 3 terms the degree then drops again by k 2 and then by 1 to create a group of 5 terms it can be seen that each polynomial follows this 1 3 5 7 pattern with the power of t decreasing by 1 in each successive group there is always a f 1 included we have empirically shown the general form of the minimal polynomial but were unable to describe what the coefficients themselves are a 001764 oeie and a 060941 oeia are sequences currently in the oeis a 300386 oeif a 300387 oeig a 300388 oeih and a 300389 oeii are new and have been recently submitted and accepted 46 http oeis org a 001764 http oeis org a 060941 http oeis org a 300386 http oeis org a 300387 http oeis org a 300388 http oeis org a 300389 http oeis org a 001764 http oeis org a 060941 http oeis org a 300386 http oeis org a 300387 http oeis org a 300388 http oeis org a 300389 8 3 4 excursions with s 1 3 1 k let us push our computers further what does this family look like we cannot derive a lot of information empirically as the 1 3 1 5 case already takes 28 seconds to run the case k 7 ran for over one day and had used 3 gib of allocated memory before it was terminated again we made the transformation t t 1 3 k for compact reading a 002293 k 1 f 4 t f 1 a 060941 k 2 f 10 t 2 f 7 t f 6 t 2 f 5 t f 1 a 300390 k 4 f 35 t 5 f 31 t 4 f 30 t 4 f 29 t 4 5 f 28 t 4 f 25 t 3 f 24 t 3 3 f 23 t 3 4 f 22 t 3 10 f 21 t 3 f 19 t 2 f 18 t 2 5 f 17 t 2 3 f 16 t 2 6 f 15 t 2 10 f 14 t 2 f 13 t f 12 t 3 f 10 t f 9 t 4 f 8 t 5 f 7 t f 1 a 300391 k 5 f 56 t 7 2 f 51 t 6 f 50 t 6 f 49 t 6 7 f 48 t 6 f 46 t 5 f 45 t 5 3 f 43 t 5 5 f 42 t 5 6 f 41 t 5 21 f 40 t 5 3 f 37 t 4 3 f 36 t 4 8 f 35 t 4 10 f 34 t 4 15 f 33 t 4 35 f 32 t 4 2 f 31 t 3 2 f 30 t 3 9 f 28 t 3 22 f 27 t 3 10 f 26 t 3 20 f 25 t 3 35 f 24 t 3 3 f 22 t 2 5 f 21 t 2 9 f 20 t 2 18 f 19 t 2 5 f 18 t 2 15 f 17 t 2 f 16 21 t 1 t f 15 t 3 f 13 t 3 f 12 t 5 f 11 t f 10 t 6 f 9 t 7 f 8 t f 1 a 002293 oeij and a 060941 oeia are already in the oeis while a 300390 oeik and a 300391 oeil are new there appears to be some pattern again in the degree of f though it is not discernible at first with so few datum the degree happens to follow 3 k 3 conjecture 33 let s 1 a 1 b with gcd a b 1 let f denote the g f for excursions or meanders or bridges with step set s then the minimal polynomial of f has degree a ba the above conjecture is supported by all of the examples in this section 8 3 as well as several other quick tests of accuracy though what does this mean in terms of deconstructing a walk with step set s this is somewhat intuitive for the unbounded case since there are a ba ways to have a bridge of smallest length a b and we have provided ample evidence that the asymptotic behavior is only off by c n for these excursions 47 http oeis org a 002293 http oeis org a 060941 http oeis org a 300390 http oeis org a 300391 http oeis org a 002293 http oeis org a 060941 http oeis org a 300390 http oeis org a 300391 9 conclusion and future work to analyze walks we began by examining the first step bounded section 2 the last step semi bounded section 3 and finally a middle step that crosses the x axis unbounded section 6 the way we dissected the g f equations is not unique you could describe them in slightly different ways that may be more optimal however the minimal polynomial is called that for a reason there is no better way to describe the g f except for an exact solution in special cases it is important to make sure you do not double count or miss any walks in your descriptions define your various types of walks in a very particular manner for bounded cases we produced the new oeis sequences a 301379 oeib and a 301380 oeic as well as a 301381 oeim and a 300998 oein which are not included in this thesis though they were produced in conjunction enumerating some semi bounded and unbounded examples may be much faster by actually solving the polynomial for the g f in cases where deg p 4 or p has nice roots one interesting note that appears in the semi bounded case is that no matter what we have chosen as our step set the minimal polynomial has had terms f 1 this seems to indicate that there is always a way to write semi bounded excursions and meanders as some combination and deductions of copies of only itself though it may be that the self description is extremely complicated seemingly without but it must be there any combinatorial interpretation see ex ample 10 we cannot necessarily do that with unbounded cases because there is not always a f term another trick we can use the minimal polynomial for is a bijective proof all of the walks counted by terms with positive coefficients are also equally counted by those terms with negative coefficients the trouble with this is that the two sides are very artificial and rarely something of interest by themselves in section 7 we tried looking at the asymptotics of excursions and bridges one note that came up was the relationship between the number of excursions and bridges it is known that the number of dyck paths is 1 n 1 of the total number of bridges with a different looking step set we 48 http oeis org a 301379 http oeis org a 301380 http oeis org a 301381 http oeis org a 300998 still obtained a c n asymptotic relationship for a constant c is this always the case we provided some heuristics and examples in support of the relationship but no found definitive proof the relationship to meanders of the same step set appears to be much harder to state exactly a little further in section 8 3 we examined many 2 step cases i contributed the new se quences a 300386 oeif a 300387 oeig a 300388 oeih a 300389 oeii a 300390 oeik and a 300391 oeil to the oeis these are equivalent to walks that stay below certain lines of rational slope a further question how does one translate walks with general step sets bounded by lines into bridges excursions or meanders what about bounded by something other than straight lines an extension that would be fairly easy though laborious to implement would be general izing from 2 d walks to 3 d walks or to n dimensional walks beyond simply enumerating walks we might want to know more about them how many peaks or valleys do they contain what is the area beneath the curve how many times does the walk hit its maximal minimal altitude we can try to answer these questions by adding in a catalytic variable to count this new measurement the generating function relations are very similar but the g f s themselves are now functions of 2 or more variables this can lead to systems that are not closed under current descriptions however the system can still be iterated to enumerate terms ayyer and zeilberger analyzed how many times a bounded bridge or excursion hits its boundaries az 08 in the bounded and semi bounded cases the extension to measuring the area under the curve has been started the bounded case still yields explicit solutions but the semi bounded and unbounded cases are now left as a system of equations rather than a minimal polynomial thank you for reading this paper i hope you have enjoyed it and can make use of this package 49 http oeis org a 300386 http oeis org a 300387 http oeis org a 300388 http oeis org a 300389 http oeis org a 300390 http oeis org a 300391 10 acknowledgements i would like to thank doron zeilberger for his direction in this paper and thank you to michael saks for his discussion on the methods as well as insights into analysis of the asymptotics this research was funded by a smart scholarship usd r e the under secretary of defense research and engineering national defense education program ndep ba 1 basic research thank you for reading this paper i hope you have enjoyed it and can make use of this package references az 90 gert almkvist and doron zeilberger the method of differentiating under the integral sign journal of symbolic computation 10 1990 571 591 az 07 arvind ayyer and doron zeilberger the number of old time basketball games with final score n n where the home team was never losing but also never ahead by more than w points the electronic journal of combinatorics 14 1 2007 r 19 az 08 two dimensional directed lattice walks with boundaries tapas in experimental mathematics vol 457 contemporary mathematics amer math soc providence ri 2008 pp 1 19 bkk 17 cyril banderier christian krattenthaler alan krinik dmitry kruchinin vladimir kruchinin david tuan nguyen and michael wallner explicit formulas for enumeration of lattice paths basketball and the kernel method arxiv 1609 06473 v 2 2017 borw 05 r brak a l owczarek a rechnitzer and s g whittington a directed walk model of a long chain polymer in a slit with attractive walls j phys a 38 2005 4309 4325 dr 71 e a dimarzio and r j rubin adsorption of a chain polymer between two plates j chem phys 55 1971 4318 4336 duc 00 philippe duchon on the enumeration and generation of generalized dyck words discrete mathematics 225 2000 121 135 ez 15 shalosh b ekhad and doron zeilberger the method of guess and check arxiv 1502 04377 v 1 2015 50 fs 09 philippe flajolet and robert sedgewick analytic combinatorics cambridge university press june 2009 kp 11 manuel kauers and peter paule the concrete tetrahedron springer 2011 lz 17 andrew lohr and doron zeilberger asymptotics of rational catalan combinatorics rsp april 2017 mr 09 marni mishna and andrew rechnitzer two non holonomic lattice walks in the quarter plane theor computer science 410 2009 3616 3630 nei neil j a sloane oeis foundation inc 2018 the on line encyclopedia of integer se quences http oeis org oeia oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 060941 oeib oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 301379 oeic oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 301380 oeid oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 293946 oeie oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 001764 oeif oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300386 oeig oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300387 oeih oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300388 oeii oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300389 oeij oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 002293 51 oeik oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300390 oeil oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300391 oeim oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 301381 oein oeis foundation inc 2018 the on line encyclopedia of integer sequences http oeis org a 300998 sz 94 bruno salvy and paul zimmermann gfun a maple package for the manipulation of generating and holonomic functions in one variable acm transactions on mathematical software toms 20 1994 no 2 163 177 vr 00 e j janse van rensburg the statistical mechanics of interacting walks polygons animals and vesicles vol 18 oxford university press oxford 2000 wz 85 jet wimp and doron zeilberger resurrecting the asymptotics of linear recurrences jour nal of mathematical analysis and applications 111 1985 no 1 162 176 52 1 introduction 1 1 motivation 1 2 definitions 1 3 paper organization 2 bounded 2 1 walking anywhere 2 1 1 examples 2 2 returning to the x axis 2 2 1 old time basketball 2 2 2 examples 3 semi bounded 3 1 arbitrary lower limit 3 2 meanders 4 guess and check method 5 algebraic to recursive 5 1 conversion 5 2 searching 6 unbounded 6 1 walking anywhere 6 2 returning to the x axis 6 3 alternative method 6 4 selected step sets 6 5 time comparison 7 asymptotics 7 1 discriminant 7 2 meanders 8 applications 8 1 combining solutions 8 2 weighted walks 8 3 2 step examples 8 3 1 bridges with s 1 1 1 k 8 3 2 duchon numbers 8 3 3 excursions with s 1 2 1 k 8 3 4 excursions with s 1 3 1 k 9 conclusion and future work 10 acknowledgements